//file:///C:/Program%20Files%20(x86)/Progress/Kendo%20UI%20for%20jQuery%20R2%202019/examples/index.html
//protoc --go_opt=paths=source_relative --go_out=plugins=grpc:. *.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.12.3
// source: gRpcServer.proto

package iotmaker_docker_communication_grpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port     string `protobuf:"bytes,1,opt,name=Port,proto3" json:"Port,omitempty"`
	Protocol string `protobuf:"bytes,2,opt,name=Protocol,proto3" json:"Protocol,omitempty"`
}

func (x *Port) Reset() {
	*x = Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Port) ProtoMessage() {}

func (x *Port) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Port.ProtoReflect.Descriptor instead.
func (*Port) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{0}
}

func (x *Port) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *Port) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

//port_number/protocol
type PortMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port map[string]*PortBindingList `protobuf:"bytes,1,rep,name=Port,proto3" json:"Port,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PortMap) Reset() {
	*x = PortMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortMap) ProtoMessage() {}

func (x *PortMap) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortMap.ProtoReflect.Descriptor instead.
func (*PortMap) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{1}
}

func (x *PortMap) GetPort() map[string]*PortBindingList {
	if x != nil {
		return x.Port
	}
	return nil
}

type PortBinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostIP   string `protobuf:"bytes,1,opt,name=HostIP,proto3" json:"HostIP,omitempty"`
	HostPort string `protobuf:"bytes,2,opt,name=HostPort,proto3" json:"HostPort,omitempty"`
}

func (x *PortBinding) Reset() {
	*x = PortBinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortBinding) ProtoMessage() {}

func (x *PortBinding) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortBinding.ProtoReflect.Descriptor instead.
func (*PortBinding) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{2}
}

func (x *PortBinding) GetHostIP() string {
	if x != nil {
		return x.HostIP
	}
	return ""
}

func (x *PortBinding) GetHostPort() string {
	if x != nil {
		return x.HostPort
	}
	return ""
}

type PortBindingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortBinding []*PortBinding `protobuf:"bytes,1,rep,name=PortBinding,proto3" json:"PortBinding,omitempty"`
}

func (x *PortBindingList) Reset() {
	*x = PortBindingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortBindingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortBindingList) ProtoMessage() {}

func (x *PortBindingList) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortBindingList.ProtoReflect.Descriptor instead.
func (*PortBindingList) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{3}
}

func (x *PortBindingList) GetPortBinding() []*PortBinding {
	if x != nil {
		return x.PortBinding
	}
	return nil
}

type EndpointSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IPAMConfig          *EndpointIPAMConfig `protobuf:"bytes,1,opt,name=IPAMConfig,proto3" json:"IPAMConfig,omitempty"`
	Links               []string            `protobuf:"bytes,2,rep,name=Links,proto3" json:"Links,omitempty"`
	Aliases             []string            `protobuf:"bytes,3,rep,name=Aliases,proto3" json:"Aliases,omitempty"`
	NetworkID           string              `protobuf:"bytes,4,opt,name=NetworkID,proto3" json:"NetworkID,omitempty"`
	EndpointID          string              `protobuf:"bytes,5,opt,name=EndpointID,proto3" json:"EndpointID,omitempty"`
	Gateway             string              `protobuf:"bytes,6,opt,name=Gateway,proto3" json:"Gateway,omitempty"`
	IPAddress           string              `protobuf:"bytes,7,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	IPPrefixLen         int64               `protobuf:"varint,8,opt,name=IPPrefixLen,proto3" json:"IPPrefixLen,omitempty"`
	IPv6Gateway         string              `protobuf:"bytes,9,opt,name=IPv6Gateway,proto3" json:"IPv6Gateway,omitempty"`
	GlobalIPv6Address   string              `protobuf:"bytes,10,opt,name=GlobalIPv6Address,proto3" json:"GlobalIPv6Address,omitempty"`
	GlobalIPv6PrefixLen int64               `protobuf:"varint,11,opt,name=GlobalIPv6PrefixLen,proto3" json:"GlobalIPv6PrefixLen,omitempty"`
	MacAddress          string              `protobuf:"bytes,12,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
	DriverOpts          map[string]string   `protobuf:"bytes,13,rep,name=DriverOpts,proto3" json:"DriverOpts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EndpointSettings) Reset() {
	*x = EndpointSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointSettings) ProtoMessage() {}

func (x *EndpointSettings) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointSettings.ProtoReflect.Descriptor instead.
func (*EndpointSettings) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{4}
}

func (x *EndpointSettings) GetIPAMConfig() *EndpointIPAMConfig {
	if x != nil {
		return x.IPAMConfig
	}
	return nil
}

func (x *EndpointSettings) GetLinks() []string {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *EndpointSettings) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *EndpointSettings) GetNetworkID() string {
	if x != nil {
		return x.NetworkID
	}
	return ""
}

func (x *EndpointSettings) GetEndpointID() string {
	if x != nil {
		return x.EndpointID
	}
	return ""
}

func (x *EndpointSettings) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *EndpointSettings) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *EndpointSettings) GetIPPrefixLen() int64 {
	if x != nil {
		return x.IPPrefixLen
	}
	return 0
}

func (x *EndpointSettings) GetIPv6Gateway() string {
	if x != nil {
		return x.IPv6Gateway
	}
	return ""
}

func (x *EndpointSettings) GetGlobalIPv6Address() string {
	if x != nil {
		return x.GlobalIPv6Address
	}
	return ""
}

func (x *EndpointSettings) GetGlobalIPv6PrefixLen() int64 {
	if x != nil {
		return x.GlobalIPv6PrefixLen
	}
	return 0
}

func (x *EndpointSettings) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *EndpointSettings) GetDriverOpts() map[string]string {
	if x != nil {
		return x.DriverOpts
	}
	return nil
}

type Mount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          string         `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Source        string         `protobuf:"bytes,2,opt,name=Source,proto3" json:"Source,omitempty"`
	Target        string         `protobuf:"bytes,3,opt,name=Target,proto3" json:"Target,omitempty"`
	ReadOnly      bool           `protobuf:"varint,4,opt,name=ReadOnly,proto3" json:"ReadOnly,omitempty"`
	Consistency   string         `protobuf:"bytes,5,opt,name=Consistency,proto3" json:"Consistency,omitempty"`
	BindOptions   *BindOptions   `protobuf:"bytes,6,opt,name=BindOptions,proto3" json:"BindOptions,omitempty"`
	VolumeOptions *VolumeOptions `protobuf:"bytes,7,opt,name=VolumeOptions,proto3" json:"VolumeOptions,omitempty"`
	TmpfsOptions  *TmpfsOptions  `protobuf:"bytes,8,opt,name=TmpfsOptions,proto3" json:"TmpfsOptions,omitempty"`
}

func (x *Mount) Reset() {
	*x = Mount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mount) ProtoMessage() {}

func (x *Mount) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mount.ProtoReflect.Descriptor instead.
func (*Mount) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{5}
}

func (x *Mount) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Mount) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Mount) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Mount) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *Mount) GetConsistency() string {
	if x != nil {
		return x.Consistency
	}
	return ""
}

func (x *Mount) GetBindOptions() *BindOptions {
	if x != nil {
		return x.BindOptions
	}
	return nil
}

func (x *Mount) GetVolumeOptions() *VolumeOptions {
	if x != nil {
		return x.VolumeOptions
	}
	return nil
}

func (x *Mount) GetTmpfsOptions() *TmpfsOptions {
	if x != nil {
		return x.TmpfsOptions
	}
	return nil
}

type EndpointIPAMConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IPv4Address  string   `protobuf:"bytes,1,opt,name=IPv4Address,proto3" json:"IPv4Address,omitempty"`
	IPv6Address  string   `protobuf:"bytes,2,opt,name=IPv6Address,proto3" json:"IPv6Address,omitempty"`
	LinkLocalIPs []string `protobuf:"bytes,3,rep,name=LinkLocalIPs,proto3" json:"LinkLocalIPs,omitempty"`
}

func (x *EndpointIPAMConfig) Reset() {
	*x = EndpointIPAMConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointIPAMConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointIPAMConfig) ProtoMessage() {}

func (x *EndpointIPAMConfig) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointIPAMConfig.ProtoReflect.Descriptor instead.
func (*EndpointIPAMConfig) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{6}
}

func (x *EndpointIPAMConfig) GetIPv4Address() string {
	if x != nil {
		return x.IPv4Address
	}
	return ""
}

func (x *EndpointIPAMConfig) GetIPv6Address() string {
	if x != nil {
		return x.IPv6Address
	}
	return ""
}

func (x *EndpointIPAMConfig) GetLinkLocalIPs() []string {
	if x != nil {
		return x.LinkLocalIPs
	}
	return nil
}

type BindOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Propagation  string `protobuf:"bytes,1,opt,name=Propagation,proto3" json:"Propagation,omitempty"`
	NonRecursive bool   `protobuf:"varint,2,opt,name=NonRecursive,proto3" json:"NonRecursive,omitempty"`
}

func (x *BindOptions) Reset() {
	*x = BindOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindOptions) ProtoMessage() {}

func (x *BindOptions) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindOptions.ProtoReflect.Descriptor instead.
func (*BindOptions) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{7}
}

func (x *BindOptions) GetPropagation() string {
	if x != nil {
		return x.Propagation
	}
	return ""
}

func (x *BindOptions) GetNonRecursive() bool {
	if x != nil {
		return x.NonRecursive
	}
	return false
}

type Driver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string            `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Options map[string]string `protobuf:"bytes,2,rep,name=Options,proto3" json:"Options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Driver) Reset() {
	*x = Driver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Driver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Driver) ProtoMessage() {}

func (x *Driver) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Driver.ProtoReflect.Descriptor instead.
func (*Driver) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{8}
}

func (x *Driver) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Driver) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

type VolumeOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoCopy       bool              `protobuf:"varint,1,opt,name=NoCopy,proto3" json:"NoCopy,omitempty"`
	Labels       map[string]string `protobuf:"bytes,2,rep,name=Labels,proto3" json:"Labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DriverConfig *Driver           `protobuf:"bytes,3,opt,name=DriverConfig,proto3" json:"DriverConfig,omitempty"`
}

func (x *VolumeOptions) Reset() {
	*x = VolumeOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeOptions) ProtoMessage() {}

func (x *VolumeOptions) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeOptions.ProtoReflect.Descriptor instead.
func (*VolumeOptions) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{9}
}

func (x *VolumeOptions) GetNoCopy() bool {
	if x != nil {
		return x.NoCopy
	}
	return false
}

func (x *VolumeOptions) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *VolumeOptions) GetDriverConfig() *Driver {
	if x != nil {
		return x.DriverConfig
	}
	return nil
}

type TmpfsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SizeBytes int64  `protobuf:"varint,1,opt,name=SizeBytes,proto3" json:"SizeBytes,omitempty"`
	Mode      uint32 `protobuf:"varint,2,opt,name=Mode,proto3" json:"Mode,omitempty"`
}

func (x *TmpfsOptions) Reset() {
	*x = TmpfsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TmpfsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TmpfsOptions) ProtoMessage() {}

func (x *TmpfsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TmpfsOptions.ProtoReflect.Descriptor instead.
func (*TmpfsOptions) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{10}
}

func (x *TmpfsOptions) GetSizeBytes() int64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *TmpfsOptions) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

type IPAMConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet     string            `protobuf:"bytes,1,opt,name=Subnet,proto3" json:"Subnet,omitempty"`
	IPRange    string            `protobuf:"bytes,2,opt,name=IPRange,proto3" json:"IPRange,omitempty"`
	Gateway    string            `protobuf:"bytes,3,opt,name=Gateway,proto3" json:"Gateway,omitempty"`
	AuxAddress map[string]string `protobuf:"bytes,4,rep,name=AuxAddress,proto3" json:"AuxAddress,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IPAMConfig) Reset() {
	*x = IPAMConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPAMConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPAMConfig) ProtoMessage() {}

func (x *IPAMConfig) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPAMConfig.ProtoReflect.Descriptor instead.
func (*IPAMConfig) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{11}
}

func (x *IPAMConfig) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *IPAMConfig) GetIPRange() string {
	if x != nil {
		return x.IPRange
	}
	return ""
}

func (x *IPAMConfig) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *IPAMConfig) GetAuxAddress() map[string]string {
	if x != nil {
		return x.AuxAddress
	}
	return nil
}

type ContainerInspectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ContainerInspectRequest) Reset() {
	*x = ContainerInspectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerInspectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInspectRequest) ProtoMessage() {}

func (x *ContainerInspectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInspectRequest.ProtoReflect.Descriptor instead.
func (*ContainerInspectRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{12}
}

func (x *ContainerInspectRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ContainerInspectReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *ContainerInspectReply) Reset() {
	*x = ContainerInspectReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerInspectReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInspectReply) ProtoMessage() {}

func (x *ContainerInspectReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInspectReply.ProtoReflect.Descriptor instead.
func (*ContainerInspectReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{13}
}

func (x *ContainerInspectReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type NetworkInspectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *NetworkInspectRequest) Reset() {
	*x = NetworkInspectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkInspectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInspectRequest) ProtoMessage() {}

func (x *NetworkInspectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInspectRequest.ProtoReflect.Descriptor instead.
func (*NetworkInspectRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{14}
}

func (x *NetworkInspectRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type NetworkInspectReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *NetworkInspectReply) Reset() {
	*x = NetworkInspectReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkInspectReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInspectReply) ProtoMessage() {}

func (x *NetworkInspectReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInspectReply.ProtoReflect.Descriptor instead.
func (*NetworkInspectReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{15}
}

func (x *NetworkInspectReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ContainerCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageName       string   `protobuf:"bytes,1,opt,name=ImageName,proto3" json:"ImageName,omitempty"`
	ContainerName   string   `protobuf:"bytes,2,opt,name=ContainerName,proto3" json:"ContainerName,omitempty"`
	RestartPolicy   string   `protobuf:"bytes,3,opt,name=RestartPolicy,proto3" json:"RestartPolicy,omitempty"`
	PortExposedList *PortMap `protobuf:"bytes,4,opt,name=PortExposedList,proto3" json:"PortExposedList,omitempty"`
	MountVolumes    []*Mount `protobuf:"bytes,5,rep,name=MountVolumes,proto3" json:"MountVolumes,omitempty"`
	NetworkName     string   `protobuf:"bytes,6,opt,name=NetworkName,proto3" json:"NetworkName,omitempty"`
}

func (x *ContainerCreateRequest) Reset() {
	*x = ContainerCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerCreateRequest) ProtoMessage() {}

func (x *ContainerCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerCreateRequest.ProtoReflect.Descriptor instead.
func (*ContainerCreateRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{16}
}

func (x *ContainerCreateRequest) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *ContainerCreateRequest) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *ContainerCreateRequest) GetRestartPolicy() string {
	if x != nil {
		return x.RestartPolicy
	}
	return ""
}

func (x *ContainerCreateRequest) GetPortExposedList() *PortMap {
	if x != nil {
		return x.PortExposedList
	}
	return nil
}

func (x *ContainerCreateRequest) GetMountVolumes() []*Mount {
	if x != nil {
		return x.MountVolumes
	}
	return nil
}

func (x *ContainerCreateRequest) GetNetworkName() string {
	if x != nil {
		return x.NetworkName
	}
	return ""
}

type ContainerCreateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ContainerCreateReply) Reset() {
	*x = ContainerCreateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerCreateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerCreateReply) ProtoMessage() {}

func (x *ContainerCreateReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerCreateReply.ProtoReflect.Descriptor instead.
func (*ContainerCreateReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{17}
}

func (x *ContainerCreateReply) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ContainerCreateAndChangeExposedPortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageName     string   `protobuf:"bytes,1,opt,name=ImageName,proto3" json:"ImageName,omitempty"`
	ContainerName string   `protobuf:"bytes,2,opt,name=ContainerName,proto3" json:"ContainerName,omitempty"`
	RestartPolicy string   `protobuf:"bytes,3,opt,name=RestartPolicy,proto3" json:"RestartPolicy,omitempty"`
	MountVolumes  []*Mount `protobuf:"bytes,4,rep,name=MountVolumes,proto3" json:"MountVolumes,omitempty"`
	NetworkName   string   `protobuf:"bytes,5,opt,name=NetworkName,proto3" json:"NetworkName,omitempty"`
	CurrentPort   []*Port  `protobuf:"bytes,6,rep,name=CurrentPort,proto3" json:"CurrentPort,omitempty"`
	ChangeToPort  []*Port  `protobuf:"bytes,7,rep,name=ChangeToPort,proto3" json:"ChangeToPort,omitempty"`
}

func (x *ContainerCreateAndChangeExposedPortRequest) Reset() {
	*x = ContainerCreateAndChangeExposedPortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerCreateAndChangeExposedPortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerCreateAndChangeExposedPortRequest) ProtoMessage() {}

func (x *ContainerCreateAndChangeExposedPortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerCreateAndChangeExposedPortRequest.ProtoReflect.Descriptor instead.
func (*ContainerCreateAndChangeExposedPortRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{18}
}

func (x *ContainerCreateAndChangeExposedPortRequest) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *ContainerCreateAndChangeExposedPortRequest) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *ContainerCreateAndChangeExposedPortRequest) GetRestartPolicy() string {
	if x != nil {
		return x.RestartPolicy
	}
	return ""
}

func (x *ContainerCreateAndChangeExposedPortRequest) GetMountVolumes() []*Mount {
	if x != nil {
		return x.MountVolumes
	}
	return nil
}

func (x *ContainerCreateAndChangeExposedPortRequest) GetNetworkName() string {
	if x != nil {
		return x.NetworkName
	}
	return ""
}

func (x *ContainerCreateAndChangeExposedPortRequest) GetCurrentPort() []*Port {
	if x != nil {
		return x.CurrentPort
	}
	return nil
}

func (x *ContainerCreateAndChangeExposedPortRequest) GetChangeToPort() []*Port {
	if x != nil {
		return x.ChangeToPort
	}
	return nil
}

type ContainerCreateAndChangeExposedPortReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ContainerCreateAndChangeExposedPortReply) Reset() {
	*x = ContainerCreateAndChangeExposedPortReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerCreateAndChangeExposedPortReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerCreateAndChangeExposedPortReply) ProtoMessage() {}

func (x *ContainerCreateAndChangeExposedPortReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerCreateAndChangeExposedPortReply.ProtoReflect.Descriptor instead.
func (*ContainerCreateAndChangeExposedPortReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{19}
}

func (x *ContainerCreateAndChangeExposedPortReply) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ContainerCreateAndExposePortsAutomaticallyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageName     string   `protobuf:"bytes,1,opt,name=ImageName,proto3" json:"ImageName,omitempty"`
	ContainerName string   `protobuf:"bytes,2,opt,name=ContainerName,proto3" json:"ContainerName,omitempty"`
	RestartPolicy string   `protobuf:"bytes,3,opt,name=RestartPolicy,proto3" json:"RestartPolicy,omitempty"`
	MountVolumes  []*Mount `protobuf:"bytes,4,rep,name=MountVolumes,proto3" json:"MountVolumes,omitempty"`
	NetworkName   string   `protobuf:"bytes,5,opt,name=NetworkName,proto3" json:"NetworkName,omitempty"`
}

func (x *ContainerCreateAndExposePortsAutomaticallyRequest) Reset() {
	*x = ContainerCreateAndExposePortsAutomaticallyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerCreateAndExposePortsAutomaticallyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerCreateAndExposePortsAutomaticallyRequest) ProtoMessage() {}

func (x *ContainerCreateAndExposePortsAutomaticallyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerCreateAndExposePortsAutomaticallyRequest.ProtoReflect.Descriptor instead.
func (*ContainerCreateAndExposePortsAutomaticallyRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{20}
}

func (x *ContainerCreateAndExposePortsAutomaticallyRequest) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *ContainerCreateAndExposePortsAutomaticallyRequest) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *ContainerCreateAndExposePortsAutomaticallyRequest) GetRestartPolicy() string {
	if x != nil {
		return x.RestartPolicy
	}
	return ""
}

func (x *ContainerCreateAndExposePortsAutomaticallyRequest) GetMountVolumes() []*Mount {
	if x != nil {
		return x.MountVolumes
	}
	return nil
}

func (x *ContainerCreateAndExposePortsAutomaticallyRequest) GetNetworkName() string {
	if x != nil {
		return x.NetworkName
	}
	return ""
}

type ContainerCreateAndExposePortsAutomaticallyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ContainerCreateAndExposePortsAutomaticallyReply) Reset() {
	*x = ContainerCreateAndExposePortsAutomaticallyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerCreateAndExposePortsAutomaticallyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerCreateAndExposePortsAutomaticallyReply) ProtoMessage() {}

func (x *ContainerCreateAndExposePortsAutomaticallyReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerCreateAndExposePortsAutomaticallyReply.ProtoReflect.Descriptor instead.
func (*ContainerCreateAndExposePortsAutomaticallyReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{21}
}

func (x *ContainerCreateAndExposePortsAutomaticallyReply) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ContainerCreateAndStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageName       string   `protobuf:"bytes,1,opt,name=ImageName,proto3" json:"ImageName,omitempty"`
	ContainerName   string   `protobuf:"bytes,2,opt,name=ContainerName,proto3" json:"ContainerName,omitempty"`
	RestartPolicy   string   `protobuf:"bytes,3,opt,name=RestartPolicy,proto3" json:"RestartPolicy,omitempty"`
	PortExposedList *PortMap `protobuf:"bytes,4,opt,name=PortExposedList,proto3" json:"PortExposedList,omitempty"`
	MountVolumes    []*Mount `protobuf:"bytes,5,rep,name=MountVolumes,proto3" json:"MountVolumes,omitempty"`
	NetworkName     string   `protobuf:"bytes,6,opt,name=NetworkName,proto3" json:"NetworkName,omitempty"`
}

func (x *ContainerCreateAndStartRequest) Reset() {
	*x = ContainerCreateAndStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerCreateAndStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerCreateAndStartRequest) ProtoMessage() {}

func (x *ContainerCreateAndStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerCreateAndStartRequest.ProtoReflect.Descriptor instead.
func (*ContainerCreateAndStartRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{22}
}

func (x *ContainerCreateAndStartRequest) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *ContainerCreateAndStartRequest) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *ContainerCreateAndStartRequest) GetRestartPolicy() string {
	if x != nil {
		return x.RestartPolicy
	}
	return ""
}

func (x *ContainerCreateAndStartRequest) GetPortExposedList() *PortMap {
	if x != nil {
		return x.PortExposedList
	}
	return nil
}

func (x *ContainerCreateAndStartRequest) GetMountVolumes() []*Mount {
	if x != nil {
		return x.MountVolumes
	}
	return nil
}

func (x *ContainerCreateAndStartRequest) GetNetworkName() string {
	if x != nil {
		return x.NetworkName
	}
	return ""
}

type ContainerCreateAndStartReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ContainerCreateAndStartReply) Reset() {
	*x = ContainerCreateAndStartReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerCreateAndStartReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerCreateAndStartReply) ProtoMessage() {}

func (x *ContainerCreateAndStartReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerCreateAndStartReply.ProtoReflect.Descriptor instead.
func (*ContainerCreateAndStartReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{23}
}

func (x *ContainerCreateAndStartReply) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ContainerCreateChangeExposedPortAndStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageName     string   `protobuf:"bytes,1,opt,name=ImageName,proto3" json:"ImageName,omitempty"`
	ContainerName string   `protobuf:"bytes,2,opt,name=ContainerName,proto3" json:"ContainerName,omitempty"`
	RestartPolicy string   `protobuf:"bytes,3,opt,name=RestartPolicy,proto3" json:"RestartPolicy,omitempty"`
	MountVolumes  []*Mount `protobuf:"bytes,4,rep,name=MountVolumes,proto3" json:"MountVolumes,omitempty"`
	NetworkName   string   `protobuf:"bytes,5,opt,name=NetworkName,proto3" json:"NetworkName,omitempty"`
	CurrentPort   []*Port  `protobuf:"bytes,6,rep,name=CurrentPort,proto3" json:"CurrentPort,omitempty"`
	ChangeToPort  []*Port  `protobuf:"bytes,7,rep,name=ChangeToPort,proto3" json:"ChangeToPort,omitempty"`
}

func (x *ContainerCreateChangeExposedPortAndStartRequest) Reset() {
	*x = ContainerCreateChangeExposedPortAndStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerCreateChangeExposedPortAndStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerCreateChangeExposedPortAndStartRequest) ProtoMessage() {}

func (x *ContainerCreateChangeExposedPortAndStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerCreateChangeExposedPortAndStartRequest.ProtoReflect.Descriptor instead.
func (*ContainerCreateChangeExposedPortAndStartRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{24}
}

func (x *ContainerCreateChangeExposedPortAndStartRequest) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *ContainerCreateChangeExposedPortAndStartRequest) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *ContainerCreateChangeExposedPortAndStartRequest) GetRestartPolicy() string {
	if x != nil {
		return x.RestartPolicy
	}
	return ""
}

func (x *ContainerCreateChangeExposedPortAndStartRequest) GetMountVolumes() []*Mount {
	if x != nil {
		return x.MountVolumes
	}
	return nil
}

func (x *ContainerCreateChangeExposedPortAndStartRequest) GetNetworkName() string {
	if x != nil {
		return x.NetworkName
	}
	return ""
}

func (x *ContainerCreateChangeExposedPortAndStartRequest) GetCurrentPort() []*Port {
	if x != nil {
		return x.CurrentPort
	}
	return nil
}

func (x *ContainerCreateChangeExposedPortAndStartRequest) GetChangeToPort() []*Port {
	if x != nil {
		return x.ChangeToPort
	}
	return nil
}

type ContainerCreateChangeExposedPortAndStartReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ContainerCreateChangeExposedPortAndStartReply) Reset() {
	*x = ContainerCreateChangeExposedPortAndStartReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerCreateChangeExposedPortAndStartReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerCreateChangeExposedPortAndStartReply) ProtoMessage() {}

func (x *ContainerCreateChangeExposedPortAndStartReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerCreateChangeExposedPortAndStartReply.ProtoReflect.Descriptor instead.
func (*ContainerCreateChangeExposedPortAndStartReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{25}
}

func (x *ContainerCreateChangeExposedPortAndStartReply) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ContainerCreateExposePortsAutomaticallyAndStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageName     string   `protobuf:"bytes,1,opt,name=ImageName,proto3" json:"ImageName,omitempty"`
	ContainerName string   `protobuf:"bytes,2,opt,name=ContainerName,proto3" json:"ContainerName,omitempty"`
	RestartPolicy string   `protobuf:"bytes,3,opt,name=RestartPolicy,proto3" json:"RestartPolicy,omitempty"`
	MountVolumes  []*Mount `protobuf:"bytes,4,rep,name=MountVolumes,proto3" json:"MountVolumes,omitempty"`
	NetworkName   string   `protobuf:"bytes,5,opt,name=NetworkName,proto3" json:"NetworkName,omitempty"`
}

func (x *ContainerCreateExposePortsAutomaticallyAndStartRequest) Reset() {
	*x = ContainerCreateExposePortsAutomaticallyAndStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerCreateExposePortsAutomaticallyAndStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerCreateExposePortsAutomaticallyAndStartRequest) ProtoMessage() {}

func (x *ContainerCreateExposePortsAutomaticallyAndStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerCreateExposePortsAutomaticallyAndStartRequest.ProtoReflect.Descriptor instead.
func (*ContainerCreateExposePortsAutomaticallyAndStartRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{26}
}

func (x *ContainerCreateExposePortsAutomaticallyAndStartRequest) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *ContainerCreateExposePortsAutomaticallyAndStartRequest) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *ContainerCreateExposePortsAutomaticallyAndStartRequest) GetRestartPolicy() string {
	if x != nil {
		return x.RestartPolicy
	}
	return ""
}

func (x *ContainerCreateExposePortsAutomaticallyAndStartRequest) GetMountVolumes() []*Mount {
	if x != nil {
		return x.MountVolumes
	}
	return nil
}

func (x *ContainerCreateExposePortsAutomaticallyAndStartRequest) GetNetworkName() string {
	if x != nil {
		return x.NetworkName
	}
	return ""
}

type ContainerCreateExposePortsAutomaticallyAndStartReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ContainerCreateExposePortsAutomaticallyAndStartReply) Reset() {
	*x = ContainerCreateExposePortsAutomaticallyAndStartReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerCreateExposePortsAutomaticallyAndStartReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerCreateExposePortsAutomaticallyAndStartReply) ProtoMessage() {}

func (x *ContainerCreateExposePortsAutomaticallyAndStartReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerCreateExposePortsAutomaticallyAndStartReply.ProtoReflect.Descriptor instead.
func (*ContainerCreateExposePortsAutomaticallyAndStartReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{27}
}

func (x *ContainerCreateExposePortsAutomaticallyAndStartReply) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ContainerCreateWithoutExposePortsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageName     string   `protobuf:"bytes,1,opt,name=ImageName,proto3" json:"ImageName,omitempty"`
	ContainerName string   `protobuf:"bytes,2,opt,name=ContainerName,proto3" json:"ContainerName,omitempty"`
	RestartPolicy string   `protobuf:"bytes,3,opt,name=RestartPolicy,proto3" json:"RestartPolicy,omitempty"`
	MountVolumes  []*Mount `protobuf:"bytes,4,rep,name=MountVolumes,proto3" json:"MountVolumes,omitempty"`
	NetworkName   string   `protobuf:"bytes,5,opt,name=NetworkName,proto3" json:"NetworkName,omitempty"`
}

func (x *ContainerCreateWithoutExposePortsRequest) Reset() {
	*x = ContainerCreateWithoutExposePortsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerCreateWithoutExposePortsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerCreateWithoutExposePortsRequest) ProtoMessage() {}

func (x *ContainerCreateWithoutExposePortsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerCreateWithoutExposePortsRequest.ProtoReflect.Descriptor instead.
func (*ContainerCreateWithoutExposePortsRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{28}
}

func (x *ContainerCreateWithoutExposePortsRequest) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *ContainerCreateWithoutExposePortsRequest) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *ContainerCreateWithoutExposePortsRequest) GetRestartPolicy() string {
	if x != nil {
		return x.RestartPolicy
	}
	return ""
}

func (x *ContainerCreateWithoutExposePortsRequest) GetMountVolumes() []*Mount {
	if x != nil {
		return x.MountVolumes
	}
	return nil
}

func (x *ContainerCreateWithoutExposePortsRequest) GetNetworkName() string {
	if x != nil {
		return x.NetworkName
	}
	return ""
}

type ContainerCreateWithoutExposePortsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ContainerCreateWithoutExposePortsReply) Reset() {
	*x = ContainerCreateWithoutExposePortsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerCreateWithoutExposePortsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerCreateWithoutExposePortsReply) ProtoMessage() {}

func (x *ContainerCreateWithoutExposePortsReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerCreateWithoutExposePortsReply.ProtoReflect.Descriptor instead.
func (*ContainerCreateWithoutExposePortsReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{29}
}

func (x *ContainerCreateWithoutExposePortsReply) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ContainerCreateWithoutExposePortsAndStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageName     string   `protobuf:"bytes,1,opt,name=ImageName,proto3" json:"ImageName,omitempty"`
	ContainerName string   `protobuf:"bytes,2,opt,name=ContainerName,proto3" json:"ContainerName,omitempty"`
	RestartPolicy string   `protobuf:"bytes,3,opt,name=RestartPolicy,proto3" json:"RestartPolicy,omitempty"`
	MountVolumes  []*Mount `protobuf:"bytes,4,rep,name=MountVolumes,proto3" json:"MountVolumes,omitempty"`
	NetworkName   string   `protobuf:"bytes,5,opt,name=NetworkName,proto3" json:"NetworkName,omitempty"`
}

func (x *ContainerCreateWithoutExposePortsAndStartRequest) Reset() {
	*x = ContainerCreateWithoutExposePortsAndStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerCreateWithoutExposePortsAndStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerCreateWithoutExposePortsAndStartRequest) ProtoMessage() {}

func (x *ContainerCreateWithoutExposePortsAndStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerCreateWithoutExposePortsAndStartRequest.ProtoReflect.Descriptor instead.
func (*ContainerCreateWithoutExposePortsAndStartRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{30}
}

func (x *ContainerCreateWithoutExposePortsAndStartRequest) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *ContainerCreateWithoutExposePortsAndStartRequest) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *ContainerCreateWithoutExposePortsAndStartRequest) GetRestartPolicy() string {
	if x != nil {
		return x.RestartPolicy
	}
	return ""
}

func (x *ContainerCreateWithoutExposePortsAndStartRequest) GetMountVolumes() []*Mount {
	if x != nil {
		return x.MountVolumes
	}
	return nil
}

func (x *ContainerCreateWithoutExposePortsAndStartRequest) GetNetworkName() string {
	if x != nil {
		return x.NetworkName
	}
	return ""
}

type ContainerCreateWithoutExposePortsAndStartReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ContainerCreateWithoutExposePortsAndStartReply) Reset() {
	*x = ContainerCreateWithoutExposePortsAndStartReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerCreateWithoutExposePortsAndStartReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerCreateWithoutExposePortsAndStartReply) ProtoMessage() {}

func (x *ContainerCreateWithoutExposePortsAndStartReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerCreateWithoutExposePortsAndStartReply.ProtoReflect.Descriptor instead.
func (*ContainerCreateWithoutExposePortsAndStartReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{31}
}

func (x *ContainerCreateWithoutExposePortsAndStartReply) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ContainerFindIdByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *ContainerFindIdByNameRequest) Reset() {
	*x = ContainerFindIdByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerFindIdByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerFindIdByNameRequest) ProtoMessage() {}

func (x *ContainerFindIdByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerFindIdByNameRequest.ProtoReflect.Descriptor instead.
func (*ContainerFindIdByNameRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{32}
}

func (x *ContainerFindIdByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ContainerFindIdByNameReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ContainerFindIdByNameReply) Reset() {
	*x = ContainerFindIdByNameReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerFindIdByNameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerFindIdByNameReply) ProtoMessage() {}

func (x *ContainerFindIdByNameReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerFindIdByNameReply.ProtoReflect.Descriptor instead.
func (*ContainerFindIdByNameReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{33}
}

func (x *ContainerFindIdByNameReply) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ContainerFindIdByNameContainsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *ContainerFindIdByNameContainsRequest) Reset() {
	*x = ContainerFindIdByNameContainsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerFindIdByNameContainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerFindIdByNameContainsRequest) ProtoMessage() {}

func (x *ContainerFindIdByNameContainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerFindIdByNameContainsRequest.ProtoReflect.Descriptor instead.
func (*ContainerFindIdByNameContainsRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{34}
}

func (x *ContainerFindIdByNameContainsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ContainerFindIdByNameContainsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *ContainerFindIdByNameContainsReply) Reset() {
	*x = ContainerFindIdByNameContainsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerFindIdByNameContainsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerFindIdByNameContainsReply) ProtoMessage() {}

func (x *ContainerFindIdByNameContainsReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerFindIdByNameContainsReply.ProtoReflect.Descriptor instead.
func (*ContainerFindIdByNameContainsReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{35}
}

func (x *ContainerFindIdByNameContainsReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ContainerInspectByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *ContainerInspectByNameRequest) Reset() {
	*x = ContainerInspectByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerInspectByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInspectByNameRequest) ProtoMessage() {}

func (x *ContainerInspectByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInspectByNameRequest.ProtoReflect.Descriptor instead.
func (*ContainerInspectByNameRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{36}
}

func (x *ContainerInspectByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ContainerInspectByNameReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *ContainerInspectByNameReply) Reset() {
	*x = ContainerInspectByNameReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerInspectByNameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInspectByNameReply) ProtoMessage() {}

func (x *ContainerInspectByNameReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInspectByNameReply.ProtoReflect.Descriptor instead.
func (*ContainerInspectByNameReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{37}
}

func (x *ContainerInspectByNameReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ContainerInspectJSonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ContainerInspectJSonRequest) Reset() {
	*x = ContainerInspectJSonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerInspectJSonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInspectJSonRequest) ProtoMessage() {}

func (x *ContainerInspectJSonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInspectJSonRequest.ProtoReflect.Descriptor instead.
func (*ContainerInspectJSonRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{38}
}

func (x *ContainerInspectJSonRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ContainerInspectJSonReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inspect string `protobuf:"bytes,1,opt,name=Inspect,proto3" json:"Inspect,omitempty"`
}

func (x *ContainerInspectJSonReply) Reset() {
	*x = ContainerInspectJSonReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerInspectJSonReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInspectJSonReply) ProtoMessage() {}

func (x *ContainerInspectJSonReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInspectJSonReply.ProtoReflect.Descriptor instead.
func (*ContainerInspectJSonReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{39}
}

func (x *ContainerInspectJSonReply) GetInspect() string {
	if x != nil {
		return x.Inspect
	}
	return ""
}

type ContainerInspectJSonByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *ContainerInspectJSonByNameRequest) Reset() {
	*x = ContainerInspectJSonByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerInspectJSonByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInspectJSonByNameRequest) ProtoMessage() {}

func (x *ContainerInspectJSonByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInspectJSonByNameRequest.ProtoReflect.Descriptor instead.
func (*ContainerInspectJSonByNameRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{40}
}

func (x *ContainerInspectJSonByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ContainerInspectJSonByNameReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inspect string `protobuf:"bytes,1,opt,name=Inspect,proto3" json:"Inspect,omitempty"`
}

func (x *ContainerInspectJSonByNameReply) Reset() {
	*x = ContainerInspectJSonByNameReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerInspectJSonByNameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInspectJSonByNameReply) ProtoMessage() {}

func (x *ContainerInspectJSonByNameReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInspectJSonByNameReply.ProtoReflect.Descriptor instead.
func (*ContainerInspectJSonByNameReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{41}
}

func (x *ContainerInspectJSonByNameReply) GetInspect() string {
	if x != nil {
		return x.Inspect
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{42}
}

type ContainerListAllReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *ContainerListAllReply) Reset() {
	*x = ContainerListAllReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerListAllReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerListAllReply) ProtoMessage() {}

func (x *ContainerListAllReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerListAllReply.ProtoReflect.Descriptor instead.
func (*ContainerListAllReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{43}
}

func (x *ContainerListAllReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ContainerNetworkInspectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ContainerNetworkInspectRequest) Reset() {
	*x = ContainerNetworkInspectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerNetworkInspectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerNetworkInspectRequest) ProtoMessage() {}

func (x *ContainerNetworkInspectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerNetworkInspectRequest.ProtoReflect.Descriptor instead.
func (*ContainerNetworkInspectRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{44}
}

func (x *ContainerNetworkInspectRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ContainerNetworkInspectReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *ContainerNetworkInspectReply) Reset() {
	*x = ContainerNetworkInspectReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerNetworkInspectReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerNetworkInspectReply) ProtoMessage() {}

func (x *ContainerNetworkInspectReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerNetworkInspectReply.ProtoReflect.Descriptor instead.
func (*ContainerNetworkInspectReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{45}
}

func (x *ContainerNetworkInspectReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ContainerRemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	RemoveVolumes bool   `protobuf:"varint,2,opt,name=RemoveVolumes,proto3" json:"RemoveVolumes,omitempty"`
	RemoveLinks   bool   `protobuf:"varint,3,opt,name=RemoveLinks,proto3" json:"RemoveLinks,omitempty"`
	Force         bool   `protobuf:"varint,4,opt,name=Force,proto3" json:"Force,omitempty"`
}

func (x *ContainerRemoveRequest) Reset() {
	*x = ContainerRemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerRemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerRemoveRequest) ProtoMessage() {}

func (x *ContainerRemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerRemoveRequest.ProtoReflect.Descriptor instead.
func (*ContainerRemoveRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{46}
}

func (x *ContainerRemoveRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ContainerRemoveRequest) GetRemoveVolumes() bool {
	if x != nil {
		return x.RemoveVolumes
	}
	return false
}

func (x *ContainerRemoveRequest) GetRemoveLinks() bool {
	if x != nil {
		return x.RemoveLinks
	}
	return false
}

func (x *ContainerRemoveRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type ContainerStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ContainerStartRequest) Reset() {
	*x = ContainerStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerStartRequest) ProtoMessage() {}

func (x *ContainerStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerStartRequest.ProtoReflect.Descriptor instead.
func (*ContainerStartRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{47}
}

func (x *ContainerStartRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ContainerStatisticsOneShotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ContainerStatisticsOneShotRequest) Reset() {
	*x = ContainerStatisticsOneShotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerStatisticsOneShotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerStatisticsOneShotRequest) ProtoMessage() {}

func (x *ContainerStatisticsOneShotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerStatisticsOneShotRequest.ProtoReflect.Descriptor instead.
func (*ContainerStatisticsOneShotRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{48}
}

func (x *ContainerStatisticsOneShotRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ContainerStatisticsOneShotReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *ContainerStatisticsOneShotReply) Reset() {
	*x = ContainerStatisticsOneShotReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerStatisticsOneShotReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerStatisticsOneShotReply) ProtoMessage() {}

func (x *ContainerStatisticsOneShotReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerStatisticsOneShotReply.ProtoReflect.Descriptor instead.
func (*ContainerStatisticsOneShotReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{49}
}

func (x *ContainerStatisticsOneShotReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ContainerStatisticsOneShotByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *ContainerStatisticsOneShotByNameRequest) Reset() {
	*x = ContainerStatisticsOneShotByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerStatisticsOneShotByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerStatisticsOneShotByNameRequest) ProtoMessage() {}

func (x *ContainerStatisticsOneShotByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerStatisticsOneShotByNameRequest.ProtoReflect.Descriptor instead.
func (*ContainerStatisticsOneShotByNameRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{50}
}

func (x *ContainerStatisticsOneShotByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ContainerStatisticsOneShotByNameReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *ContainerStatisticsOneShotByNameReply) Reset() {
	*x = ContainerStatisticsOneShotByNameReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerStatisticsOneShotByNameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerStatisticsOneShotByNameReply) ProtoMessage() {}

func (x *ContainerStatisticsOneShotByNameReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerStatisticsOneShotByNameReply.ProtoReflect.Descriptor instead.
func (*ContainerStatisticsOneShotByNameReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{51}
}

func (x *ContainerStatisticsOneShotByNameReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ContainerStopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ContainerStopRequest) Reset() {
	*x = ContainerStopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerStopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerStopRequest) ProtoMessage() {}

func (x *ContainerStopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerStopRequest.ProtoReflect.Descriptor instead.
func (*ContainerStopRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{52}
}

func (x *ContainerStopRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ContainerStopAndRemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	RemoveVolumes bool   `protobuf:"varint,2,opt,name=RemoveVolumes,proto3" json:"RemoveVolumes,omitempty"`
	RemoveLinks   bool   `protobuf:"varint,3,opt,name=RemoveLinks,proto3" json:"RemoveLinks,omitempty"`
	Force         bool   `protobuf:"varint,4,opt,name=Force,proto3" json:"Force,omitempty"`
}

func (x *ContainerStopAndRemoveRequest) Reset() {
	*x = ContainerStopAndRemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerStopAndRemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerStopAndRemoveRequest) ProtoMessage() {}

func (x *ContainerStopAndRemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerStopAndRemoveRequest.ProtoReflect.Descriptor instead.
func (*ContainerStopAndRemoveRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{53}
}

func (x *ContainerStopAndRemoveRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ContainerStopAndRemoveRequest) GetRemoveVolumes() bool {
	if x != nil {
		return x.RemoveVolumes
	}
	return false
}

func (x *ContainerStopAndRemoveRequest) GetRemoveLinks() bool {
	if x != nil {
		return x.RemoveLinks
	}
	return false
}

func (x *ContainerStopAndRemoveRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type ContainerWaitStatusNotRunningRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ContainerWaitStatusNotRunningRequest) Reset() {
	*x = ContainerWaitStatusNotRunningRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerWaitStatusNotRunningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerWaitStatusNotRunningRequest) ProtoMessage() {}

func (x *ContainerWaitStatusNotRunningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerWaitStatusNotRunningRequest.ProtoReflect.Descriptor instead.
func (*ContainerWaitStatusNotRunningRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{54}
}

func (x *ContainerWaitStatusNotRunningRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type NetworkConnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkID   string            `protobuf:"bytes,1,opt,name=NetworkID,proto3" json:"NetworkID,omitempty"`
	ContainerID string            `protobuf:"bytes,2,opt,name=ContainerID,proto3" json:"ContainerID,omitempty"`
	Config      *EndpointSettings `protobuf:"bytes,3,opt,name=Config,proto3" json:"Config,omitempty"`
}

func (x *NetworkConnectRequest) Reset() {
	*x = NetworkConnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkConnectRequest) ProtoMessage() {}

func (x *NetworkConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkConnectRequest.ProtoReflect.Descriptor instead.
func (*NetworkConnectRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{55}
}

func (x *NetworkConnectRequest) GetNetworkID() string {
	if x != nil {
		return x.NetworkID
	}
	return ""
}

func (x *NetworkConnectRequest) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *NetworkConnectRequest) GetConfig() *EndpointSettings {
	if x != nil {
		return x.Config
	}
	return nil
}

type NetworkCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	NetworkDrive string `protobuf:"bytes,2,opt,name=NetworkDrive,proto3" json:"NetworkDrive,omitempty"`
	Scope        string `protobuf:"bytes,3,opt,name=Scope,proto3" json:"Scope,omitempty"`
	Subnet       string `protobuf:"bytes,4,opt,name=Subnet,proto3" json:"Subnet,omitempty"`
	Gateway      string `protobuf:"bytes,5,opt,name=Gateway,proto3" json:"Gateway,omitempty"`
}

func (x *NetworkCreateRequest) Reset() {
	*x = NetworkCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkCreateRequest) ProtoMessage() {}

func (x *NetworkCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkCreateRequest.ProtoReflect.Descriptor instead.
func (*NetworkCreateRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{56}
}

func (x *NetworkCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkCreateRequest) GetNetworkDrive() string {
	if x != nil {
		return x.NetworkDrive
	}
	return ""
}

func (x *NetworkCreateRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *NetworkCreateRequest) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *NetworkCreateRequest) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

type NetworkCreateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *NetworkCreateReply) Reset() {
	*x = NetworkCreateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkCreateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkCreateReply) ProtoMessage() {}

func (x *NetworkCreateReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkCreateReply.ProtoReflect.Descriptor instead.
func (*NetworkCreateReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{57}
}

func (x *NetworkCreateReply) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type NetworkFindIdByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *NetworkFindIdByNameRequest) Reset() {
	*x = NetworkFindIdByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkFindIdByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkFindIdByNameRequest) ProtoMessage() {}

func (x *NetworkFindIdByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkFindIdByNameRequest.ProtoReflect.Descriptor instead.
func (*NetworkFindIdByNameRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{58}
}

func (x *NetworkFindIdByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type NetworkFindIdByNameReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *NetworkFindIdByNameReply) Reset() {
	*x = NetworkFindIdByNameReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkFindIdByNameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkFindIdByNameReply) ProtoMessage() {}

func (x *NetworkFindIdByNameReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkFindIdByNameReply.ProtoReflect.Descriptor instead.
func (*NetworkFindIdByNameReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{59}
}

func (x *NetworkFindIdByNameReply) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type NetworkListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *NetworkListReply) Reset() {
	*x = NetworkListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkListReply) ProtoMessage() {}

func (x *NetworkListReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkListReply.ProtoReflect.Descriptor instead.
func (*NetworkListReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{60}
}

func (x *NetworkListReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type NetworkRemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *NetworkRemoveRequest) Reset() {
	*x = NetworkRemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkRemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkRemoveRequest) ProtoMessage() {}

func (x *NetworkRemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkRemoveRequest.ProtoReflect.Descriptor instead.
func (*NetworkRemoveRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{61}
}

func (x *NetworkRemoveRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type NetworkRemoveByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *NetworkRemoveByNameRequest) Reset() {
	*x = NetworkRemoveByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkRemoveByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkRemoveByNameRequest) ProtoMessage() {}

func (x *NetworkRemoveByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkRemoveByNameRequest.ProtoReflect.Descriptor instead.
func (*NetworkRemoveByNameRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{62}
}

func (x *NetworkRemoveByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ImageBuildFromRemoteServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerPath   string   `protobuf:"bytes,1,opt,name=ServerPath,proto3" json:"ServerPath,omitempty"`
	ImageNewName string   `protobuf:"bytes,2,opt,name=ImageNewName,proto3" json:"ImageNewName,omitempty"`
	ImageTags    []string `protobuf:"bytes,3,rep,name=ImageTags,proto3" json:"ImageTags,omitempty"`
}

func (x *ImageBuildFromRemoteServerRequest) Reset() {
	*x = ImageBuildFromRemoteServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageBuildFromRemoteServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageBuildFromRemoteServerRequest) ProtoMessage() {}

func (x *ImageBuildFromRemoteServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageBuildFromRemoteServerRequest.ProtoReflect.Descriptor instead.
func (*ImageBuildFromRemoteServerRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{63}
}

func (x *ImageBuildFromRemoteServerRequest) GetServerPath() string {
	if x != nil {
		return x.ServerPath
	}
	return ""
}

func (x *ImageBuildFromRemoteServerRequest) GetImageNewName() string {
	if x != nil {
		return x.ImageNewName
	}
	return ""
}

func (x *ImageBuildFromRemoteServerRequest) GetImageTags() []string {
	if x != nil {
		return x.ImageTags
	}
	return nil
}

type ImageBuildFromRemoteServerReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ImageBuildFromRemoteServerReply) Reset() {
	*x = ImageBuildFromRemoteServerReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageBuildFromRemoteServerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageBuildFromRemoteServerReply) ProtoMessage() {}

func (x *ImageBuildFromRemoteServerReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageBuildFromRemoteServerReply.ProtoReflect.Descriptor instead.
func (*ImageBuildFromRemoteServerReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{64}
}

func (x *ImageBuildFromRemoteServerReply) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ImageOrContainerBuildPullSubStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count   int64   `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
	Current int64   `protobuf:"varint,2,opt,name=Current,proto3" json:"Current,omitempty"`
	Total   int64   `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	Percent float64 `protobuf:"fixed64,4,opt,name=Percent,proto3" json:"Percent,omitempty"`
}

func (x *ImageOrContainerBuildPullSubStatus) Reset() {
	*x = ImageOrContainerBuildPullSubStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageOrContainerBuildPullSubStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageOrContainerBuildPullSubStatus) ProtoMessage() {}

func (x *ImageOrContainerBuildPullSubStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageOrContainerBuildPullSubStatus.ProtoReflect.Descriptor instead.
func (*ImageOrContainerBuildPullSubStatus) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{65}
}

func (x *ImageOrContainerBuildPullSubStatus) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ImageOrContainerBuildPullSubStatus) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *ImageOrContainerBuildPullSubStatus) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ImageOrContainerBuildPullSubStatus) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

type ImageOrContainerBuildPullStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ImageOrContainerBuildPullStatusRequest) Reset() {
	*x = ImageOrContainerBuildPullStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageOrContainerBuildPullStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageOrContainerBuildPullStatusRequest) ProtoMessage() {}

func (x *ImageOrContainerBuildPullStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageOrContainerBuildPullStatusRequest.ProtoReflect.Descriptor instead.
func (*ImageOrContainerBuildPullStatusRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{66}
}

func (x *ImageOrContainerBuildPullStatusRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ImageOrContainerBuildPullStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *ImageOrContainerBuildPullStatusReply) Reset() {
	*x = ImageOrContainerBuildPullStatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageOrContainerBuildPullStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageOrContainerBuildPullStatusReply) ProtoMessage() {}

func (x *ImageOrContainerBuildPullStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageOrContainerBuildPullStatusReply.ProtoReflect.Descriptor instead.
func (*ImageOrContainerBuildPullStatusReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{67}
}

func (x *ImageOrContainerBuildPullStatusReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ImageFindIdByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *ImageFindIdByNameRequest) Reset() {
	*x = ImageFindIdByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageFindIdByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageFindIdByNameRequest) ProtoMessage() {}

func (x *ImageFindIdByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageFindIdByNameRequest.ProtoReflect.Descriptor instead.
func (*ImageFindIdByNameRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{68}
}

func (x *ImageFindIdByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ImageFindIdByNameReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ImageFindIdByNameReply) Reset() {
	*x = ImageFindIdByNameReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageFindIdByNameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageFindIdByNameReply) ProtoMessage() {}

func (x *ImageFindIdByNameReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageFindIdByNameReply.ProtoReflect.Descriptor instead.
func (*ImageFindIdByNameReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{69}
}

func (x *ImageFindIdByNameReply) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ImageListExposedPortsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ImageListExposedPortsRequest) Reset() {
	*x = ImageListExposedPortsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageListExposedPortsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageListExposedPortsRequest) ProtoMessage() {}

func (x *ImageListExposedPortsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageListExposedPortsRequest.ProtoReflect.Descriptor instead.
func (*ImageListExposedPortsRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{70}
}

func (x *ImageListExposedPortsRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ImageListExposedPortsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *ImageListExposedPortsReply) Reset() {
	*x = ImageListExposedPortsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageListExposedPortsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageListExposedPortsReply) ProtoMessage() {}

func (x *ImageListExposedPortsReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageListExposedPortsReply.ProtoReflect.Descriptor instead.
func (*ImageListExposedPortsReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{71}
}

func (x *ImageListExposedPortsReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ImageListExposedPortsByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *ImageListExposedPortsByNameRequest) Reset() {
	*x = ImageListExposedPortsByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageListExposedPortsByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageListExposedPortsByNameRequest) ProtoMessage() {}

func (x *ImageListExposedPortsByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageListExposedPortsByNameRequest.ProtoReflect.Descriptor instead.
func (*ImageListExposedPortsByNameRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{72}
}

func (x *ImageListExposedPortsByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ImageListExposedPortsByNameReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *ImageListExposedPortsByNameReply) Reset() {
	*x = ImageListExposedPortsByNameReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageListExposedPortsByNameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageListExposedPortsByNameReply) ProtoMessage() {}

func (x *ImageListExposedPortsByNameReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageListExposedPortsByNameReply.ProtoReflect.Descriptor instead.
func (*ImageListExposedPortsByNameReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{73}
}

func (x *ImageListExposedPortsByNameReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ImageListExposedVolumesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ImageListExposedVolumesRequest) Reset() {
	*x = ImageListExposedVolumesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageListExposedVolumesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageListExposedVolumesRequest) ProtoMessage() {}

func (x *ImageListExposedVolumesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageListExposedVolumesRequest.ProtoReflect.Descriptor instead.
func (*ImageListExposedVolumesRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{74}
}

func (x *ImageListExposedVolumesRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ImageListExposedVolumesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *ImageListExposedVolumesReply) Reset() {
	*x = ImageListExposedVolumesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageListExposedVolumesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageListExposedVolumesReply) ProtoMessage() {}

func (x *ImageListExposedVolumesReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageListExposedVolumesReply.ProtoReflect.Descriptor instead.
func (*ImageListExposedVolumesReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{75}
}

func (x *ImageListExposedVolumesReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ImageListExposedVolumesByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *ImageListExposedVolumesByNameRequest) Reset() {
	*x = ImageListExposedVolumesByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageListExposedVolumesByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageListExposedVolumesByNameRequest) ProtoMessage() {}

func (x *ImageListExposedVolumesByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageListExposedVolumesByNameRequest.ProtoReflect.Descriptor instead.
func (*ImageListExposedVolumesByNameRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{76}
}

func (x *ImageListExposedVolumesByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ImageListExposedVolumesByNameReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []string `protobuf:"bytes,1,rep,name=List,proto3" json:"List,omitempty"`
}

func (x *ImageListExposedVolumesByNameReply) Reset() {
	*x = ImageListExposedVolumesByNameReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageListExposedVolumesByNameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageListExposedVolumesByNameReply) ProtoMessage() {}

func (x *ImageListExposedVolumesByNameReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageListExposedVolumesByNameReply.ProtoReflect.Descriptor instead.
func (*ImageListExposedVolumesByNameReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{77}
}

func (x *ImageListExposedVolumesByNameReply) GetList() []string {
	if x != nil {
		return x.List
	}
	return nil
}

type ImageMountNatPortListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ImageMountNatPortListRequest) Reset() {
	*x = ImageMountNatPortListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageMountNatPortListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageMountNatPortListRequest) ProtoMessage() {}

func (x *ImageMountNatPortListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageMountNatPortListRequest.ProtoReflect.Descriptor instead.
func (*ImageMountNatPortListRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{78}
}

func (x *ImageMountNatPortListRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ImageMountNatPortListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *ImageMountNatPortListReply) Reset() {
	*x = ImageMountNatPortListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageMountNatPortListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageMountNatPortListReply) ProtoMessage() {}

func (x *ImageMountNatPortListReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageMountNatPortListReply.ProtoReflect.Descriptor instead.
func (*ImageMountNatPortListReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{79}
}

func (x *ImageMountNatPortListReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ImageMountNatPortListChangeExposedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               string  `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	CurrentPortList  []*Port `protobuf:"bytes,2,rep,name=CurrentPortList,proto3" json:"CurrentPortList,omitempty"`
	ChangeToPortList []*Port `protobuf:"bytes,3,rep,name=ChangeToPortList,proto3" json:"ChangeToPortList,omitempty"`
}

func (x *ImageMountNatPortListChangeExposedRequest) Reset() {
	*x = ImageMountNatPortListChangeExposedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageMountNatPortListChangeExposedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageMountNatPortListChangeExposedRequest) ProtoMessage() {}

func (x *ImageMountNatPortListChangeExposedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageMountNatPortListChangeExposedRequest.ProtoReflect.Descriptor instead.
func (*ImageMountNatPortListChangeExposedRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{80}
}

func (x *ImageMountNatPortListChangeExposedRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ImageMountNatPortListChangeExposedRequest) GetCurrentPortList() []*Port {
	if x != nil {
		return x.CurrentPortList
	}
	return nil
}

func (x *ImageMountNatPortListChangeExposedRequest) GetChangeToPortList() []*Port {
	if x != nil {
		return x.ChangeToPortList
	}
	return nil
}

type ImageMountNatPortListChangeExposedReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *ImageMountNatPortListChangeExposedReply) Reset() {
	*x = ImageMountNatPortListChangeExposedReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageMountNatPortListChangeExposedReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageMountNatPortListChangeExposedReply) ProtoMessage() {}

func (x *ImageMountNatPortListChangeExposedReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageMountNatPortListChangeExposedReply.ProtoReflect.Descriptor instead.
func (*ImageMountNatPortListChangeExposedReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{81}
}

func (x *ImageMountNatPortListChangeExposedReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ImageMountNatPortListChangeExposedWithIpAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               string  `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Ip               string  `protobuf:"bytes,2,opt,name=Ip,proto3" json:"Ip,omitempty"`
	CurrentPortList  []*Port `protobuf:"bytes,3,rep,name=CurrentPortList,proto3" json:"CurrentPortList,omitempty"`
	ChangeToPortList []*Port `protobuf:"bytes,4,rep,name=ChangeToPortList,proto3" json:"ChangeToPortList,omitempty"`
}

func (x *ImageMountNatPortListChangeExposedWithIpAddressRequest) Reset() {
	*x = ImageMountNatPortListChangeExposedWithIpAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageMountNatPortListChangeExposedWithIpAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageMountNatPortListChangeExposedWithIpAddressRequest) ProtoMessage() {}

func (x *ImageMountNatPortListChangeExposedWithIpAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageMountNatPortListChangeExposedWithIpAddressRequest.ProtoReflect.Descriptor instead.
func (*ImageMountNatPortListChangeExposedWithIpAddressRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{82}
}

func (x *ImageMountNatPortListChangeExposedWithIpAddressRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ImageMountNatPortListChangeExposedWithIpAddressRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *ImageMountNatPortListChangeExposedWithIpAddressRequest) GetCurrentPortList() []*Port {
	if x != nil {
		return x.CurrentPortList
	}
	return nil
}

func (x *ImageMountNatPortListChangeExposedWithIpAddressRequest) GetChangeToPortList() []*Port {
	if x != nil {
		return x.ChangeToPortList
	}
	return nil
}

type ImageMountNatPortListChangeExposedWithIpAddressReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *ImageMountNatPortListChangeExposedWithIpAddressReply) Reset() {
	*x = ImageMountNatPortListChangeExposedWithIpAddressReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageMountNatPortListChangeExposedWithIpAddressReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageMountNatPortListChangeExposedWithIpAddressReply) ProtoMessage() {}

func (x *ImageMountNatPortListChangeExposedWithIpAddressReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageMountNatPortListChangeExposedWithIpAddressReply.ProtoReflect.Descriptor instead.
func (*ImageMountNatPortListChangeExposedWithIpAddressReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{83}
}

func (x *ImageMountNatPortListChangeExposedWithIpAddressReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ImagePullRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *ImagePullRequest) Reset() {
	*x = ImagePullRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImagePullRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagePullRequest) ProtoMessage() {}

func (x *ImagePullRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagePullRequest.ProtoReflect.Descriptor instead.
func (*ImagePullRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{84}
}

func (x *ImagePullRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ImagePullReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	ID   string `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ImagePullReply) Reset() {
	*x = ImagePullReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImagePullReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagePullReply) ProtoMessage() {}

func (x *ImagePullReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagePullReply.ProtoReflect.Descriptor instead.
func (*ImagePullReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{85}
}

func (x *ImagePullReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImagePullReply) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ImageRemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Force         bool   `protobuf:"varint,2,opt,name=Force,proto3" json:"Force,omitempty"`
	PruneChildren bool   `protobuf:"varint,3,opt,name=PruneChildren,proto3" json:"PruneChildren,omitempty"`
}

func (x *ImageRemoveRequest) Reset() {
	*x = ImageRemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageRemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageRemoveRequest) ProtoMessage() {}

func (x *ImageRemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageRemoveRequest.ProtoReflect.Descriptor instead.
func (*ImageRemoveRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{86}
}

func (x *ImageRemoveRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ImageRemoveRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *ImageRemoveRequest) GetPruneChildren() bool {
	if x != nil {
		return x.PruneChildren
	}
	return false
}

type ImageRemoveByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Force         bool   `protobuf:"varint,2,opt,name=Force,proto3" json:"Force,omitempty"`
	PruneChildren bool   `protobuf:"varint,3,opt,name=PruneChildren,proto3" json:"PruneChildren,omitempty"`
}

func (x *ImageRemoveByNameRequest) Reset() {
	*x = ImageRemoveByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageRemoveByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageRemoveByNameRequest) ProtoMessage() {}

func (x *ImageRemoveByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageRemoveByNameRequest.ProtoReflect.Descriptor instead.
func (*ImageRemoveByNameRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{87}
}

func (x *ImageRemoveByNameRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ImageRemoveByNameRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *ImageRemoveByNameRequest) GetPruneChildren() bool {
	if x != nil {
		return x.PruneChildren
	}
	return false
}

type ImageListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *ImageListReply) Reset() {
	*x = ImageListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageListReply) ProtoMessage() {}

func (x *ImageListReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageListReply.ProtoReflect.Descriptor instead.
func (*ImageListReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{88}
}

func (x *ImageListReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ContainerInspectByNameContainsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *ContainerInspectByNameContainsRequest) Reset() {
	*x = ContainerInspectByNameContainsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerInspectByNameContainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInspectByNameContainsRequest) ProtoMessage() {}

func (x *ContainerInspectByNameContainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInspectByNameContainsRequest.ProtoReflect.Descriptor instead.
func (*ContainerInspectByNameContainsRequest) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{89}
}

func (x *ContainerInspectByNameContainsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ContainerInspectByNameContainsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *ContainerInspectByNameContainsReply) Reset() {
	*x = ContainerInspectByNameContainsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gRpcServer_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerInspectByNameContainsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInspectByNameContainsReply) ProtoMessage() {}

func (x *ContainerInspectByNameContainsReply) ProtoReflect() protoreflect.Message {
	mi := &file_gRpcServer_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInspectByNameContainsReply.ProtoReflect.Descriptor instead.
func (*ContainerInspectByNameContainsReply) Descriptor() ([]byte, []int) {
	return file_gRpcServer_proto_rawDescGZIP(), []int{90}
}

func (x *ContainerInspectByNameContainsReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_gRpcServer_proto protoreflect.FileDescriptor

var file_gRpcServer_proto_rawDesc = []byte{
	0x0a, 0x10, 0x67, 0x52, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1f, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x70, 0x63, 0x22, 0x36, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50,
	0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0xbc, 0x01, 0x0a, 0x07,
	0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x46, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x1a,
	0x69, 0x0a, 0x09, 0x50, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x46,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x41, 0x0a, 0x0b, 0x50, 0x6f,
	0x72, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x6f, 0x73,
	0x74, 0x49, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49,
	0x50, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x61, 0x0a,
	0x0f, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x4e, 0x0a, 0x0b, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x0b, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x22, 0xf3, 0x04, 0x0a, 0x10, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x53, 0x0a, 0x0a, 0x49, 0x50, 0x41, 0x4d, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6f, 0x74, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x49, 0x50, 0x41, 0x4d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a,
	0x49, 0x50, 0x41, 0x4d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x49, 0x50, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x49, 0x50, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x50, 0x76, 0x36, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x50, 0x76, 0x36, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x50,
	0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x50, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x50, 0x76, 0x36,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x50, 0x76, 0x36, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x4c, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x61, 0x0a, 0x0a, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4f, 0x70,
	0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x4f, 0x70, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x44, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x4f, 0x70, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x03, 0x0a, 0x05, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x4e, 0x0a, 0x0b, 0x42, 0x69, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x42, 0x69, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x54, 0x0a, 0x0d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6f, 0x74, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x51, 0x0a, 0x0c, 0x54, 0x6d, 0x70, 0x66,
	0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x54, 0x6d, 0x70, 0x66, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x54,
	0x6d, 0x70, 0x66, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x7c, 0x0a, 0x12, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x50, 0x41, 0x4d, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x50, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x50, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x50, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x50, 0x76, 0x36, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x49, 0x50, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x4c, 0x69, 0x6e,
	0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x50, 0x73, 0x22, 0x53, 0x0a, 0x0b, 0x42, 0x69, 0x6e,
	0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x70,
	0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50,
	0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x22, 0xa8,
	0x01, 0x0a, 0x06, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a,
	0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3a, 0x0a,
	0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x83, 0x02, 0x0a, 0x0d, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4e,
	0x6f, 0x43, 0x6f, 0x70, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x4e, 0x6f, 0x43,
	0x6f, 0x70, 0x79, 0x12, 0x52, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x44, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x0c, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x40, 0x0a, 0x0c, 0x54, 0x6d, 0x70, 0x66, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x4d, 0x6f, 0x64,
	0x65, 0x22, 0xf4, 0x01, 0x0a, 0x0a, 0x49, 0x50, 0x41, 0x4d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x50, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x50, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x5b, 0x0a, 0x0a,
	0x41, 0x75, 0x78, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x70, 0x63, 0x2e, 0x49, 0x50, 0x41, 0x4d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x75,
	0x78, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x41,
	0x75, 0x78, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x75, 0x78,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x29, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x22, 0x2b, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x27, 0x0a, 0x15, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x29, 0x0a, 0x13, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x22, 0xc4, 0x02, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x52, 0x0a, 0x0f, 0x50, 0x6f, 0x72,
	0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x0f, 0x50, 0x6f,
	0x72, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a, 0x0a,
	0x0c, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x26, 0x0a, 0x14, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x22, 0x98, 0x03, 0x0a, 0x2a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4a, 0x0a, 0x0c,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x49, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x50,
	0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x74, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x52, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x3a,
	0x0a, 0x28, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65,
	0x64, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x8b, 0x02, 0x0a, 0x31, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e,
	0x64, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x41, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4a, 0x0a, 0x0c, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x41, 0x0a, 0x2f, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x45, 0x78,
	0x70, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0xcc, 0x02, 0x0a, 0x1e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x52, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74,
	0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x0f, 0x50, 0x6f, 0x72,
	0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0c,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2e, 0x0a, 0x1c, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x9d, 0x03, 0x0a, 0x2f, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x41,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4a, 0x0a, 0x0c, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f,
	0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x49, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x0c, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x3f, 0x0a, 0x2d, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x90, 0x02, 0x0a, 0x36,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x78, 0x70, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x4a, 0x0a, 0x0c, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65,
	0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x46,
	0x0a, 0x34, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x41, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x82, 0x02, 0x0a, 0x28, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75,
	0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4a, 0x0a,
	0x0c, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x38, 0x0a, 0x26, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x6f, 0x75, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x8a, 0x02, 0x0a, 0x30, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74,
	0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x4a, 0x0a, 0x0c, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x74,
	0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x0c, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x40, 0x0a, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x45, 0x78, 0x70, 0x6f,
	0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x22, 0x32, 0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2c, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x3a, 0x0a, 0x24, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x38, 0x0a, 0x22, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x46,
	0x69, 0x6e, 0x64, 0x49, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x33, 0x0a, 0x1d,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x31, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x2d, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x4a, 0x53, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x22, 0x35, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x4a, 0x53, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x22, 0x37, 0x0a, 0x21, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x4a, 0x53,
	0x6f, 0x6e, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x1f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x4a, 0x53, 0x6f, 0x6e, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2b, 0x0a, 0x15, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x30, 0x0a, 0x1e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x32, 0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x86, 0x01, 0x0a,
	0x16, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x27, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x33,
	0x0a, 0x21, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x4f, 0x6e, 0x65, 0x53, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x22, 0x35, 0x0a, 0x1f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4f, 0x6e, 0x65, 0x53, 0x68, 0x6f,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x3d, 0x0a, 0x27, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x4f, 0x6e, 0x65, 0x53, 0x68, 0x6f, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x25, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x4f, 0x6e, 0x65, 0x53, 0x68, 0x6f, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x26, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x8d,
	0x01, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x70,
	0x41, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x36,
	0x0a, 0x24, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x57, 0x61, 0x69, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0xa2, 0x01, 0x0a, 0x15, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x49, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x70, 0x63, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x96, 0x01, 0x0a, 0x14,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x44, 0x72, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x72, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x22, 0x24, 0x0a, 0x12, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x30, 0x0a, 0x1a, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2a, 0x0a, 0x18,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x26, 0x0a, 0x10, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x26, 0x0a, 0x14, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x30, 0x0a, 0x1a, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x21, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x77,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61,
	0x67, 0x73, 0x22, 0x31, 0x0a, 0x1f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x84, 0x01, 0x0a, 0x22, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50,
	0x75, 0x6c, 0x6c, 0x53, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x38, 0x0a, 0x26,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x3a, 0x0a, 0x24, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50,
	0x75, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x2e, 0x0a, 0x18, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x49,
	0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x28, 0x0a, 0x16, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x49,
	0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x2e, 0x0a, 0x1c,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x30, 0x0a, 0x1a,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x38,
	0x0a, 0x22, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x73,
	0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x36, 0x0a, 0x20, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x30, 0x0a, 0x1e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70,
	0x6f, 0x73, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x22, 0x32, 0x0a, 0x1c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x0a, 0x24, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x38, 0x0a, 0x22, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x2e, 0x0a, 0x1c,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x30, 0x0a, 0x1a,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xdf,
	0x01, 0x0a, 0x29, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x78,
	0x70, 0x6f, 0x73, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x4f, 0x0a, 0x0f,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x0f, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x51, 0x0a,
	0x10, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x10,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x3d, 0x0a, 0x27, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45,
	0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22,
	0xfc, 0x01, 0x0a, 0x36, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45,
	0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x70, 0x12, 0x4f, 0x0a, 0x0f, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x0f, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x10, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x10, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4a,
	0x0a, 0x34, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x70,
	0x6f, 0x73, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x26, 0x0a, 0x10, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x34, 0x0a, 0x0e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x60, 0x0a, 0x12, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x50, 0x72, 0x75,
	0x6e, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x66, 0x0a, 0x18, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x50, 0x72, 0x75, 0x6e, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x22, 0x24, 0x0a, 0x0e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x3b, 0x0a, 0x25, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x39, 0x0a, 0x23, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x32, 0x84, 0x36, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x83, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x37, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35,
	0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0xbf, 0x01, 0x0a, 0x23, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x4b, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65,
	0x64, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x69,
	0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x10, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x12, 0x38,
	0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0xd4, 0x01, 0x0a, 0x2a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c,
	0x79, 0x12, 0x52, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x50, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x6c, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x9b, 0x01, 0x0a, 0x17, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3f, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65,
	0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0xce, 0x01, 0x0a, 0x28, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x50, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x70, 0x6f,
	0x73, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4e, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65,
	0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x78,
	0x70, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0xe3, 0x01, 0x0a, 0x2f, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x6f,
	0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x6c, 0x79, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x57, 0x2e, 0x69,
	0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78,
	0x70, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x55, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x41,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0xb9,
	0x01, 0x0a, 0x21, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x12, 0x49, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x45, 0x78, 0x70,
	0x6f, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x47, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0xd1, 0x01, 0x0a, 0x29, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x6f, 0x75, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x51, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75,
	0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4f, 0x2e, 0x69, 0x6f,
	0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x6f, 0x75, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x41,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x95,
	0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x64,
	0x49, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0xad, 0x01, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x45, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x43, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x64, 0x49,
	0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x98, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3e, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3c, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0xb0, 0x01, 0x0a, 0x1e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x12, 0x46, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x69,
	0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x92, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x4a, 0x53, 0x6f, 0x6e, 0x12, 0x3c, 0x2e,
	0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x4a, 0x53, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x69, 0x6f,
	0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x4a, 0x53,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0xa4, 0x01, 0x0a, 0x1a, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x4a, 0x53,
	0x6f, 0x6e, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x4a, 0x53, 0x6f, 0x6e, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x69,
	0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x4a,
	0x53, 0x6f, 0x6e, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x74, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x6c, 0x6c, 0x12, 0x26, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x36, 0x2e, 0x69,
	0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x69, 0x65, 0x74, 0x12, 0x26, 0x2e, 0x69,
	0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x36, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x74,
	0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x12, 0x37, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x69, 0x6f, 0x74,
	0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x36, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65,
	0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0xa4, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x4f, 0x6e, 0x65, 0x53, 0x68, 0x6f, 0x74, 0x12, 0x42, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4f, 0x6e, 0x65,
	0x53, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x69, 0x6f,
	0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x4f, 0x6e, 0x65, 0x53, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0xb6, 0x01, 0x0a, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4f, 0x6e, 0x65, 0x53, 0x68, 0x6f, 0x74, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4f, 0x6e, 0x65, 0x53, 0x68, 0x6f,
	0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46,
	0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x4f, 0x6e, 0x65, 0x53, 0x68, 0x6f, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x35, 0x2e, 0x69, 0x6f, 0x74, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x16, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x6e, 0x64, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x3e, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x90, 0x01, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x57, 0x61, 0x69,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x45, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x57, 0x61, 0x69,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x7d, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x35, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x69, 0x6f, 0x74,
	0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x8f, 0x01, 0x0a, 0x13, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x69, 0x6e,
	0x64, 0x49, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x2e, 0x69, 0x6f, 0x74, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65,
	0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x46, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x26, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x31, 0x2e, 0x69, 0x6f, 0x74,
	0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x70, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x12, 0x35, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x70, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x7c, 0x0a, 0x13, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x80, 0x01, 0x0a, 0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x12, 0x36, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x69, 0x6f, 0x74,
	0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x69, 0x0a, 0x15, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x47, 0x61, 0x72, 0x62, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x2e, 0x69, 0x6f,
	0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0xa4, 0x01,
	0x0a, 0x1a, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x72, 0x6f, 0x6d,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x42, 0x2e, 0x69,
	0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x40, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x70, 0x63, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x72, 0x6f,
	0x6d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0xb4, 0x01, 0x0a, 0x20, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x47, 0x2e, 0x69, 0x6f, 0x74, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x4f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x50, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x45, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x75, 0x6c, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x89, 0x01, 0x0a, 0x11,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x39, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x69,
	0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2f, 0x2e, 0x69,
	0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x95, 0x01, 0x0a, 0x15, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70,
	0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x3d, 0x2e, 0x69, 0x6f, 0x74, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0xa7, 0x01, 0x0a, 0x1b, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x69,
	0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x9b, 0x01, 0x0a, 0x17, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x3f, 0x2e,
	0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d,
	0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65,
	0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0xad, 0x01, 0x0a, 0x1d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70,
	0x6f, 0x73, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x45, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70,
	0x6f, 0x73, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x95, 0x01, 0x0a, 0x15, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x2e, 0x69, 0x6f, 0x74, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0xbc, 0x01, 0x0a, 0x22, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x4a,
	0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x70, 0x6f,
	0x73, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x48, 0x2e, 0x69, 0x6f, 0x74,
	0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0xe3, 0x01, 0x0a, 0x2f, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x57, 0x2e, 0x69, 0x6f, 0x74,
	0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x57,
	0x69, 0x74, 0x68, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x55, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x61, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x09,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x12, 0x31, 0x2e, 0x69, 0x6f, 0x74, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x69,
	0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x6c, 0x0a, 0x0b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x33,
	0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x78, 0x0a,
	0x11, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x39, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x65, 0x6c, 0x6d, 0x75, 0x74, 0x6b, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x2f, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x67, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gRpcServer_proto_rawDescOnce sync.Once
	file_gRpcServer_proto_rawDescData = file_gRpcServer_proto_rawDesc
)

func file_gRpcServer_proto_rawDescGZIP() []byte {
	file_gRpcServer_proto_rawDescOnce.Do(func() {
		file_gRpcServer_proto_rawDescData = protoimpl.X.CompressGZIP(file_gRpcServer_proto_rawDescData)
	})
	return file_gRpcServer_proto_rawDescData
}

var file_gRpcServer_proto_msgTypes = make([]protoimpl.MessageInfo, 96)
var file_gRpcServer_proto_goTypes = []interface{}{
	(*Port)(nil),                                                   // 0: iotmakerDockerCommunicationGrpc.Port
	(*PortMap)(nil),                                                // 1: iotmakerDockerCommunicationGrpc.PortMap
	(*PortBinding)(nil),                                            // 2: iotmakerDockerCommunicationGrpc.PortBinding
	(*PortBindingList)(nil),                                        // 3: iotmakerDockerCommunicationGrpc.PortBindingList
	(*EndpointSettings)(nil),                                       // 4: iotmakerDockerCommunicationGrpc.EndpointSettings
	(*Mount)(nil),                                                  // 5: iotmakerDockerCommunicationGrpc.Mount
	(*EndpointIPAMConfig)(nil),                                     // 6: iotmakerDockerCommunicationGrpc.EndpointIPAMConfig
	(*BindOptions)(nil),                                            // 7: iotmakerDockerCommunicationGrpc.BindOptions
	(*Driver)(nil),                                                 // 8: iotmakerDockerCommunicationGrpc.Driver
	(*VolumeOptions)(nil),                                          // 9: iotmakerDockerCommunicationGrpc.VolumeOptions
	(*TmpfsOptions)(nil),                                           // 10: iotmakerDockerCommunicationGrpc.TmpfsOptions
	(*IPAMConfig)(nil),                                             // 11: iotmakerDockerCommunicationGrpc.IPAMConfig
	(*ContainerInspectRequest)(nil),                                // 12: iotmakerDockerCommunicationGrpc.ContainerInspectRequest
	(*ContainerInspectReply)(nil),                                  // 13: iotmakerDockerCommunicationGrpc.ContainerInspectReply
	(*NetworkInspectRequest)(nil),                                  // 14: iotmakerDockerCommunicationGrpc.NetworkInspectRequest
	(*NetworkInspectReply)(nil),                                    // 15: iotmakerDockerCommunicationGrpc.NetworkInspectReply
	(*ContainerCreateRequest)(nil),                                 // 16: iotmakerDockerCommunicationGrpc.ContainerCreateRequest
	(*ContainerCreateReply)(nil),                                   // 17: iotmakerDockerCommunicationGrpc.ContainerCreateReply
	(*ContainerCreateAndChangeExposedPortRequest)(nil),             // 18: iotmakerDockerCommunicationGrpc.ContainerCreateAndChangeExposedPortRequest
	(*ContainerCreateAndChangeExposedPortReply)(nil),               // 19: iotmakerDockerCommunicationGrpc.ContainerCreateAndChangeExposedPortReply
	(*ContainerCreateAndExposePortsAutomaticallyRequest)(nil),      // 20: iotmakerDockerCommunicationGrpc.ContainerCreateAndExposePortsAutomaticallyRequest
	(*ContainerCreateAndExposePortsAutomaticallyReply)(nil),        // 21: iotmakerDockerCommunicationGrpc.ContainerCreateAndExposePortsAutomaticallyReply
	(*ContainerCreateAndStartRequest)(nil),                         // 22: iotmakerDockerCommunicationGrpc.ContainerCreateAndStartRequest
	(*ContainerCreateAndStartReply)(nil),                           // 23: iotmakerDockerCommunicationGrpc.ContainerCreateAndStartReply
	(*ContainerCreateChangeExposedPortAndStartRequest)(nil),        // 24: iotmakerDockerCommunicationGrpc.ContainerCreateChangeExposedPortAndStartRequest
	(*ContainerCreateChangeExposedPortAndStartReply)(nil),          // 25: iotmakerDockerCommunicationGrpc.ContainerCreateChangeExposedPortAndStartReply
	(*ContainerCreateExposePortsAutomaticallyAndStartRequest)(nil), // 26: iotmakerDockerCommunicationGrpc.ContainerCreateExposePortsAutomaticallyAndStartRequest
	(*ContainerCreateExposePortsAutomaticallyAndStartReply)(nil),   // 27: iotmakerDockerCommunicationGrpc.ContainerCreateExposePortsAutomaticallyAndStartReply
	(*ContainerCreateWithoutExposePortsRequest)(nil),               // 28: iotmakerDockerCommunicationGrpc.ContainerCreateWithoutExposePortsRequest
	(*ContainerCreateWithoutExposePortsReply)(nil),                 // 29: iotmakerDockerCommunicationGrpc.ContainerCreateWithoutExposePortsReply
	(*ContainerCreateWithoutExposePortsAndStartRequest)(nil),       // 30: iotmakerDockerCommunicationGrpc.ContainerCreateWithoutExposePortsAndStartRequest
	(*ContainerCreateWithoutExposePortsAndStartReply)(nil),         // 31: iotmakerDockerCommunicationGrpc.ContainerCreateWithoutExposePortsAndStartReply
	(*ContainerFindIdByNameRequest)(nil),                           // 32: iotmakerDockerCommunicationGrpc.ContainerFindIdByNameRequest
	(*ContainerFindIdByNameReply)(nil),                             // 33: iotmakerDockerCommunicationGrpc.ContainerFindIdByNameReply
	(*ContainerFindIdByNameContainsRequest)(nil),                   // 34: iotmakerDockerCommunicationGrpc.ContainerFindIdByNameContainsRequest
	(*ContainerFindIdByNameContainsReply)(nil),                     // 35: iotmakerDockerCommunicationGrpc.ContainerFindIdByNameContainsReply
	(*ContainerInspectByNameRequest)(nil),                          // 36: iotmakerDockerCommunicationGrpc.ContainerInspectByNameRequest
	(*ContainerInspectByNameReply)(nil),                            // 37: iotmakerDockerCommunicationGrpc.ContainerInspectByNameReply
	(*ContainerInspectJSonRequest)(nil),                            // 38: iotmakerDockerCommunicationGrpc.ContainerInspectJSonRequest
	(*ContainerInspectJSonReply)(nil),                              // 39: iotmakerDockerCommunicationGrpc.ContainerInspectJSonReply
	(*ContainerInspectJSonByNameRequest)(nil),                      // 40: iotmakerDockerCommunicationGrpc.ContainerInspectJSonByNameRequest
	(*ContainerInspectJSonByNameReply)(nil),                        // 41: iotmakerDockerCommunicationGrpc.ContainerInspectJSonByNameReply
	(*Empty)(nil),                                                  // 42: iotmakerDockerCommunicationGrpc.Empty
	(*ContainerListAllReply)(nil),                                  // 43: iotmakerDockerCommunicationGrpc.ContainerListAllReply
	(*ContainerNetworkInspectRequest)(nil),                         // 44: iotmakerDockerCommunicationGrpc.ContainerNetworkInspectRequest
	(*ContainerNetworkInspectReply)(nil),                           // 45: iotmakerDockerCommunicationGrpc.ContainerNetworkInspectReply
	(*ContainerRemoveRequest)(nil),                                 // 46: iotmakerDockerCommunicationGrpc.ContainerRemoveRequest
	(*ContainerStartRequest)(nil),                                  // 47: iotmakerDockerCommunicationGrpc.ContainerStartRequest
	(*ContainerStatisticsOneShotRequest)(nil),                      // 48: iotmakerDockerCommunicationGrpc.ContainerStatisticsOneShotRequest
	(*ContainerStatisticsOneShotReply)(nil),                        // 49: iotmakerDockerCommunicationGrpc.ContainerStatisticsOneShotReply
	(*ContainerStatisticsOneShotByNameRequest)(nil),                // 50: iotmakerDockerCommunicationGrpc.ContainerStatisticsOneShotByNameRequest
	(*ContainerStatisticsOneShotByNameReply)(nil),                  // 51: iotmakerDockerCommunicationGrpc.ContainerStatisticsOneShotByNameReply
	(*ContainerStopRequest)(nil),                                   // 52: iotmakerDockerCommunicationGrpc.ContainerStopRequest
	(*ContainerStopAndRemoveRequest)(nil),                          // 53: iotmakerDockerCommunicationGrpc.ContainerStopAndRemoveRequest
	(*ContainerWaitStatusNotRunningRequest)(nil),                   // 54: iotmakerDockerCommunicationGrpc.ContainerWaitStatusNotRunningRequest
	(*NetworkConnectRequest)(nil),                                  // 55: iotmakerDockerCommunicationGrpc.NetworkConnectRequest
	(*NetworkCreateRequest)(nil),                                   // 56: iotmakerDockerCommunicationGrpc.NetworkCreateRequest
	(*NetworkCreateReply)(nil),                                     // 57: iotmakerDockerCommunicationGrpc.NetworkCreateReply
	(*NetworkFindIdByNameRequest)(nil),                             // 58: iotmakerDockerCommunicationGrpc.NetworkFindIdByNameRequest
	(*NetworkFindIdByNameReply)(nil),                               // 59: iotmakerDockerCommunicationGrpc.NetworkFindIdByNameReply
	(*NetworkListReply)(nil),                                       // 60: iotmakerDockerCommunicationGrpc.NetworkListReply
	(*NetworkRemoveRequest)(nil),                                   // 61: iotmakerDockerCommunicationGrpc.NetworkRemoveRequest
	(*NetworkRemoveByNameRequest)(nil),                             // 62: iotmakerDockerCommunicationGrpc.NetworkRemoveByNameRequest
	(*ImageBuildFromRemoteServerRequest)(nil),                      // 63: iotmakerDockerCommunicationGrpc.ImageBuildFromRemoteServerRequest
	(*ImageBuildFromRemoteServerReply)(nil),                        // 64: iotmakerDockerCommunicationGrpc.ImageBuildFromRemoteServerReply
	(*ImageOrContainerBuildPullSubStatus)(nil),                     // 65: iotmakerDockerCommunicationGrpc.ImageOrContainerBuildPullSubStatus
	(*ImageOrContainerBuildPullStatusRequest)(nil),                 // 66: iotmakerDockerCommunicationGrpc.ImageOrContainerBuildPullStatusRequest
	(*ImageOrContainerBuildPullStatusReply)(nil),                   // 67: iotmakerDockerCommunicationGrpc.ImageOrContainerBuildPullStatusReply
	(*ImageFindIdByNameRequest)(nil),                               // 68: iotmakerDockerCommunicationGrpc.ImageFindIdByNameRequest
	(*ImageFindIdByNameReply)(nil),                                 // 69: iotmakerDockerCommunicationGrpc.ImageFindIdByNameReply
	(*ImageListExposedPortsRequest)(nil),                           // 70: iotmakerDockerCommunicationGrpc.ImageListExposedPortsRequest
	(*ImageListExposedPortsReply)(nil),                             // 71: iotmakerDockerCommunicationGrpc.ImageListExposedPortsReply
	(*ImageListExposedPortsByNameRequest)(nil),                     // 72: iotmakerDockerCommunicationGrpc.ImageListExposedPortsByNameRequest
	(*ImageListExposedPortsByNameReply)(nil),                       // 73: iotmakerDockerCommunicationGrpc.ImageListExposedPortsByNameReply
	(*ImageListExposedVolumesRequest)(nil),                         // 74: iotmakerDockerCommunicationGrpc.ImageListExposedVolumesRequest
	(*ImageListExposedVolumesReply)(nil),                           // 75: iotmakerDockerCommunicationGrpc.ImageListExposedVolumesReply
	(*ImageListExposedVolumesByNameRequest)(nil),                   // 76: iotmakerDockerCommunicationGrpc.ImageListExposedVolumesByNameRequest
	(*ImageListExposedVolumesByNameReply)(nil),                     // 77: iotmakerDockerCommunicationGrpc.ImageListExposedVolumesByNameReply
	(*ImageMountNatPortListRequest)(nil),                           // 78: iotmakerDockerCommunicationGrpc.ImageMountNatPortListRequest
	(*ImageMountNatPortListReply)(nil),                             // 79: iotmakerDockerCommunicationGrpc.ImageMountNatPortListReply
	(*ImageMountNatPortListChangeExposedRequest)(nil),              // 80: iotmakerDockerCommunicationGrpc.ImageMountNatPortListChangeExposedRequest
	(*ImageMountNatPortListChangeExposedReply)(nil),                // 81: iotmakerDockerCommunicationGrpc.ImageMountNatPortListChangeExposedReply
	(*ImageMountNatPortListChangeExposedWithIpAddressRequest)(nil), // 82: iotmakerDockerCommunicationGrpc.ImageMountNatPortListChangeExposedWithIpAddressRequest
	(*ImageMountNatPortListChangeExposedWithIpAddressReply)(nil),   // 83: iotmakerDockerCommunicationGrpc.ImageMountNatPortListChangeExposedWithIpAddressReply
	(*ImagePullRequest)(nil),                                       // 84: iotmakerDockerCommunicationGrpc.ImagePullRequest
	(*ImagePullReply)(nil),                                         // 85: iotmakerDockerCommunicationGrpc.ImagePullReply
	(*ImageRemoveRequest)(nil),                                     // 86: iotmakerDockerCommunicationGrpc.ImageRemoveRequest
	(*ImageRemoveByNameRequest)(nil),                               // 87: iotmakerDockerCommunicationGrpc.ImageRemoveByNameRequest
	(*ImageListReply)(nil),                                         // 88: iotmakerDockerCommunicationGrpc.ImageListReply
	(*ContainerInspectByNameContainsRequest)(nil),                  // 89: iotmakerDockerCommunicationGrpc.ContainerInspectByNameContainsRequest
	(*ContainerInspectByNameContainsReply)(nil),                    // 90: iotmakerDockerCommunicationGrpc.ContainerInspectByNameContainsReply
	nil, // 91: iotmakerDockerCommunicationGrpc.PortMap.PortEntry
	nil, // 92: iotmakerDockerCommunicationGrpc.EndpointSettings.DriverOptsEntry
	nil, // 93: iotmakerDockerCommunicationGrpc.Driver.OptionsEntry
	nil, // 94: iotmakerDockerCommunicationGrpc.VolumeOptions.LabelsEntry
	nil, // 95: iotmakerDockerCommunicationGrpc.IPAMConfig.AuxAddressEntry
}
var file_gRpcServer_proto_depIdxs = []int32{
	91, // 0: iotmakerDockerCommunicationGrpc.PortMap.Port:type_name -> iotmakerDockerCommunicationGrpc.PortMap.PortEntry
	2,  // 1: iotmakerDockerCommunicationGrpc.PortBindingList.PortBinding:type_name -> iotmakerDockerCommunicationGrpc.PortBinding
	6,  // 2: iotmakerDockerCommunicationGrpc.EndpointSettings.IPAMConfig:type_name -> iotmakerDockerCommunicationGrpc.EndpointIPAMConfig
	92, // 3: iotmakerDockerCommunicationGrpc.EndpointSettings.DriverOpts:type_name -> iotmakerDockerCommunicationGrpc.EndpointSettings.DriverOptsEntry
	7,  // 4: iotmakerDockerCommunicationGrpc.Mount.BindOptions:type_name -> iotmakerDockerCommunicationGrpc.BindOptions
	9,  // 5: iotmakerDockerCommunicationGrpc.Mount.VolumeOptions:type_name -> iotmakerDockerCommunicationGrpc.VolumeOptions
	10, // 6: iotmakerDockerCommunicationGrpc.Mount.TmpfsOptions:type_name -> iotmakerDockerCommunicationGrpc.TmpfsOptions
	93, // 7: iotmakerDockerCommunicationGrpc.Driver.Options:type_name -> iotmakerDockerCommunicationGrpc.Driver.OptionsEntry
	94, // 8: iotmakerDockerCommunicationGrpc.VolumeOptions.Labels:type_name -> iotmakerDockerCommunicationGrpc.VolumeOptions.LabelsEntry
	8,  // 9: iotmakerDockerCommunicationGrpc.VolumeOptions.DriverConfig:type_name -> iotmakerDockerCommunicationGrpc.Driver
	95, // 10: iotmakerDockerCommunicationGrpc.IPAMConfig.AuxAddress:type_name -> iotmakerDockerCommunicationGrpc.IPAMConfig.AuxAddressEntry
	1,  // 11: iotmakerDockerCommunicationGrpc.ContainerCreateRequest.PortExposedList:type_name -> iotmakerDockerCommunicationGrpc.PortMap
	5,  // 12: iotmakerDockerCommunicationGrpc.ContainerCreateRequest.MountVolumes:type_name -> iotmakerDockerCommunicationGrpc.Mount
	5,  // 13: iotmakerDockerCommunicationGrpc.ContainerCreateAndChangeExposedPortRequest.MountVolumes:type_name -> iotmakerDockerCommunicationGrpc.Mount
	0,  // 14: iotmakerDockerCommunicationGrpc.ContainerCreateAndChangeExposedPortRequest.CurrentPort:type_name -> iotmakerDockerCommunicationGrpc.Port
	0,  // 15: iotmakerDockerCommunicationGrpc.ContainerCreateAndChangeExposedPortRequest.ChangeToPort:type_name -> iotmakerDockerCommunicationGrpc.Port
	5,  // 16: iotmakerDockerCommunicationGrpc.ContainerCreateAndExposePortsAutomaticallyRequest.MountVolumes:type_name -> iotmakerDockerCommunicationGrpc.Mount
	1,  // 17: iotmakerDockerCommunicationGrpc.ContainerCreateAndStartRequest.PortExposedList:type_name -> iotmakerDockerCommunicationGrpc.PortMap
	5,  // 18: iotmakerDockerCommunicationGrpc.ContainerCreateAndStartRequest.MountVolumes:type_name -> iotmakerDockerCommunicationGrpc.Mount
	5,  // 19: iotmakerDockerCommunicationGrpc.ContainerCreateChangeExposedPortAndStartRequest.MountVolumes:type_name -> iotmakerDockerCommunicationGrpc.Mount
	0,  // 20: iotmakerDockerCommunicationGrpc.ContainerCreateChangeExposedPortAndStartRequest.CurrentPort:type_name -> iotmakerDockerCommunicationGrpc.Port
	0,  // 21: iotmakerDockerCommunicationGrpc.ContainerCreateChangeExposedPortAndStartRequest.ChangeToPort:type_name -> iotmakerDockerCommunicationGrpc.Port
	5,  // 22: iotmakerDockerCommunicationGrpc.ContainerCreateExposePortsAutomaticallyAndStartRequest.MountVolumes:type_name -> iotmakerDockerCommunicationGrpc.Mount
	5,  // 23: iotmakerDockerCommunicationGrpc.ContainerCreateWithoutExposePortsRequest.MountVolumes:type_name -> iotmakerDockerCommunicationGrpc.Mount
	5,  // 24: iotmakerDockerCommunicationGrpc.ContainerCreateWithoutExposePortsAndStartRequest.MountVolumes:type_name -> iotmakerDockerCommunicationGrpc.Mount
	4,  // 25: iotmakerDockerCommunicationGrpc.NetworkConnectRequest.Config:type_name -> iotmakerDockerCommunicationGrpc.EndpointSettings
	0,  // 26: iotmakerDockerCommunicationGrpc.ImageMountNatPortListChangeExposedRequest.CurrentPortList:type_name -> iotmakerDockerCommunicationGrpc.Port
	0,  // 27: iotmakerDockerCommunicationGrpc.ImageMountNatPortListChangeExposedRequest.ChangeToPortList:type_name -> iotmakerDockerCommunicationGrpc.Port
	0,  // 28: iotmakerDockerCommunicationGrpc.ImageMountNatPortListChangeExposedWithIpAddressRequest.CurrentPortList:type_name -> iotmakerDockerCommunicationGrpc.Port
	0,  // 29: iotmakerDockerCommunicationGrpc.ImageMountNatPortListChangeExposedWithIpAddressRequest.ChangeToPortList:type_name -> iotmakerDockerCommunicationGrpc.Port
	3,  // 30: iotmakerDockerCommunicationGrpc.PortMap.PortEntry.value:type_name -> iotmakerDockerCommunicationGrpc.PortBindingList
	16, // 31: iotmakerDockerCommunicationGrpc.DockerServer.ContainerCreate:input_type -> iotmakerDockerCommunicationGrpc.ContainerCreateRequest
	18, // 32: iotmakerDockerCommunicationGrpc.DockerServer.ContainerCreateAndChangeExposedPort:input_type -> iotmakerDockerCommunicationGrpc.ContainerCreateAndChangeExposedPortRequest
	12, // 33: iotmakerDockerCommunicationGrpc.DockerServer.ContainerInspect:input_type -> iotmakerDockerCommunicationGrpc.ContainerInspectRequest
	20, // 34: iotmakerDockerCommunicationGrpc.DockerServer.ContainerCreateAndExposePortsAutomatically:input_type -> iotmakerDockerCommunicationGrpc.ContainerCreateAndExposePortsAutomaticallyRequest
	22, // 35: iotmakerDockerCommunicationGrpc.DockerServer.ContainerCreateAndStart:input_type -> iotmakerDockerCommunicationGrpc.ContainerCreateAndStartRequest
	24, // 36: iotmakerDockerCommunicationGrpc.DockerServer.ContainerCreateChangeExposedPortAndStart:input_type -> iotmakerDockerCommunicationGrpc.ContainerCreateChangeExposedPortAndStartRequest
	26, // 37: iotmakerDockerCommunicationGrpc.DockerServer.ContainerCreateExposePortsAutomaticallyAndStart:input_type -> iotmakerDockerCommunicationGrpc.ContainerCreateExposePortsAutomaticallyAndStartRequest
	28, // 38: iotmakerDockerCommunicationGrpc.DockerServer.ContainerCreateWithoutExposePorts:input_type -> iotmakerDockerCommunicationGrpc.ContainerCreateWithoutExposePortsRequest
	30, // 39: iotmakerDockerCommunicationGrpc.DockerServer.ContainerCreateWithoutExposePortsAndStart:input_type -> iotmakerDockerCommunicationGrpc.ContainerCreateWithoutExposePortsAndStartRequest
	32, // 40: iotmakerDockerCommunicationGrpc.DockerServer.ContainerFindIdByName:input_type -> iotmakerDockerCommunicationGrpc.ContainerFindIdByNameRequest
	34, // 41: iotmakerDockerCommunicationGrpc.DockerServer.ContainerFindIdByNameContains:input_type -> iotmakerDockerCommunicationGrpc.ContainerFindIdByNameContainsRequest
	36, // 42: iotmakerDockerCommunicationGrpc.DockerServer.ContainerInspectByName:input_type -> iotmakerDockerCommunicationGrpc.ContainerInspectByNameRequest
	89, // 43: iotmakerDockerCommunicationGrpc.DockerServer.ContainerInspectByNameContains:input_type -> iotmakerDockerCommunicationGrpc.ContainerInspectByNameContainsRequest
	38, // 44: iotmakerDockerCommunicationGrpc.DockerServer.ContainerInspectJSon:input_type -> iotmakerDockerCommunicationGrpc.ContainerInspectJSonRequest
	40, // 45: iotmakerDockerCommunicationGrpc.DockerServer.ContainerInspectJSonByName:input_type -> iotmakerDockerCommunicationGrpc.ContainerInspectJSonByNameRequest
	42, // 46: iotmakerDockerCommunicationGrpc.DockerServer.ContainerListAll:input_type -> iotmakerDockerCommunicationGrpc.Empty
	42, // 47: iotmakerDockerCommunicationGrpc.DockerServer.ContainerListQuiet:input_type -> iotmakerDockerCommunicationGrpc.Empty
	46, // 48: iotmakerDockerCommunicationGrpc.DockerServer.ContainerRemove:input_type -> iotmakerDockerCommunicationGrpc.ContainerRemoveRequest
	47, // 49: iotmakerDockerCommunicationGrpc.DockerServer.ContainerStart:input_type -> iotmakerDockerCommunicationGrpc.ContainerStartRequest
	48, // 50: iotmakerDockerCommunicationGrpc.DockerServer.ContainerStatisticsOneShot:input_type -> iotmakerDockerCommunicationGrpc.ContainerStatisticsOneShotRequest
	50, // 51: iotmakerDockerCommunicationGrpc.DockerServer.ContainerStatisticsOneShotByName:input_type -> iotmakerDockerCommunicationGrpc.ContainerStatisticsOneShotByNameRequest
	52, // 52: iotmakerDockerCommunicationGrpc.DockerServer.ContainerStop:input_type -> iotmakerDockerCommunicationGrpc.ContainerStopRequest
	53, // 53: iotmakerDockerCommunicationGrpc.DockerServer.ContainerStopAndRemove:input_type -> iotmakerDockerCommunicationGrpc.ContainerStopAndRemoveRequest
	54, // 54: iotmakerDockerCommunicationGrpc.DockerServer.ContainerWaitStatusNotRunning:input_type -> iotmakerDockerCommunicationGrpc.ContainerWaitStatusNotRunningRequest
	56, // 55: iotmakerDockerCommunicationGrpc.DockerServer.NetworkCreate:input_type -> iotmakerDockerCommunicationGrpc.NetworkCreateRequest
	58, // 56: iotmakerDockerCommunicationGrpc.DockerServer.NetworkFindIdByName:input_type -> iotmakerDockerCommunicationGrpc.NetworkFindIdByNameRequest
	42, // 57: iotmakerDockerCommunicationGrpc.DockerServer.NetworkList:input_type -> iotmakerDockerCommunicationGrpc.Empty
	61, // 58: iotmakerDockerCommunicationGrpc.DockerServer.NetworkRemove:input_type -> iotmakerDockerCommunicationGrpc.NetworkRemoveRequest
	62, // 59: iotmakerDockerCommunicationGrpc.DockerServer.NetworkRemoveByName:input_type -> iotmakerDockerCommunicationGrpc.NetworkRemoveByNameRequest
	14, // 60: iotmakerDockerCommunicationGrpc.DockerServer.NetworkInspect:input_type -> iotmakerDockerCommunicationGrpc.NetworkInspectRequest
	42, // 61: iotmakerDockerCommunicationGrpc.DockerServer.ImageGarbageCollector:input_type -> iotmakerDockerCommunicationGrpc.Empty
	63, // 62: iotmakerDockerCommunicationGrpc.DockerServer.ImageBuildFromRemoteServer:input_type -> iotmakerDockerCommunicationGrpc.ImageBuildFromRemoteServerRequest
	66, // 63: iotmakerDockerCommunicationGrpc.DockerServer.ImageBuildFromRemoteServerStatus:input_type -> iotmakerDockerCommunicationGrpc.ImageOrContainerBuildPullStatusRequest
	68, // 64: iotmakerDockerCommunicationGrpc.DockerServer.ImageFindIdByName:input_type -> iotmakerDockerCommunicationGrpc.ImageFindIdByNameRequest
	42, // 65: iotmakerDockerCommunicationGrpc.DockerServer.ImageList:input_type -> iotmakerDockerCommunicationGrpc.Empty
	70, // 66: iotmakerDockerCommunicationGrpc.DockerServer.ImageListExposedPorts:input_type -> iotmakerDockerCommunicationGrpc.ImageListExposedPortsRequest
	72, // 67: iotmakerDockerCommunicationGrpc.DockerServer.ImageListExposedPortsByName:input_type -> iotmakerDockerCommunicationGrpc.ImageListExposedPortsByNameRequest
	74, // 68: iotmakerDockerCommunicationGrpc.DockerServer.ImageListExposedVolumes:input_type -> iotmakerDockerCommunicationGrpc.ImageListExposedVolumesRequest
	76, // 69: iotmakerDockerCommunicationGrpc.DockerServer.ImageListExposedVolumesByName:input_type -> iotmakerDockerCommunicationGrpc.ImageListExposedVolumesByNameRequest
	78, // 70: iotmakerDockerCommunicationGrpc.DockerServer.ImageMountNatPortList:input_type -> iotmakerDockerCommunicationGrpc.ImageMountNatPortListRequest
	80, // 71: iotmakerDockerCommunicationGrpc.DockerServer.ImageMountNatPortListChangeExposed:input_type -> iotmakerDockerCommunicationGrpc.ImageMountNatPortListChangeExposedRequest
	82, // 72: iotmakerDockerCommunicationGrpc.DockerServer.ImageMountNatPortListChangeExposedWithIpAddress:input_type -> iotmakerDockerCommunicationGrpc.ImageMountNatPortListChangeExposedWithIpAddressRequest
	84, // 73: iotmakerDockerCommunicationGrpc.DockerServer.ImagePull:input_type -> iotmakerDockerCommunicationGrpc.ImagePullRequest
	86, // 74: iotmakerDockerCommunicationGrpc.DockerServer.ImageRemove:input_type -> iotmakerDockerCommunicationGrpc.ImageRemoveRequest
	87, // 75: iotmakerDockerCommunicationGrpc.DockerServer.ImageRemoveByName:input_type -> iotmakerDockerCommunicationGrpc.ImageRemoveByNameRequest
	17, // 76: iotmakerDockerCommunicationGrpc.DockerServer.ContainerCreate:output_type -> iotmakerDockerCommunicationGrpc.ContainerCreateReply
	19, // 77: iotmakerDockerCommunicationGrpc.DockerServer.ContainerCreateAndChangeExposedPort:output_type -> iotmakerDockerCommunicationGrpc.ContainerCreateAndChangeExposedPortReply
	13, // 78: iotmakerDockerCommunicationGrpc.DockerServer.ContainerInspect:output_type -> iotmakerDockerCommunicationGrpc.ContainerInspectReply
	21, // 79: iotmakerDockerCommunicationGrpc.DockerServer.ContainerCreateAndExposePortsAutomatically:output_type -> iotmakerDockerCommunicationGrpc.ContainerCreateAndExposePortsAutomaticallyReply
	23, // 80: iotmakerDockerCommunicationGrpc.DockerServer.ContainerCreateAndStart:output_type -> iotmakerDockerCommunicationGrpc.ContainerCreateAndStartReply
	25, // 81: iotmakerDockerCommunicationGrpc.DockerServer.ContainerCreateChangeExposedPortAndStart:output_type -> iotmakerDockerCommunicationGrpc.ContainerCreateChangeExposedPortAndStartReply
	27, // 82: iotmakerDockerCommunicationGrpc.DockerServer.ContainerCreateExposePortsAutomaticallyAndStart:output_type -> iotmakerDockerCommunicationGrpc.ContainerCreateExposePortsAutomaticallyAndStartReply
	29, // 83: iotmakerDockerCommunicationGrpc.DockerServer.ContainerCreateWithoutExposePorts:output_type -> iotmakerDockerCommunicationGrpc.ContainerCreateWithoutExposePortsReply
	31, // 84: iotmakerDockerCommunicationGrpc.DockerServer.ContainerCreateWithoutExposePortsAndStart:output_type -> iotmakerDockerCommunicationGrpc.ContainerCreateWithoutExposePortsAndStartReply
	33, // 85: iotmakerDockerCommunicationGrpc.DockerServer.ContainerFindIdByName:output_type -> iotmakerDockerCommunicationGrpc.ContainerFindIdByNameReply
	35, // 86: iotmakerDockerCommunicationGrpc.DockerServer.ContainerFindIdByNameContains:output_type -> iotmakerDockerCommunicationGrpc.ContainerFindIdByNameContainsReply
	37, // 87: iotmakerDockerCommunicationGrpc.DockerServer.ContainerInspectByName:output_type -> iotmakerDockerCommunicationGrpc.ContainerInspectByNameReply
	90, // 88: iotmakerDockerCommunicationGrpc.DockerServer.ContainerInspectByNameContains:output_type -> iotmakerDockerCommunicationGrpc.ContainerInspectByNameContainsReply
	39, // 89: iotmakerDockerCommunicationGrpc.DockerServer.ContainerInspectJSon:output_type -> iotmakerDockerCommunicationGrpc.ContainerInspectJSonReply
	41, // 90: iotmakerDockerCommunicationGrpc.DockerServer.ContainerInspectJSonByName:output_type -> iotmakerDockerCommunicationGrpc.ContainerInspectJSonByNameReply
	43, // 91: iotmakerDockerCommunicationGrpc.DockerServer.ContainerListAll:output_type -> iotmakerDockerCommunicationGrpc.ContainerListAllReply
	43, // 92: iotmakerDockerCommunicationGrpc.DockerServer.ContainerListQuiet:output_type -> iotmakerDockerCommunicationGrpc.ContainerListAllReply
	42, // 93: iotmakerDockerCommunicationGrpc.DockerServer.ContainerRemove:output_type -> iotmakerDockerCommunicationGrpc.Empty
	42, // 94: iotmakerDockerCommunicationGrpc.DockerServer.ContainerStart:output_type -> iotmakerDockerCommunicationGrpc.Empty
	49, // 95: iotmakerDockerCommunicationGrpc.DockerServer.ContainerStatisticsOneShot:output_type -> iotmakerDockerCommunicationGrpc.ContainerStatisticsOneShotReply
	51, // 96: iotmakerDockerCommunicationGrpc.DockerServer.ContainerStatisticsOneShotByName:output_type -> iotmakerDockerCommunicationGrpc.ContainerStatisticsOneShotByNameReply
	42, // 97: iotmakerDockerCommunicationGrpc.DockerServer.ContainerStop:output_type -> iotmakerDockerCommunicationGrpc.Empty
	42, // 98: iotmakerDockerCommunicationGrpc.DockerServer.ContainerStopAndRemove:output_type -> iotmakerDockerCommunicationGrpc.Empty
	42, // 99: iotmakerDockerCommunicationGrpc.DockerServer.ContainerWaitStatusNotRunning:output_type -> iotmakerDockerCommunicationGrpc.Empty
	57, // 100: iotmakerDockerCommunicationGrpc.DockerServer.NetworkCreate:output_type -> iotmakerDockerCommunicationGrpc.NetworkCreateReply
	59, // 101: iotmakerDockerCommunicationGrpc.DockerServer.NetworkFindIdByName:output_type -> iotmakerDockerCommunicationGrpc.NetworkFindIdByNameReply
	60, // 102: iotmakerDockerCommunicationGrpc.DockerServer.NetworkList:output_type -> iotmakerDockerCommunicationGrpc.NetworkListReply
	42, // 103: iotmakerDockerCommunicationGrpc.DockerServer.NetworkRemove:output_type -> iotmakerDockerCommunicationGrpc.Empty
	42, // 104: iotmakerDockerCommunicationGrpc.DockerServer.NetworkRemoveByName:output_type -> iotmakerDockerCommunicationGrpc.Empty
	15, // 105: iotmakerDockerCommunicationGrpc.DockerServer.NetworkInspect:output_type -> iotmakerDockerCommunicationGrpc.NetworkInspectReply
	42, // 106: iotmakerDockerCommunicationGrpc.DockerServer.ImageGarbageCollector:output_type -> iotmakerDockerCommunicationGrpc.Empty
	64, // 107: iotmakerDockerCommunicationGrpc.DockerServer.ImageBuildFromRemoteServer:output_type -> iotmakerDockerCommunicationGrpc.ImageBuildFromRemoteServerReply
	67, // 108: iotmakerDockerCommunicationGrpc.DockerServer.ImageBuildFromRemoteServerStatus:output_type -> iotmakerDockerCommunicationGrpc.ImageOrContainerBuildPullStatusReply
	69, // 109: iotmakerDockerCommunicationGrpc.DockerServer.ImageFindIdByName:output_type -> iotmakerDockerCommunicationGrpc.ImageFindIdByNameReply
	88, // 110: iotmakerDockerCommunicationGrpc.DockerServer.ImageList:output_type -> iotmakerDockerCommunicationGrpc.ImageListReply
	71, // 111: iotmakerDockerCommunicationGrpc.DockerServer.ImageListExposedPorts:output_type -> iotmakerDockerCommunicationGrpc.ImageListExposedPortsReply
	73, // 112: iotmakerDockerCommunicationGrpc.DockerServer.ImageListExposedPortsByName:output_type -> iotmakerDockerCommunicationGrpc.ImageListExposedPortsByNameReply
	75, // 113: iotmakerDockerCommunicationGrpc.DockerServer.ImageListExposedVolumes:output_type -> iotmakerDockerCommunicationGrpc.ImageListExposedVolumesReply
	77, // 114: iotmakerDockerCommunicationGrpc.DockerServer.ImageListExposedVolumesByName:output_type -> iotmakerDockerCommunicationGrpc.ImageListExposedVolumesByNameReply
	79, // 115: iotmakerDockerCommunicationGrpc.DockerServer.ImageMountNatPortList:output_type -> iotmakerDockerCommunicationGrpc.ImageMountNatPortListReply
	81, // 116: iotmakerDockerCommunicationGrpc.DockerServer.ImageMountNatPortListChangeExposed:output_type -> iotmakerDockerCommunicationGrpc.ImageMountNatPortListChangeExposedReply
	83, // 117: iotmakerDockerCommunicationGrpc.DockerServer.ImageMountNatPortListChangeExposedWithIpAddress:output_type -> iotmakerDockerCommunicationGrpc.ImageMountNatPortListChangeExposedWithIpAddressReply
	85, // 118: iotmakerDockerCommunicationGrpc.DockerServer.ImagePull:output_type -> iotmakerDockerCommunicationGrpc.ImagePullReply
	42, // 119: iotmakerDockerCommunicationGrpc.DockerServer.ImageRemove:output_type -> iotmakerDockerCommunicationGrpc.Empty
	42, // 120: iotmakerDockerCommunicationGrpc.DockerServer.ImageRemoveByName:output_type -> iotmakerDockerCommunicationGrpc.Empty
	76, // [76:121] is the sub-list for method output_type
	31, // [31:76] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_gRpcServer_proto_init() }
func file_gRpcServer_proto_init() {
	if File_gRpcServer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gRpcServer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortBinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortBindingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointIPAMConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Driver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TmpfsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPAMConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerInspectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerInspectReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkInspectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkInspectReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerCreateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerCreateAndChangeExposedPortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerCreateAndChangeExposedPortReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerCreateAndExposePortsAutomaticallyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerCreateAndExposePortsAutomaticallyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerCreateAndStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerCreateAndStartReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerCreateChangeExposedPortAndStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerCreateChangeExposedPortAndStartReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerCreateExposePortsAutomaticallyAndStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerCreateExposePortsAutomaticallyAndStartReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerCreateWithoutExposePortsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerCreateWithoutExposePortsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerCreateWithoutExposePortsAndStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerCreateWithoutExposePortsAndStartReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerFindIdByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerFindIdByNameReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerFindIdByNameContainsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerFindIdByNameContainsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerInspectByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerInspectByNameReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerInspectJSonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerInspectJSonReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerInspectJSonByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerInspectJSonByNameReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerListAllReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerNetworkInspectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerNetworkInspectReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerRemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerStatisticsOneShotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerStatisticsOneShotReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerStatisticsOneShotByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerStatisticsOneShotByNameReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerStopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerStopAndRemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerWaitStatusNotRunningRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkConnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkCreateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkFindIdByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkFindIdByNameReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkRemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkRemoveByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageBuildFromRemoteServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageBuildFromRemoteServerReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageOrContainerBuildPullSubStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageOrContainerBuildPullStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageOrContainerBuildPullStatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageFindIdByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageFindIdByNameReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageListExposedPortsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageListExposedPortsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageListExposedPortsByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageListExposedPortsByNameReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageListExposedVolumesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageListExposedVolumesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageListExposedVolumesByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageListExposedVolumesByNameReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageMountNatPortListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageMountNatPortListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageMountNatPortListChangeExposedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageMountNatPortListChangeExposedReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageMountNatPortListChangeExposedWithIpAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageMountNatPortListChangeExposedWithIpAddressReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImagePullRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImagePullReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageRemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageRemoveByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerInspectByNameContainsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gRpcServer_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerInspectByNameContainsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gRpcServer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   96,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gRpcServer_proto_goTypes,
		DependencyIndexes: file_gRpcServer_proto_depIdxs,
		MessageInfos:      file_gRpcServer_proto_msgTypes,
	}.Build()
	File_gRpcServer_proto = out.File
	file_gRpcServer_proto_rawDesc = nil
	file_gRpcServer_proto_goTypes = nil
	file_gRpcServer_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DockerServerClient is the client API for DockerServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DockerServerClient interface {
	ContainerCreate(ctx context.Context, in *ContainerCreateRequest, opts ...grpc.CallOption) (*ContainerCreateReply, error)
	ContainerCreateAndChangeExposedPort(ctx context.Context, in *ContainerCreateAndChangeExposedPortRequest, opts ...grpc.CallOption) (*ContainerCreateAndChangeExposedPortReply, error)
	ContainerInspect(ctx context.Context, in *ContainerInspectRequest, opts ...grpc.CallOption) (*ContainerInspectReply, error)
	ContainerCreateAndExposePortsAutomatically(ctx context.Context, in *ContainerCreateAndExposePortsAutomaticallyRequest, opts ...grpc.CallOption) (*ContainerCreateAndExposePortsAutomaticallyReply, error)
	ContainerCreateAndStart(ctx context.Context, in *ContainerCreateAndStartRequest, opts ...grpc.CallOption) (*ContainerCreateAndStartReply, error)
	ContainerCreateChangeExposedPortAndStart(ctx context.Context, in *ContainerCreateChangeExposedPortAndStartRequest, opts ...grpc.CallOption) (*ContainerCreateChangeExposedPortAndStartReply, error)
	ContainerCreateExposePortsAutomaticallyAndStart(ctx context.Context, in *ContainerCreateExposePortsAutomaticallyAndStartRequest, opts ...grpc.CallOption) (*ContainerCreateExposePortsAutomaticallyAndStartReply, error)
	ContainerCreateWithoutExposePorts(ctx context.Context, in *ContainerCreateWithoutExposePortsRequest, opts ...grpc.CallOption) (*ContainerCreateWithoutExposePortsReply, error)
	ContainerCreateWithoutExposePortsAndStart(ctx context.Context, in *ContainerCreateWithoutExposePortsAndStartRequest, opts ...grpc.CallOption) (*ContainerCreateWithoutExposePortsAndStartReply, error)
	ContainerFindIdByName(ctx context.Context, in *ContainerFindIdByNameRequest, opts ...grpc.CallOption) (*ContainerFindIdByNameReply, error)
	ContainerFindIdByNameContains(ctx context.Context, in *ContainerFindIdByNameContainsRequest, opts ...grpc.CallOption) (*ContainerFindIdByNameContainsReply, error)
	ContainerInspectByName(ctx context.Context, in *ContainerInspectByNameRequest, opts ...grpc.CallOption) (*ContainerInspectByNameReply, error)
	ContainerInspectByNameContains(ctx context.Context, in *ContainerInspectByNameContainsRequest, opts ...grpc.CallOption) (*ContainerInspectByNameContainsReply, error)
	ContainerInspectJSon(ctx context.Context, in *ContainerInspectJSonRequest, opts ...grpc.CallOption) (*ContainerInspectJSonReply, error)
	ContainerInspectJSonByName(ctx context.Context, in *ContainerInspectJSonByNameRequest, opts ...grpc.CallOption) (*ContainerInspectJSonByNameReply, error)
	ContainerListAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ContainerListAllReply, error)
	ContainerListQuiet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ContainerListAllReply, error)
	ContainerRemove(ctx context.Context, in *ContainerRemoveRequest, opts ...grpc.CallOption) (*Empty, error)
	ContainerStart(ctx context.Context, in *ContainerStartRequest, opts ...grpc.CallOption) (*Empty, error)
	ContainerStatisticsOneShot(ctx context.Context, in *ContainerStatisticsOneShotRequest, opts ...grpc.CallOption) (*ContainerStatisticsOneShotReply, error)
	ContainerStatisticsOneShotByName(ctx context.Context, in *ContainerStatisticsOneShotByNameRequest, opts ...grpc.CallOption) (*ContainerStatisticsOneShotByNameReply, error)
	ContainerStop(ctx context.Context, in *ContainerStopRequest, opts ...grpc.CallOption) (*Empty, error)
	ContainerStopAndRemove(ctx context.Context, in *ContainerStopAndRemoveRequest, opts ...grpc.CallOption) (*Empty, error)
	ContainerWaitStatusNotRunning(ctx context.Context, in *ContainerWaitStatusNotRunningRequest, opts ...grpc.CallOption) (*Empty, error)
	NetworkCreate(ctx context.Context, in *NetworkCreateRequest, opts ...grpc.CallOption) (*NetworkCreateReply, error)
	NetworkFindIdByName(ctx context.Context, in *NetworkFindIdByNameRequest, opts ...grpc.CallOption) (*NetworkFindIdByNameReply, error)
	NetworkList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NetworkListReply, error)
	NetworkRemove(ctx context.Context, in *NetworkRemoveRequest, opts ...grpc.CallOption) (*Empty, error)
	NetworkRemoveByName(ctx context.Context, in *NetworkRemoveByNameRequest, opts ...grpc.CallOption) (*Empty, error)
	NetworkInspect(ctx context.Context, in *NetworkInspectRequest, opts ...grpc.CallOption) (*NetworkInspectReply, error)
	ImageGarbageCollector(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	ImageBuildFromRemoteServer(ctx context.Context, in *ImageBuildFromRemoteServerRequest, opts ...grpc.CallOption) (*ImageBuildFromRemoteServerReply, error)
	ImageBuildFromRemoteServerStatus(ctx context.Context, in *ImageOrContainerBuildPullStatusRequest, opts ...grpc.CallOption) (*ImageOrContainerBuildPullStatusReply, error)
	ImageFindIdByName(ctx context.Context, in *ImageFindIdByNameRequest, opts ...grpc.CallOption) (*ImageFindIdByNameReply, error)
	ImageList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ImageListReply, error)
	ImageListExposedPorts(ctx context.Context, in *ImageListExposedPortsRequest, opts ...grpc.CallOption) (*ImageListExposedPortsReply, error)
	ImageListExposedPortsByName(ctx context.Context, in *ImageListExposedPortsByNameRequest, opts ...grpc.CallOption) (*ImageListExposedPortsByNameReply, error)
	ImageListExposedVolumes(ctx context.Context, in *ImageListExposedVolumesRequest, opts ...grpc.CallOption) (*ImageListExposedVolumesReply, error)
	ImageListExposedVolumesByName(ctx context.Context, in *ImageListExposedVolumesByNameRequest, opts ...grpc.CallOption) (*ImageListExposedVolumesByNameReply, error)
	ImageMountNatPortList(ctx context.Context, in *ImageMountNatPortListRequest, opts ...grpc.CallOption) (*ImageMountNatPortListReply, error)
	ImageMountNatPortListChangeExposed(ctx context.Context, in *ImageMountNatPortListChangeExposedRequest, opts ...grpc.CallOption) (*ImageMountNatPortListChangeExposedReply, error)
	ImageMountNatPortListChangeExposedWithIpAddress(ctx context.Context, in *ImageMountNatPortListChangeExposedWithIpAddressRequest, opts ...grpc.CallOption) (*ImageMountNatPortListChangeExposedWithIpAddressReply, error)
	ImagePull(ctx context.Context, in *ImagePullRequest, opts ...grpc.CallOption) (*ImagePullReply, error)
	ImageRemove(ctx context.Context, in *ImageRemoveRequest, opts ...grpc.CallOption) (*Empty, error)
	ImageRemoveByName(ctx context.Context, in *ImageRemoveByNameRequest, opts ...grpc.CallOption) (*Empty, error)
}

type dockerServerClient struct {
	cc grpc.ClientConnInterface
}

func NewDockerServerClient(cc grpc.ClientConnInterface) DockerServerClient {
	return &dockerServerClient{cc}
}

func (c *dockerServerClient) ContainerCreate(ctx context.Context, in *ContainerCreateRequest, opts ...grpc.CallOption) (*ContainerCreateReply, error) {
	out := new(ContainerCreateReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ContainerCreateAndChangeExposedPort(ctx context.Context, in *ContainerCreateAndChangeExposedPortRequest, opts ...grpc.CallOption) (*ContainerCreateAndChangeExposedPortReply, error) {
	out := new(ContainerCreateAndChangeExposedPortReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerCreateAndChangeExposedPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ContainerInspect(ctx context.Context, in *ContainerInspectRequest, opts ...grpc.CallOption) (*ContainerInspectReply, error) {
	out := new(ContainerInspectReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerInspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ContainerCreateAndExposePortsAutomatically(ctx context.Context, in *ContainerCreateAndExposePortsAutomaticallyRequest, opts ...grpc.CallOption) (*ContainerCreateAndExposePortsAutomaticallyReply, error) {
	out := new(ContainerCreateAndExposePortsAutomaticallyReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerCreateAndExposePortsAutomatically", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ContainerCreateAndStart(ctx context.Context, in *ContainerCreateAndStartRequest, opts ...grpc.CallOption) (*ContainerCreateAndStartReply, error) {
	out := new(ContainerCreateAndStartReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerCreateAndStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ContainerCreateChangeExposedPortAndStart(ctx context.Context, in *ContainerCreateChangeExposedPortAndStartRequest, opts ...grpc.CallOption) (*ContainerCreateChangeExposedPortAndStartReply, error) {
	out := new(ContainerCreateChangeExposedPortAndStartReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerCreateChangeExposedPortAndStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ContainerCreateExposePortsAutomaticallyAndStart(ctx context.Context, in *ContainerCreateExposePortsAutomaticallyAndStartRequest, opts ...grpc.CallOption) (*ContainerCreateExposePortsAutomaticallyAndStartReply, error) {
	out := new(ContainerCreateExposePortsAutomaticallyAndStartReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerCreateExposePortsAutomaticallyAndStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ContainerCreateWithoutExposePorts(ctx context.Context, in *ContainerCreateWithoutExposePortsRequest, opts ...grpc.CallOption) (*ContainerCreateWithoutExposePortsReply, error) {
	out := new(ContainerCreateWithoutExposePortsReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerCreateWithoutExposePorts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ContainerCreateWithoutExposePortsAndStart(ctx context.Context, in *ContainerCreateWithoutExposePortsAndStartRequest, opts ...grpc.CallOption) (*ContainerCreateWithoutExposePortsAndStartReply, error) {
	out := new(ContainerCreateWithoutExposePortsAndStartReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerCreateWithoutExposePortsAndStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ContainerFindIdByName(ctx context.Context, in *ContainerFindIdByNameRequest, opts ...grpc.CallOption) (*ContainerFindIdByNameReply, error) {
	out := new(ContainerFindIdByNameReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerFindIdByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ContainerFindIdByNameContains(ctx context.Context, in *ContainerFindIdByNameContainsRequest, opts ...grpc.CallOption) (*ContainerFindIdByNameContainsReply, error) {
	out := new(ContainerFindIdByNameContainsReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerFindIdByNameContains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ContainerInspectByName(ctx context.Context, in *ContainerInspectByNameRequest, opts ...grpc.CallOption) (*ContainerInspectByNameReply, error) {
	out := new(ContainerInspectByNameReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerInspectByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ContainerInspectByNameContains(ctx context.Context, in *ContainerInspectByNameContainsRequest, opts ...grpc.CallOption) (*ContainerInspectByNameContainsReply, error) {
	out := new(ContainerInspectByNameContainsReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerInspectByNameContains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ContainerInspectJSon(ctx context.Context, in *ContainerInspectJSonRequest, opts ...grpc.CallOption) (*ContainerInspectJSonReply, error) {
	out := new(ContainerInspectJSonReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerInspectJSon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ContainerInspectJSonByName(ctx context.Context, in *ContainerInspectJSonByNameRequest, opts ...grpc.CallOption) (*ContainerInspectJSonByNameReply, error) {
	out := new(ContainerInspectJSonByNameReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerInspectJSonByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ContainerListAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ContainerListAllReply, error) {
	out := new(ContainerListAllReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerListAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ContainerListQuiet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ContainerListAllReply, error) {
	out := new(ContainerListAllReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerListQuiet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ContainerRemove(ctx context.Context, in *ContainerRemoveRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ContainerStart(ctx context.Context, in *ContainerStartRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ContainerStatisticsOneShot(ctx context.Context, in *ContainerStatisticsOneShotRequest, opts ...grpc.CallOption) (*ContainerStatisticsOneShotReply, error) {
	out := new(ContainerStatisticsOneShotReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerStatisticsOneShot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ContainerStatisticsOneShotByName(ctx context.Context, in *ContainerStatisticsOneShotByNameRequest, opts ...grpc.CallOption) (*ContainerStatisticsOneShotByNameReply, error) {
	out := new(ContainerStatisticsOneShotByNameReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerStatisticsOneShotByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ContainerStop(ctx context.Context, in *ContainerStopRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ContainerStopAndRemove(ctx context.Context, in *ContainerStopAndRemoveRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerStopAndRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ContainerWaitStatusNotRunning(ctx context.Context, in *ContainerWaitStatusNotRunningRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerWaitStatusNotRunning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) NetworkCreate(ctx context.Context, in *NetworkCreateRequest, opts ...grpc.CallOption) (*NetworkCreateReply, error) {
	out := new(NetworkCreateReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/NetworkCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) NetworkFindIdByName(ctx context.Context, in *NetworkFindIdByNameRequest, opts ...grpc.CallOption) (*NetworkFindIdByNameReply, error) {
	out := new(NetworkFindIdByNameReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/NetworkFindIdByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) NetworkList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NetworkListReply, error) {
	out := new(NetworkListReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/NetworkList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) NetworkRemove(ctx context.Context, in *NetworkRemoveRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/NetworkRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) NetworkRemoveByName(ctx context.Context, in *NetworkRemoveByNameRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/NetworkRemoveByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) NetworkInspect(ctx context.Context, in *NetworkInspectRequest, opts ...grpc.CallOption) (*NetworkInspectReply, error) {
	out := new(NetworkInspectReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/NetworkInspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ImageGarbageCollector(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ImageGarbageCollector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ImageBuildFromRemoteServer(ctx context.Context, in *ImageBuildFromRemoteServerRequest, opts ...grpc.CallOption) (*ImageBuildFromRemoteServerReply, error) {
	out := new(ImageBuildFromRemoteServerReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ImageBuildFromRemoteServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ImageBuildFromRemoteServerStatus(ctx context.Context, in *ImageOrContainerBuildPullStatusRequest, opts ...grpc.CallOption) (*ImageOrContainerBuildPullStatusReply, error) {
	out := new(ImageOrContainerBuildPullStatusReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ImageBuildFromRemoteServerStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ImageFindIdByName(ctx context.Context, in *ImageFindIdByNameRequest, opts ...grpc.CallOption) (*ImageFindIdByNameReply, error) {
	out := new(ImageFindIdByNameReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ImageFindIdByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ImageList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ImageListReply, error) {
	out := new(ImageListReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ImageList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ImageListExposedPorts(ctx context.Context, in *ImageListExposedPortsRequest, opts ...grpc.CallOption) (*ImageListExposedPortsReply, error) {
	out := new(ImageListExposedPortsReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ImageListExposedPorts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ImageListExposedPortsByName(ctx context.Context, in *ImageListExposedPortsByNameRequest, opts ...grpc.CallOption) (*ImageListExposedPortsByNameReply, error) {
	out := new(ImageListExposedPortsByNameReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ImageListExposedPortsByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ImageListExposedVolumes(ctx context.Context, in *ImageListExposedVolumesRequest, opts ...grpc.CallOption) (*ImageListExposedVolumesReply, error) {
	out := new(ImageListExposedVolumesReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ImageListExposedVolumes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ImageListExposedVolumesByName(ctx context.Context, in *ImageListExposedVolumesByNameRequest, opts ...grpc.CallOption) (*ImageListExposedVolumesByNameReply, error) {
	out := new(ImageListExposedVolumesByNameReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ImageListExposedVolumesByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ImageMountNatPortList(ctx context.Context, in *ImageMountNatPortListRequest, opts ...grpc.CallOption) (*ImageMountNatPortListReply, error) {
	out := new(ImageMountNatPortListReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ImageMountNatPortList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ImageMountNatPortListChangeExposed(ctx context.Context, in *ImageMountNatPortListChangeExposedRequest, opts ...grpc.CallOption) (*ImageMountNatPortListChangeExposedReply, error) {
	out := new(ImageMountNatPortListChangeExposedReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ImageMountNatPortListChangeExposed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ImageMountNatPortListChangeExposedWithIpAddress(ctx context.Context, in *ImageMountNatPortListChangeExposedWithIpAddressRequest, opts ...grpc.CallOption) (*ImageMountNatPortListChangeExposedWithIpAddressReply, error) {
	out := new(ImageMountNatPortListChangeExposedWithIpAddressReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ImageMountNatPortListChangeExposedWithIpAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ImagePull(ctx context.Context, in *ImagePullRequest, opts ...grpc.CallOption) (*ImagePullReply, error) {
	out := new(ImagePullReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ImagePull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ImageRemove(ctx context.Context, in *ImageRemoveRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ImageRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) ImageRemoveByName(ctx context.Context, in *ImageRemoveByNameRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ImageRemoveByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DockerServerServer is the server API for DockerServer service.
type DockerServerServer interface {
	ContainerCreate(context.Context, *ContainerCreateRequest) (*ContainerCreateReply, error)
	ContainerCreateAndChangeExposedPort(context.Context, *ContainerCreateAndChangeExposedPortRequest) (*ContainerCreateAndChangeExposedPortReply, error)
	ContainerInspect(context.Context, *ContainerInspectRequest) (*ContainerInspectReply, error)
	ContainerCreateAndExposePortsAutomatically(context.Context, *ContainerCreateAndExposePortsAutomaticallyRequest) (*ContainerCreateAndExposePortsAutomaticallyReply, error)
	ContainerCreateAndStart(context.Context, *ContainerCreateAndStartRequest) (*ContainerCreateAndStartReply, error)
	ContainerCreateChangeExposedPortAndStart(context.Context, *ContainerCreateChangeExposedPortAndStartRequest) (*ContainerCreateChangeExposedPortAndStartReply, error)
	ContainerCreateExposePortsAutomaticallyAndStart(context.Context, *ContainerCreateExposePortsAutomaticallyAndStartRequest) (*ContainerCreateExposePortsAutomaticallyAndStartReply, error)
	ContainerCreateWithoutExposePorts(context.Context, *ContainerCreateWithoutExposePortsRequest) (*ContainerCreateWithoutExposePortsReply, error)
	ContainerCreateWithoutExposePortsAndStart(context.Context, *ContainerCreateWithoutExposePortsAndStartRequest) (*ContainerCreateWithoutExposePortsAndStartReply, error)
	ContainerFindIdByName(context.Context, *ContainerFindIdByNameRequest) (*ContainerFindIdByNameReply, error)
	ContainerFindIdByNameContains(context.Context, *ContainerFindIdByNameContainsRequest) (*ContainerFindIdByNameContainsReply, error)
	ContainerInspectByName(context.Context, *ContainerInspectByNameRequest) (*ContainerInspectByNameReply, error)
	ContainerInspectByNameContains(context.Context, *ContainerInspectByNameContainsRequest) (*ContainerInspectByNameContainsReply, error)
	ContainerInspectJSon(context.Context, *ContainerInspectJSonRequest) (*ContainerInspectJSonReply, error)
	ContainerInspectJSonByName(context.Context, *ContainerInspectJSonByNameRequest) (*ContainerInspectJSonByNameReply, error)
	ContainerListAll(context.Context, *Empty) (*ContainerListAllReply, error)
	ContainerListQuiet(context.Context, *Empty) (*ContainerListAllReply, error)
	ContainerRemove(context.Context, *ContainerRemoveRequest) (*Empty, error)
	ContainerStart(context.Context, *ContainerStartRequest) (*Empty, error)
	ContainerStatisticsOneShot(context.Context, *ContainerStatisticsOneShotRequest) (*ContainerStatisticsOneShotReply, error)
	ContainerStatisticsOneShotByName(context.Context, *ContainerStatisticsOneShotByNameRequest) (*ContainerStatisticsOneShotByNameReply, error)
	ContainerStop(context.Context, *ContainerStopRequest) (*Empty, error)
	ContainerStopAndRemove(context.Context, *ContainerStopAndRemoveRequest) (*Empty, error)
	ContainerWaitStatusNotRunning(context.Context, *ContainerWaitStatusNotRunningRequest) (*Empty, error)
	NetworkCreate(context.Context, *NetworkCreateRequest) (*NetworkCreateReply, error)
	NetworkFindIdByName(context.Context, *NetworkFindIdByNameRequest) (*NetworkFindIdByNameReply, error)
	NetworkList(context.Context, *Empty) (*NetworkListReply, error)
	NetworkRemove(context.Context, *NetworkRemoveRequest) (*Empty, error)
	NetworkRemoveByName(context.Context, *NetworkRemoveByNameRequest) (*Empty, error)
	NetworkInspect(context.Context, *NetworkInspectRequest) (*NetworkInspectReply, error)
	ImageGarbageCollector(context.Context, *Empty) (*Empty, error)
	ImageBuildFromRemoteServer(context.Context, *ImageBuildFromRemoteServerRequest) (*ImageBuildFromRemoteServerReply, error)
	ImageBuildFromRemoteServerStatus(context.Context, *ImageOrContainerBuildPullStatusRequest) (*ImageOrContainerBuildPullStatusReply, error)
	ImageFindIdByName(context.Context, *ImageFindIdByNameRequest) (*ImageFindIdByNameReply, error)
	ImageList(context.Context, *Empty) (*ImageListReply, error)
	ImageListExposedPorts(context.Context, *ImageListExposedPortsRequest) (*ImageListExposedPortsReply, error)
	ImageListExposedPortsByName(context.Context, *ImageListExposedPortsByNameRequest) (*ImageListExposedPortsByNameReply, error)
	ImageListExposedVolumes(context.Context, *ImageListExposedVolumesRequest) (*ImageListExposedVolumesReply, error)
	ImageListExposedVolumesByName(context.Context, *ImageListExposedVolumesByNameRequest) (*ImageListExposedVolumesByNameReply, error)
	ImageMountNatPortList(context.Context, *ImageMountNatPortListRequest) (*ImageMountNatPortListReply, error)
	ImageMountNatPortListChangeExposed(context.Context, *ImageMountNatPortListChangeExposedRequest) (*ImageMountNatPortListChangeExposedReply, error)
	ImageMountNatPortListChangeExposedWithIpAddress(context.Context, *ImageMountNatPortListChangeExposedWithIpAddressRequest) (*ImageMountNatPortListChangeExposedWithIpAddressReply, error)
	ImagePull(context.Context, *ImagePullRequest) (*ImagePullReply, error)
	ImageRemove(context.Context, *ImageRemoveRequest) (*Empty, error)
	ImageRemoveByName(context.Context, *ImageRemoveByNameRequest) (*Empty, error)
}

// UnimplementedDockerServerServer can be embedded to have forward compatible implementations.
type UnimplementedDockerServerServer struct {
}

func (*UnimplementedDockerServerServer) ContainerCreate(context.Context, *ContainerCreateRequest) (*ContainerCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerCreate not implemented")
}
func (*UnimplementedDockerServerServer) ContainerCreateAndChangeExposedPort(context.Context, *ContainerCreateAndChangeExposedPortRequest) (*ContainerCreateAndChangeExposedPortReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerCreateAndChangeExposedPort not implemented")
}
func (*UnimplementedDockerServerServer) ContainerInspect(context.Context, *ContainerInspectRequest) (*ContainerInspectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerInspect not implemented")
}
func (*UnimplementedDockerServerServer) ContainerCreateAndExposePortsAutomatically(context.Context, *ContainerCreateAndExposePortsAutomaticallyRequest) (*ContainerCreateAndExposePortsAutomaticallyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerCreateAndExposePortsAutomatically not implemented")
}
func (*UnimplementedDockerServerServer) ContainerCreateAndStart(context.Context, *ContainerCreateAndStartRequest) (*ContainerCreateAndStartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerCreateAndStart not implemented")
}
func (*UnimplementedDockerServerServer) ContainerCreateChangeExposedPortAndStart(context.Context, *ContainerCreateChangeExposedPortAndStartRequest) (*ContainerCreateChangeExposedPortAndStartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerCreateChangeExposedPortAndStart not implemented")
}
func (*UnimplementedDockerServerServer) ContainerCreateExposePortsAutomaticallyAndStart(context.Context, *ContainerCreateExposePortsAutomaticallyAndStartRequest) (*ContainerCreateExposePortsAutomaticallyAndStartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerCreateExposePortsAutomaticallyAndStart not implemented")
}
func (*UnimplementedDockerServerServer) ContainerCreateWithoutExposePorts(context.Context, *ContainerCreateWithoutExposePortsRequest) (*ContainerCreateWithoutExposePortsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerCreateWithoutExposePorts not implemented")
}
func (*UnimplementedDockerServerServer) ContainerCreateWithoutExposePortsAndStart(context.Context, *ContainerCreateWithoutExposePortsAndStartRequest) (*ContainerCreateWithoutExposePortsAndStartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerCreateWithoutExposePortsAndStart not implemented")
}
func (*UnimplementedDockerServerServer) ContainerFindIdByName(context.Context, *ContainerFindIdByNameRequest) (*ContainerFindIdByNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerFindIdByName not implemented")
}
func (*UnimplementedDockerServerServer) ContainerFindIdByNameContains(context.Context, *ContainerFindIdByNameContainsRequest) (*ContainerFindIdByNameContainsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerFindIdByNameContains not implemented")
}
func (*UnimplementedDockerServerServer) ContainerInspectByName(context.Context, *ContainerInspectByNameRequest) (*ContainerInspectByNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerInspectByName not implemented")
}
func (*UnimplementedDockerServerServer) ContainerInspectByNameContains(context.Context, *ContainerInspectByNameContainsRequest) (*ContainerInspectByNameContainsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerInspectByNameContains not implemented")
}
func (*UnimplementedDockerServerServer) ContainerInspectJSon(context.Context, *ContainerInspectJSonRequest) (*ContainerInspectJSonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerInspectJSon not implemented")
}
func (*UnimplementedDockerServerServer) ContainerInspectJSonByName(context.Context, *ContainerInspectJSonByNameRequest) (*ContainerInspectJSonByNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerInspectJSonByName not implemented")
}
func (*UnimplementedDockerServerServer) ContainerListAll(context.Context, *Empty) (*ContainerListAllReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerListAll not implemented")
}
func (*UnimplementedDockerServerServer) ContainerListQuiet(context.Context, *Empty) (*ContainerListAllReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerListQuiet not implemented")
}
func (*UnimplementedDockerServerServer) ContainerRemove(context.Context, *ContainerRemoveRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerRemove not implemented")
}
func (*UnimplementedDockerServerServer) ContainerStart(context.Context, *ContainerStartRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerStart not implemented")
}
func (*UnimplementedDockerServerServer) ContainerStatisticsOneShot(context.Context, *ContainerStatisticsOneShotRequest) (*ContainerStatisticsOneShotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerStatisticsOneShot not implemented")
}
func (*UnimplementedDockerServerServer) ContainerStatisticsOneShotByName(context.Context, *ContainerStatisticsOneShotByNameRequest) (*ContainerStatisticsOneShotByNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerStatisticsOneShotByName not implemented")
}
func (*UnimplementedDockerServerServer) ContainerStop(context.Context, *ContainerStopRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerStop not implemented")
}
func (*UnimplementedDockerServerServer) ContainerStopAndRemove(context.Context, *ContainerStopAndRemoveRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerStopAndRemove not implemented")
}
func (*UnimplementedDockerServerServer) ContainerWaitStatusNotRunning(context.Context, *ContainerWaitStatusNotRunningRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerWaitStatusNotRunning not implemented")
}
func (*UnimplementedDockerServerServer) NetworkCreate(context.Context, *NetworkCreateRequest) (*NetworkCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkCreate not implemented")
}
func (*UnimplementedDockerServerServer) NetworkFindIdByName(context.Context, *NetworkFindIdByNameRequest) (*NetworkFindIdByNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkFindIdByName not implemented")
}
func (*UnimplementedDockerServerServer) NetworkList(context.Context, *Empty) (*NetworkListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkList not implemented")
}
func (*UnimplementedDockerServerServer) NetworkRemove(context.Context, *NetworkRemoveRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkRemove not implemented")
}
func (*UnimplementedDockerServerServer) NetworkRemoveByName(context.Context, *NetworkRemoveByNameRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkRemoveByName not implemented")
}
func (*UnimplementedDockerServerServer) NetworkInspect(context.Context, *NetworkInspectRequest) (*NetworkInspectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkInspect not implemented")
}
func (*UnimplementedDockerServerServer) ImageGarbageCollector(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageGarbageCollector not implemented")
}
func (*UnimplementedDockerServerServer) ImageBuildFromRemoteServer(context.Context, *ImageBuildFromRemoteServerRequest) (*ImageBuildFromRemoteServerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageBuildFromRemoteServer not implemented")
}
func (*UnimplementedDockerServerServer) ImageBuildFromRemoteServerStatus(context.Context, *ImageOrContainerBuildPullStatusRequest) (*ImageOrContainerBuildPullStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageBuildFromRemoteServerStatus not implemented")
}
func (*UnimplementedDockerServerServer) ImageFindIdByName(context.Context, *ImageFindIdByNameRequest) (*ImageFindIdByNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageFindIdByName not implemented")
}
func (*UnimplementedDockerServerServer) ImageList(context.Context, *Empty) (*ImageListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageList not implemented")
}
func (*UnimplementedDockerServerServer) ImageListExposedPorts(context.Context, *ImageListExposedPortsRequest) (*ImageListExposedPortsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageListExposedPorts not implemented")
}
func (*UnimplementedDockerServerServer) ImageListExposedPortsByName(context.Context, *ImageListExposedPortsByNameRequest) (*ImageListExposedPortsByNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageListExposedPortsByName not implemented")
}
func (*UnimplementedDockerServerServer) ImageListExposedVolumes(context.Context, *ImageListExposedVolumesRequest) (*ImageListExposedVolumesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageListExposedVolumes not implemented")
}
func (*UnimplementedDockerServerServer) ImageListExposedVolumesByName(context.Context, *ImageListExposedVolumesByNameRequest) (*ImageListExposedVolumesByNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageListExposedVolumesByName not implemented")
}
func (*UnimplementedDockerServerServer) ImageMountNatPortList(context.Context, *ImageMountNatPortListRequest) (*ImageMountNatPortListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageMountNatPortList not implemented")
}
func (*UnimplementedDockerServerServer) ImageMountNatPortListChangeExposed(context.Context, *ImageMountNatPortListChangeExposedRequest) (*ImageMountNatPortListChangeExposedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageMountNatPortListChangeExposed not implemented")
}
func (*UnimplementedDockerServerServer) ImageMountNatPortListChangeExposedWithIpAddress(context.Context, *ImageMountNatPortListChangeExposedWithIpAddressRequest) (*ImageMountNatPortListChangeExposedWithIpAddressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageMountNatPortListChangeExposedWithIpAddress not implemented")
}
func (*UnimplementedDockerServerServer) ImagePull(context.Context, *ImagePullRequest) (*ImagePullReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImagePull not implemented")
}
func (*UnimplementedDockerServerServer) ImageRemove(context.Context, *ImageRemoveRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageRemove not implemented")
}
func (*UnimplementedDockerServerServer) ImageRemoveByName(context.Context, *ImageRemoveByNameRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageRemoveByName not implemented")
}

func RegisterDockerServerServer(s *grpc.Server, srv DockerServerServer) {
	s.RegisterService(&_DockerServer_serviceDesc, srv)
}

func _DockerServer_ContainerCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ContainerCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ContainerCreate(ctx, req.(*ContainerCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ContainerCreateAndChangeExposedPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerCreateAndChangeExposedPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ContainerCreateAndChangeExposedPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerCreateAndChangeExposedPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ContainerCreateAndChangeExposedPort(ctx, req.(*ContainerCreateAndChangeExposedPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ContainerInspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerInspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ContainerInspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerInspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ContainerInspect(ctx, req.(*ContainerInspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ContainerCreateAndExposePortsAutomatically_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerCreateAndExposePortsAutomaticallyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ContainerCreateAndExposePortsAutomatically(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerCreateAndExposePortsAutomatically",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ContainerCreateAndExposePortsAutomatically(ctx, req.(*ContainerCreateAndExposePortsAutomaticallyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ContainerCreateAndStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerCreateAndStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ContainerCreateAndStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerCreateAndStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ContainerCreateAndStart(ctx, req.(*ContainerCreateAndStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ContainerCreateChangeExposedPortAndStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerCreateChangeExposedPortAndStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ContainerCreateChangeExposedPortAndStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerCreateChangeExposedPortAndStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ContainerCreateChangeExposedPortAndStart(ctx, req.(*ContainerCreateChangeExposedPortAndStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ContainerCreateExposePortsAutomaticallyAndStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerCreateExposePortsAutomaticallyAndStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ContainerCreateExposePortsAutomaticallyAndStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerCreateExposePortsAutomaticallyAndStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ContainerCreateExposePortsAutomaticallyAndStart(ctx, req.(*ContainerCreateExposePortsAutomaticallyAndStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ContainerCreateWithoutExposePorts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerCreateWithoutExposePortsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ContainerCreateWithoutExposePorts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerCreateWithoutExposePorts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ContainerCreateWithoutExposePorts(ctx, req.(*ContainerCreateWithoutExposePortsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ContainerCreateWithoutExposePortsAndStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerCreateWithoutExposePortsAndStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ContainerCreateWithoutExposePortsAndStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerCreateWithoutExposePortsAndStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ContainerCreateWithoutExposePortsAndStart(ctx, req.(*ContainerCreateWithoutExposePortsAndStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ContainerFindIdByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerFindIdByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ContainerFindIdByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerFindIdByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ContainerFindIdByName(ctx, req.(*ContainerFindIdByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ContainerFindIdByNameContains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerFindIdByNameContainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ContainerFindIdByNameContains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerFindIdByNameContains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ContainerFindIdByNameContains(ctx, req.(*ContainerFindIdByNameContainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ContainerInspectByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerInspectByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ContainerInspectByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerInspectByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ContainerInspectByName(ctx, req.(*ContainerInspectByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ContainerInspectByNameContains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerInspectByNameContainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ContainerInspectByNameContains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerInspectByNameContains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ContainerInspectByNameContains(ctx, req.(*ContainerInspectByNameContainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ContainerInspectJSon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerInspectJSonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ContainerInspectJSon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerInspectJSon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ContainerInspectJSon(ctx, req.(*ContainerInspectJSonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ContainerInspectJSonByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerInspectJSonByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ContainerInspectJSonByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerInspectJSonByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ContainerInspectJSonByName(ctx, req.(*ContainerInspectJSonByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ContainerListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ContainerListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerListAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ContainerListAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ContainerListQuiet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ContainerListQuiet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerListQuiet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ContainerListQuiet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ContainerRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ContainerRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ContainerRemove(ctx, req.(*ContainerRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ContainerStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ContainerStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ContainerStart(ctx, req.(*ContainerStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ContainerStatisticsOneShot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerStatisticsOneShotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ContainerStatisticsOneShot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerStatisticsOneShot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ContainerStatisticsOneShot(ctx, req.(*ContainerStatisticsOneShotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ContainerStatisticsOneShotByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerStatisticsOneShotByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ContainerStatisticsOneShotByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerStatisticsOneShotByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ContainerStatisticsOneShotByName(ctx, req.(*ContainerStatisticsOneShotByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ContainerStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ContainerStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ContainerStop(ctx, req.(*ContainerStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ContainerStopAndRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerStopAndRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ContainerStopAndRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerStopAndRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ContainerStopAndRemove(ctx, req.(*ContainerStopAndRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ContainerWaitStatusNotRunning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerWaitStatusNotRunningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ContainerWaitStatusNotRunning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerWaitStatusNotRunning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ContainerWaitStatusNotRunning(ctx, req.(*ContainerWaitStatusNotRunningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_NetworkCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).NetworkCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/NetworkCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).NetworkCreate(ctx, req.(*NetworkCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_NetworkFindIdByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkFindIdByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).NetworkFindIdByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/NetworkFindIdByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).NetworkFindIdByName(ctx, req.(*NetworkFindIdByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_NetworkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).NetworkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/NetworkList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).NetworkList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_NetworkRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).NetworkRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/NetworkRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).NetworkRemove(ctx, req.(*NetworkRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_NetworkRemoveByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkRemoveByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).NetworkRemoveByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/NetworkRemoveByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).NetworkRemoveByName(ctx, req.(*NetworkRemoveByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_NetworkInspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkInspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).NetworkInspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/NetworkInspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).NetworkInspect(ctx, req.(*NetworkInspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ImageGarbageCollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ImageGarbageCollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ImageGarbageCollector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ImageGarbageCollector(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ImageBuildFromRemoteServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageBuildFromRemoteServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ImageBuildFromRemoteServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ImageBuildFromRemoteServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ImageBuildFromRemoteServer(ctx, req.(*ImageBuildFromRemoteServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ImageBuildFromRemoteServerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageOrContainerBuildPullStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ImageBuildFromRemoteServerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ImageBuildFromRemoteServerStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ImageBuildFromRemoteServerStatus(ctx, req.(*ImageOrContainerBuildPullStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ImageFindIdByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageFindIdByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ImageFindIdByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ImageFindIdByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ImageFindIdByName(ctx, req.(*ImageFindIdByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ImageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ImageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ImageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ImageList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ImageListExposedPorts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageListExposedPortsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ImageListExposedPorts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ImageListExposedPorts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ImageListExposedPorts(ctx, req.(*ImageListExposedPortsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ImageListExposedPortsByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageListExposedPortsByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ImageListExposedPortsByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ImageListExposedPortsByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ImageListExposedPortsByName(ctx, req.(*ImageListExposedPortsByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ImageListExposedVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageListExposedVolumesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ImageListExposedVolumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ImageListExposedVolumes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ImageListExposedVolumes(ctx, req.(*ImageListExposedVolumesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ImageListExposedVolumesByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageListExposedVolumesByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ImageListExposedVolumesByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ImageListExposedVolumesByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ImageListExposedVolumesByName(ctx, req.(*ImageListExposedVolumesByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ImageMountNatPortList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageMountNatPortListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ImageMountNatPortList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ImageMountNatPortList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ImageMountNatPortList(ctx, req.(*ImageMountNatPortListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ImageMountNatPortListChangeExposed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageMountNatPortListChangeExposedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ImageMountNatPortListChangeExposed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ImageMountNatPortListChangeExposed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ImageMountNatPortListChangeExposed(ctx, req.(*ImageMountNatPortListChangeExposedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ImageMountNatPortListChangeExposedWithIpAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageMountNatPortListChangeExposedWithIpAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ImageMountNatPortListChangeExposedWithIpAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ImageMountNatPortListChangeExposedWithIpAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ImageMountNatPortListChangeExposedWithIpAddress(ctx, req.(*ImageMountNatPortListChangeExposedWithIpAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ImagePull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImagePullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ImagePull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ImagePull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ImagePull(ctx, req.(*ImagePullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ImageRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ImageRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ImageRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ImageRemove(ctx, req.(*ImageRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_ImageRemoveByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRemoveByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ImageRemoveByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ImageRemoveByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ImageRemoveByName(ctx, req.(*ImageRemoveByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DockerServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iotmakerDockerCommunicationGrpc.DockerServer",
	HandlerType: (*DockerServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ContainerCreate",
			Handler:    _DockerServer_ContainerCreate_Handler,
		},
		{
			MethodName: "ContainerCreateAndChangeExposedPort",
			Handler:    _DockerServer_ContainerCreateAndChangeExposedPort_Handler,
		},
		{
			MethodName: "ContainerInspect",
			Handler:    _DockerServer_ContainerInspect_Handler,
		},
		{
			MethodName: "ContainerCreateAndExposePortsAutomatically",
			Handler:    _DockerServer_ContainerCreateAndExposePortsAutomatically_Handler,
		},
		{
			MethodName: "ContainerCreateAndStart",
			Handler:    _DockerServer_ContainerCreateAndStart_Handler,
		},
		{
			MethodName: "ContainerCreateChangeExposedPortAndStart",
			Handler:    _DockerServer_ContainerCreateChangeExposedPortAndStart_Handler,
		},
		{
			MethodName: "ContainerCreateExposePortsAutomaticallyAndStart",
			Handler:    _DockerServer_ContainerCreateExposePortsAutomaticallyAndStart_Handler,
		},
		{
			MethodName: "ContainerCreateWithoutExposePorts",
			Handler:    _DockerServer_ContainerCreateWithoutExposePorts_Handler,
		},
		{
			MethodName: "ContainerCreateWithoutExposePortsAndStart",
			Handler:    _DockerServer_ContainerCreateWithoutExposePortsAndStart_Handler,
		},
		{
			MethodName: "ContainerFindIdByName",
			Handler:    _DockerServer_ContainerFindIdByName_Handler,
		},
		{
			MethodName: "ContainerFindIdByNameContains",
			Handler:    _DockerServer_ContainerFindIdByNameContains_Handler,
		},
		{
			MethodName: "ContainerInspectByName",
			Handler:    _DockerServer_ContainerInspectByName_Handler,
		},
		{
			MethodName: "ContainerInspectByNameContains",
			Handler:    _DockerServer_ContainerInspectByNameContains_Handler,
		},
		{
			MethodName: "ContainerInspectJSon",
			Handler:    _DockerServer_ContainerInspectJSon_Handler,
		},
		{
			MethodName: "ContainerInspectJSonByName",
			Handler:    _DockerServer_ContainerInspectJSonByName_Handler,
		},
		{
			MethodName: "ContainerListAll",
			Handler:    _DockerServer_ContainerListAll_Handler,
		},
		{
			MethodName: "ContainerListQuiet",
			Handler:    _DockerServer_ContainerListQuiet_Handler,
		},
		{
			MethodName: "ContainerRemove",
			Handler:    _DockerServer_ContainerRemove_Handler,
		},
		{
			MethodName: "ContainerStart",
			Handler:    _DockerServer_ContainerStart_Handler,
		},
		{
			MethodName: "ContainerStatisticsOneShot",
			Handler:    _DockerServer_ContainerStatisticsOneShot_Handler,
		},
		{
			MethodName: "ContainerStatisticsOneShotByName",
			Handler:    _DockerServer_ContainerStatisticsOneShotByName_Handler,
		},
		{
			MethodName: "ContainerStop",
			Handler:    _DockerServer_ContainerStop_Handler,
		},
		{
			MethodName: "ContainerStopAndRemove",
			Handler:    _DockerServer_ContainerStopAndRemove_Handler,
		},
		{
			MethodName: "ContainerWaitStatusNotRunning",
			Handler:    _DockerServer_ContainerWaitStatusNotRunning_Handler,
		},
		{
			MethodName: "NetworkCreate",
			Handler:    _DockerServer_NetworkCreate_Handler,
		},
		{
			MethodName: "NetworkFindIdByName",
			Handler:    _DockerServer_NetworkFindIdByName_Handler,
		},
		{
			MethodName: "NetworkList",
			Handler:    _DockerServer_NetworkList_Handler,
		},
		{
			MethodName: "NetworkRemove",
			Handler:    _DockerServer_NetworkRemove_Handler,
		},
		{
			MethodName: "NetworkRemoveByName",
			Handler:    _DockerServer_NetworkRemoveByName_Handler,
		},
		{
			MethodName: "NetworkInspect",
			Handler:    _DockerServer_NetworkInspect_Handler,
		},
		{
			MethodName: "ImageGarbageCollector",
			Handler:    _DockerServer_ImageGarbageCollector_Handler,
		},
		{
			MethodName: "ImageBuildFromRemoteServer",
			Handler:    _DockerServer_ImageBuildFromRemoteServer_Handler,
		},
		{
			MethodName: "ImageBuildFromRemoteServerStatus",
			Handler:    _DockerServer_ImageBuildFromRemoteServerStatus_Handler,
		},
		{
			MethodName: "ImageFindIdByName",
			Handler:    _DockerServer_ImageFindIdByName_Handler,
		},
		{
			MethodName: "ImageList",
			Handler:    _DockerServer_ImageList_Handler,
		},
		{
			MethodName: "ImageListExposedPorts",
			Handler:    _DockerServer_ImageListExposedPorts_Handler,
		},
		{
			MethodName: "ImageListExposedPortsByName",
			Handler:    _DockerServer_ImageListExposedPortsByName_Handler,
		},
		{
			MethodName: "ImageListExposedVolumes",
			Handler:    _DockerServer_ImageListExposedVolumes_Handler,
		},
		{
			MethodName: "ImageListExposedVolumesByName",
			Handler:    _DockerServer_ImageListExposedVolumesByName_Handler,
		},
		{
			MethodName: "ImageMountNatPortList",
			Handler:    _DockerServer_ImageMountNatPortList_Handler,
		},
		{
			MethodName: "ImageMountNatPortListChangeExposed",
			Handler:    _DockerServer_ImageMountNatPortListChangeExposed_Handler,
		},
		{
			MethodName: "ImageMountNatPortListChangeExposedWithIpAddress",
			Handler:    _DockerServer_ImageMountNatPortListChangeExposedWithIpAddress_Handler,
		},
		{
			MethodName: "ImagePull",
			Handler:    _DockerServer_ImagePull_Handler,
		},
		{
			MethodName: "ImageRemove",
			Handler:    _DockerServer_ImageRemove_Handler,
		},
		{
			MethodName: "ImageRemoveByName",
			Handler:    _DockerServer_ImageRemoveByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gRpcServer.proto",
}
