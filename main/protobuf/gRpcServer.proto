//protoc --go_opt=paths=source_relative --go_out=plugins=grpc:. *.proto
syntax = "proto3";

option go_package = "github.com/helmutkemper/iotmaker_docker_communication_grpc";

package iotmakerDockerCommunicationGrpc;

message ContainerJSON {
  ContainerJSONBase ContainerJSONBase = 1;
  repeated MountPoint Mounts = 2;
  Config Config = 3;
  NetworkSettings NetworkSettings = 4;
}

message ContainerJSONBase {
  string ID = 1;
  string Created = 2;
  string Path = 3;
  repeated string Args = 4;
  ContainerState State = 5;
  string Image = 6;
  string ResolvConfPath = 7;
  string HostnamePath = 8;
  string HostsPath = 9;
  string LogPath = 10;
  ContainerNode Node = 11;
  string Name = 12;
  int64 RestartCount = 13;
  string Driver = 14;
  string Platform = 15;
  string MountLabel = 16;
  string ProcessLabel = 17;
  string AppArmorProfile = 18;
  repeated string ExecIDs = 19;
  HostConfig HostConfig = 20;
  GraphDriverData GraphDriver = 21;
  int64 SizeRw = 22;
  int64 SizeRootFs = 23;
}

message MountPoint {
  string Type = 1;
  string Name = 2;
  string Source = 3;
  string Destination = 4;
  string Driver = 5;
  string Mode = 6;
  bool RW = 7;
  string Propagation = 8;
}

message Config {
  string Hostname = 1;
  string Domainname = 2;
  string User = 3;
  bool AttachStdin = 4;
  bool AttachStdout = 5;
  bool AttachStderr = 6;
  map<string, Struct> ExposedPorts = 7;
  bool Tty = 8;
  bool OpenStdin = 9;
  bool StdinOnce = 10;
  repeated string Env = 11;
  repeated string Cmd = 12;
  HealthConfig Healthcheck = 13;
  bool ArgsEscaped = 14;
  string Image = 15;
  map<string, Struct> Volumes = 16;
  string WorkingDir = 17;
  repeated string Entrypoint = 18;
  bool NetworkDisabled = 19;
  string MacAddress = 20;
  repeated string OnBuild = 21;
  map<string, string> Labels = 22;
  string StopSignal = 23;
  int64 StopTimeout = 24;
  repeated string Shell = 25;
}

message Struct {

}

message NetworkSettings {
  NetworkSettingsBase NetworkSettingsBase = 1;
  DefaultNetworkSettings DefaultNetworkSettings = 2;
  map<string, EndpointSettings> Networks = 3;
}

message NetworkingConfig {
  map<string, EndpointSettings> Networks = 1;
}

message ContainerState {
  string Status = 1;
  bool Running = 2;
  bool Paused = 3;
  bool Restarting = 4;
  bool OOMKilled = 5;
  bool Dead = 6;
  int64 Pid = 7;
  int64 ExitCode = 8;
  string Error = 9;
  string StartedAt = 10;
  string FinishedAt = 11;
  Health Health = 12;
}

message ContainerNode {
  string ID = 1;
  string IPAddress = 2;
  string Addr = 3;
  string Name = 4;
  int64 Cpus = 5;
  int64 Memory = 6;
  map<string, string> Labels = 7;
}

message ContainerPort {
  // Host IP address that the container's port is mapped to
  string IP = 1;

  // Port on the container
  // Required: true
  uint32 PrivatePort = 2;

  // Port exposed on the host
  uint32 PublicPort = 3;

  // type
  // Required: true
  string Type = 4;
}

message Port {
  string Port = 1;
  string Protocol = 2;
}

//port_number/protocol
message PortMap {
  map<string, PortBindingList> Port = 1;
}

message PortBinding {
  string HostIP = 1;
  string HostPort = 2;
}

message PortBindingList {
  repeated PortBinding PortBinding = 1;
}

message HostConfig {
  repeated string Binds = 1;
  string ContainerIDFile = 2;
  LogConfig LogConfig = 3;
  string NetworkMode = 4;
  PortMap PortBindings = 5;
  RestartPolicy RestartPolicy = 6;
  bool AutoRemove = 7;
  string VolumeDriver = 8;
  repeated string VolumesFrom = 9;
  repeated string CapAdd = 10;
  repeated string CapDrop = 11;
  repeated string Capabilities = 12;
  repeated string DNS = 13;
  repeated string DNSOptions = 14;
  repeated string DNSSearch = 15;
  repeated string ExtraHosts = 16;
  repeated string GroupAdd = 17;
  string IpcMode = 18;
  string Cgroup = 19;
  repeated string Links = 20;
  int64 OomScoreAdj = 21;
  string PidMode = 22;
  bool Privileged = 23;
  bool PublishAllPorts = 24;
  bool ReadonlyRootfs = 25;
  repeated string SecurityOpt = 26;
  map<string, string> StorageOpt = 27;
  map<string, string> Tmpfs = 28;
  string UTSMode = 29;
  string UsernsMode = 30;
  int64 ShmSize = 31;
  map<string, string> Sysctls = 32;
  string Runtime = 33;
  string Isolation = 35;
  Resources Resources = 36;
  repeated MountPoint Mounts = 37;
}

message GraphDriverData {
  map<string, string> Data = 1;
  string Name = 2;
}

message HealthConfig {
  repeated string Test = 1;
  int64 Interval = 2;
  int64 Timeout = 3;
  int64 StartPeriod = 4;
  int64 Retries = 5;
}

message NetworkSettingsBase {
  string Bridge = 1;
  string SandboxID = 2;
  bool HairpinMode = 3;
  string LinkLocalIPv6Address = 4;
  int64 LinkLocalIPv6PrefixLen = 5;
  PortMap Ports = 6;
  string SandboxKey = 7;
  repeated Address SecondaryIPAddresses = 8;
  repeated Address SecondaryIPv6Addresses = 9;
}

message Address {
  string Addr = 1;
  int64 PrefixLen = 2;
}

message DefaultNetworkSettings {
  string EndpointID = 1;
  string Gateway = 2;
  string GlobalIPv6Address = 3;
  int64 GlobalIPv6PrefixLen = 4;
  string IPAddress = 5;
  int64 IPPrefixLen = 6;
  string IPv6Gateway = 7;
  string MacAddress = 8;
}

message EndpointSettings {
  EndpointIPAMConfig IPAMConfig = 1;
  repeated string Links = 2;
  repeated string Aliases = 3;
  string NetworkID = 4;
  string EndpointID = 5;
  string Gateway = 6;
  string IPAddress = 7;
  int64 IPPrefixLen = 8;
  string IPv6Gateway = 9;
  string GlobalIPv6Address = 10;
  int64 GlobalIPv6PrefixLen = 11;
  string MacAddress = 12;
  map<string, string> DriverOpts = 13;
}

message Health {
  string Status = 1;
  int64 FailingStreak = 2;
  repeated HealthcheckResult Log = 3;
}

message LogConfig {
  string Type = 1;
  map<string, string> Config = 2;
}

message RestartPolicy {
  string Name = 1;
  int64 MaximumRetryCount = 2;
}

message Resources {
  int64 CPUShares = 1;
  int64 Memory = 2;
  int64 NanoCPUs = 3;
  string CgroupParent = 4;
  uint32 BlkioWeight = 5;
  repeated WeightDevice BlkioWeightDevice = 6;
  repeated ThrottleDevice BlkioDeviceReadBps = 7;
  repeated ThrottleDevice BlkioDeviceWriteBps = 8;
  repeated ThrottleDevice BlkioDeviceReadIOps = 9;
  repeated ThrottleDevice BlkioDeviceWriteIOps = 10;
  int64 CPUPeriod = 11;
  int64 CPUQuota = 12;
  int64 CPURealtimePeriod = 13;
  int64 CPURealtimeRuntime = 14;
  string CpusetCpus = 15;
  string CpusetMems = 16;
  repeated DeviceMapping Devices = 17;
  repeated string DeviceCgroupRules = 18;
  repeated DeviceRequest DeviceRequests = 19;
  int64 KernelMemory = 20;
  int64 KernelMemoryTCP = 21;
  int64 MemoryReservation = 22;
  int64 MemorySwap = 23;
  int64 MemorySwappiness = 24;
  bool OomKillDisable = 25;
  int64 PidsLimit = 26;
  repeated Ulimit Ulimits = 27;
  int64 CPUCount = 28;
  int64 CPUPercent = 29;
  uint64 IOMaximumIOps = 30;
  uint64 IOMaximumBandwidth = 31;
}

message MountMount {
  string Type = 1;
  string Source = 2;
  repeated string Options = 3;
}

message Mount {
  string Type = 1;
  string Source = 2;
  string Target = 3;
  bool ReadOnly = 4;
  string Consistency = 5;
  BindOptions BindOptions = 6;
  VolumeOptions VolumeOptions = 7;
  TmpfsOptions TmpfsOptions = 8;
}

message EndpointIPAMConfig {
  string IPv4Address = 1;
  string IPv6Address = 2;
  repeated string LinkLocalIPs = 3;
}

message HealthcheckResult {
  int64 Start = 1;
  int64 End = 2;
  int64 ExitCode = 3;
  string Output = 4;
}

message Time {
  uint64 Wall = 1;
  int64 Ext = 2;
  Location Loc = 3;
}

message Zone {
  string Name = 1;
  int64 Offset = 2;
  bool IsDST = 3;
}

message Location {
  string Name = 1;
  repeated Zone Zone = 2;
  repeated ZoneTrans Tx = 3;
  int64 CacheStart = 4;
  int64 CacheEnd = 5;
  Zone CacheZone = 6;
}

message WeightDevice {
  string Path = 1;
  uint32 Weight = 2;
}

message ThrottleDevice {
  string Path = 1;
  uint64 Rate = 2;
}

message DeviceMapping {
  string PathOnHost = 1;
  string PathInContainer = 2;
  string CgroupPermissions = 3;
}

message DeviceRequest {
  string Driver = 1;
  int64 Count = 2;
  repeated string DeviceIDs = 3;
  repeated CapabilitiesList Capabilities = 4;
  map<string, string> Options = 5;
}

message CapabilitiesList {
  repeated string Capabilities = 1;
}

message Ulimit {
  string Name = 1;
  int64 Hard = 2;
  int64 Soft = 3;
}

message BindOptions {
  string Propagation = 1;
  bool NonRecursive = 2;
}

message Driver {
  string Name = 1;
  map<string, string> Options = 2;
}

message VolumeOptions {
  bool NoCopy = 1;
  map<string, string> Labels = 2;
  Driver DriverConfig = 3;
}

message TmpfsOptions {
  int64 SizeBytes = 1;
  uint32 Mode = 2;
}

message ZoneTrans {
    int64 When = 1;
    uint32 Index = 2;
    bool IsStd = 3;
    bool IsUtc = 4;
}

message NetworkResource {
  string Name = 1;
  string ID = 2;
  int64 Created = 3;
  string Scope = 4;
  string Driver = 5;
  bool EnableIPv6 = 6;
  IPAM IPAM = 7;
  bool Internal = 8;
  bool Attachable = 9;
  bool Ingress = 10;
  ConfigReference ConfigFrom = 11;
  bool ConfigOnly = 12;
  map<string, EndpointResource> Containers = 13;
  map<string, string> Options = 14;
  map<string, string> Labels = 15;
  repeated PeerInfo Peers = 16;
  map<string, ServiceInfo> Services = 17;
}

message IPAM {
  string Driver = 1;
  map<string, string> Options = 2;
  repeated IPAMConfig Config = 3;
}

message ConfigReference {
  string Network = 1;
}

message PeerInfo {
  string Name = 1;
  string IP = 2;
}

message IPAMConfig {
  string Subnet = 1;
  string IPRange = 2;
  string Gateway = 3;
  map<string, string> AuxAddress = 4;
}

message EndpointResource {
  string Name = 1;
  string EndpointID = 2;
  string MacAddress = 3;
  string IPv4Address = 4;
  string IPv6Address = 5;
}

message ServiceInfo {
  string VIP = 1;
  repeated string Ports = 2;
  int64 LocalLBIndex = 3;
  repeated Task Tasks = 4;
}

message Task {
  string Name = 1;
  string EndpointID = 2;
  string EndpointIP = 3;
  map<string, string>Info = 4;
}

message ContainerHostConfig {
  string NetworkMode = 1;
}

message SummaryNetworkSettings {
  map<string, EndpointSettings> Networks = 1;
}

message Container {
  string ID = 1;
  repeated string Names = 2;
  string Image = 3;
  string ImageID = 4;
  string Command = 5;
  int64 Created = 6;
  repeated ContainerPort Ports = 7;
  int64 SizeRw = 8;
  int64 SizeRootFs = 9;
  map<string, string> Labels = 10;
  string State = 11;
  string Status = 12;
  ContainerHostConfig HostConfig = 13;
  SummaryNetworkSettings NetworkSettings = 14;
  repeated MountPoint Mounts = 15;
}

message ContainerNetworkData {
  string Gateway = 1;
  string IPAddress = 2;
  string EndpointID = 3;
  string NetworkID = 4;
  string MacAddress = 5;
}

message BlkioStatEntry {
  uint64 Major = 1;
  uint64 Minor = 2;
  string Op = 3;
  uint64 Value = 4;
}

message BlkioStats {
  repeated BlkioStatEntry IoServiceBytesRecursive = 1;
  repeated BlkioStatEntry IoServicedRecursive = 2;
  repeated BlkioStatEntry IoQueuedRecursive = 3;
  repeated BlkioStatEntry IoServiceTimeRecursive = 4;
  repeated BlkioStatEntry IoWaitTimeRecursive = 5;
  repeated BlkioStatEntry IoMergedRecursive = 6;
  repeated BlkioStatEntry IoTimeRecursive = 7;
  repeated BlkioStatEntry SectorsRecursive = 8;
}

message StorageStats {
  uint64 ReadCountNormalized = 1;
  uint64 ReadSizeBytes = 2;
  uint64 WriteCountNormalized = 3;
  uint64 WriteSizeBytes = 4;
}

message CPUUsage {
  uint64 TotalUsage = 1;
  repeated uint64 PercpuUsage = 2;
  uint64 UsageInKernelmode = 3;
  uint64 UsageInUsermode = 4;
}

message ThrottlingData {
  uint64 Periods = 1;
  uint64 ThrottledPeriods = 2;
  uint64 ThrottledTime = 3;
}

message CPUStats {
  CPUUsage CPUUsage = 1;
  uint64 SystemUsage = 2;
  uint32 OnlineCPUs = 3;
  ThrottlingData ThrottlingData = 4;
}

message PidsStats {
  uint64 Current = 1;
  uint64 Limit = 2;
}

message MemoryStats {
  uint64 Usage = 1;
  uint64 MaxUsage = 2;
  map<string, uint64> Stats = 3;
  uint64 Failcnt = 4;
  uint64 Limit = 5;
  uint64 Commit = 6;
  uint64 CommitPeak = 7;
  uint64 PrivateWorkingSet = 8;

}

message Statistics {
  int64 Read = 1;
  int64 PreRead = 2;
  PidsStats PidsStats = 3;
  BlkioStats BlkioStats = 4;
  uint32 NumProcs = 5;
  StorageStats StorageStats = 6;
  CPUStats CPUStats = 7;
  CPUStats PreCPUStats = 8;
  MemoryStats MemoryStats = 9;
}

message ContainerInspectRequest {
  string ID = 1;
}

message ContainerInspectReply {
  ContainerJSON ContainerJSON = 1;
}

message NetworkInspectRequest {
  string ID = 1;
}

message NetworkInspectReply {
  NetworkResource NetworkResource = 1;
}

message ContainerCreateRequest {
  string ImageName = 1;
  string ContainerName = 2;
  string RestartPolicy = 3;
  PortMap PortExposedList = 4;
  repeated Mount MountVolumes = 5;
  string NetworkName = 6;
}

message ContainerCreateReply {
  string ContainerID = 1;
}

message ContainerCreateAndChangeExposedPortRequest {
  string ImageName = 1;
  string ContainerName = 2;
  string RestartPolicy = 3;
  repeated Mount MountVolumes = 4;
  string NetworkName = 5;
  repeated Port CurrentPort = 6;
  repeated Port ChangeToPort = 7;
}

message ContainerCreateAndChangeExposedPortReply {
  string ContainerID = 1;
}

message ContainerCreateAndExposePortsAutomaticallyRequest {
  string ImageName = 1;
  string ContainerName = 2;
  string RestartPolicy = 3;
  repeated Mount MountVolumes = 4;
  string NetworkName = 5;
}

message ContainerCreateAndExposePortsAutomaticallyReply {
  string ContainerID = 1;
}

message ContainerCreateAndStartRequest {
  string ImageName = 1;
  string ContainerName = 2;
  string RestartPolicy = 3;
  PortMap PortExposedList = 4;
  repeated Mount MountVolumes = 5;
  string NetworkName = 6;
}

message ContainerCreateAndStartReply {
  string ContainerID = 1;
}

message ContainerCreateChangeExposedPortAndStartRequest {
  string ImageName = 1;
  string ContainerName = 2;
  string RestartPolicy = 3;
  repeated Mount MountVolumes = 4;
  string NetworkName = 5;
  repeated Port CurrentPort = 6;
  repeated Port ChangeToPort = 7;
}

message ContainerCreateChangeExposedPortAndStartReply {
  string ContainerID = 1;
}

message ContainerCreateExposePortsAutomaticallyAndStartRequest {
  string ImageName = 1;
  string ContainerName = 2;
  string RestartPolicy = 3;
  repeated Mount MountVolumes = 4;
  string NetworkName = 5;
}

message ContainerCreateExposePortsAutomaticallyAndStartReply {
  string ContainerID = 1;
}

message ContainerCreateWithoutExposePortsRequest {
  string ImageName = 1;
  string ContainerName = 2;
  string RestartPolicy = 3;
  repeated Mount MountVolumes = 4;
  string NetworkName = 5;
}

message ContainerCreateWithoutExposePortsReply {
  string ContainerID = 1;
}

message ContainerCreateWithoutExposePortsAndStartRequest {
  string ImageName = 1;
  string ContainerName = 2;
  string RestartPolicy = 3;
  repeated Mount MountVolumes = 4;
  string NetworkName = 5;
}

message ContainerCreateWithoutExposePortsAndStartReply {
  string ContainerID = 1;
}

message ContainerFindIdByNameRequest {
  string Name = 1;
}

message ContainerFindIdByNameReply {
  string ContainerID = 1;
}

message ContainerFindIdByNameContainsRequest {
  string Name = 1;
}

message ContainerFindIdByNameContainsReply {
  string ContainerID = 1;
}

message ContainerInspectByNameRequest {
  string name = 1;
}

message ContainerInspectByNameReply {
  string ID = 1;
  ContainerJSON ContainerJSON = 2;
}

message ContainerInspectJSonRequest {
  string ID = 1;
}

message ContainerInspectJSonReply {
  string Inspect = 1;
}

message ContainerInspectJSonByNameRequest {
  string Name = 1;
}

message ContainerInspectJSonByNameReply {
  string Inspect = 1;
}

message Empty {

}

message ContainerListAllReply {
  repeated Container List = 1;
}

message ContainerNetworkInspectRequest {
  string ID = 1;
}

message ContainerNetworkInspectReply {
  map<string, ContainerNetworkData> List = 1;
}

message ContainerRemoveRequest {
  string ID = 1;
  bool RemoveVolumes = 2;
  bool RemoveLinks = 3;
  bool Force = 4;
}

message ContainerStartRequest {
  string ID = 1;
}

message ContainerStatisticsOneShotRequest {
  string ID = 1;
}

message ContainerStatisticsOneShotReply {
  Statistics Statistics = 1;
}

message ContainerStatisticsOneShotByNameRequest {
  string Name = 1;
}

message ContainerStatisticsOneShotByNameReply {
  Statistics Statistics = 1;
}

message ContainerStopRequest {
  string ID = 1;
}

message ContainerStopAndRemoveRequest {
  string ID = 1;
  bool RemoveVolumes = 2;
  bool RemoveLinks = 3;
  bool Force = 4;
}

message ContainerWaitStatusNotRunningRequest {
  string ID = 1;
}

message NetworkConnectRequest {
  string NetworkID = 1;
  string ContainerID = 2;
  EndpointSettings Config = 3;
}

message NetworkCreateRequest {
  string Name = 1;
  string NetworkDrive = 2;
  string Scope = 3;
  string Subnet = 4;
  string Gateway  = 5;
}

message NetworkCreateReply {
  string NetworkID = 1;
}

message NetworkFindIdByNameRequest {
  string Name = 1;
}

message NetworkFindIdByNameReply {
  string NetworkID = 1;
}

message NetworkListReply {
  repeated NetworkResource List = 1;
}

message NetworkRemoveRequest {
  string NetworkID = 1;
}

message NetworkRemoveByNameRequest {
  string Name = 1;
}

message ImageBuildFromRemoteServerRequest {
  string ServerPath = 1;
  string ImageNewName = 2;
  repeated string ImageTags = 3;
}

message ImageBuildFromRemoteServerReply {
  string ID = 1;
}

message ImageOrContainerBuildPullSubStatus {
  int64 Count = 1;
  int64 Current = 2;
  int64 Total = 3;
  double Percent = 4;
}

message ImageOrContainerBuildPullStatusRequest {
  string ID = 1;
}

message ImageOrContainerBuildPullStatusReply {
  int64 Waiting = 1;
  ImageOrContainerBuildPullSubStatus Downloading = 2;
  int64 VerifyingChecksum = 3;
  int64 DownloadComplete = 4;
  ImageOrContainerBuildPullSubStatus Extracting = 5;
  int64 PullComplete = 6;
  string ImageName = 7;
  string ImageID = 8;
  bool Closed = 9;
  string Stream = 10;
  bool successfullyBuildContainer = 11;
  bool successfullyBuildImage = 12;
}

service DockerServer {
  rpc ContainerCreate (ContainerCreateRequest) returns (ContainerCreateReply) {}
  rpc ContainerCreateAndChangeExposedPort (ContainerCreateAndChangeExposedPortRequest) returns (ContainerCreateAndChangeExposedPortReply) {}
  rpc ContainerInspect (ContainerInspectRequest) returns (ContainerInspectReply) {}
  rpc ContainerCreateAndExposePortsAutomatically (ContainerCreateAndExposePortsAutomaticallyRequest) returns (ContainerCreateAndExposePortsAutomaticallyReply) {}
  rpc ContainerCreateAndStart (ContainerCreateAndStartRequest) returns (ContainerCreateAndStartReply) {}
  rpc ContainerCreateChangeExposedPortAndStart (ContainerCreateChangeExposedPortAndStartRequest) returns (ContainerCreateChangeExposedPortAndStartReply) {}
  rpc ContainerCreateExposePortsAutomaticallyAndStart (ContainerCreateExposePortsAutomaticallyAndStartRequest) returns (ContainerCreateExposePortsAutomaticallyAndStartReply) {}
  rpc ContainerCreateWithoutExposePorts (ContainerCreateWithoutExposePortsRequest) returns (ContainerCreateWithoutExposePortsReply) {}
  rpc ContainerCreateWithoutExposePortsAndStart (ContainerCreateWithoutExposePortsAndStartRequest) returns (ContainerCreateWithoutExposePortsAndStartReply) {}
  rpc ContainerFindIdByName (ContainerFindIdByNameRequest) returns (ContainerFindIdByNameReply) {}
  rpc ContainerFindIdByNameContains (ContainerFindIdByNameContainsRequest) returns (ContainerFindIdByNameContainsReply) {}
  rpc ContainerInspectByName (ContainerInspectByNameRequest) returns (ContainerInspectByNameReply) {}
  rpc ContainerInspectJSon (ContainerInspectJSonRequest) returns (ContainerInspectJSonReply) {}
  rpc ContainerInspectJSonByName (ContainerInspectJSonByNameRequest) returns (ContainerInspectJSonByNameReply) {}
  rpc ContainerListAll (Empty) returns (ContainerListAllReply) {}
  rpc ContainerListQuiet (Empty) returns (ContainerListAllReply) {}
  rpc ContainerRemove (ContainerRemoveRequest) returns (Empty) {}
  rpc ContainerStart (ContainerStartRequest) returns (Empty) {}
  rpc ContainerStatisticsOneShot (ContainerStatisticsOneShotRequest) returns (ContainerStatisticsOneShotReply) {}
  rpc ContainerStatisticsOneShotByName (ContainerStatisticsOneShotByNameRequest) returns (ContainerStatisticsOneShotByNameReply) {}
  rpc ContainerStop (ContainerStopRequest) returns (Empty) {}
  rpc ContainerStopAndRemove (ContainerStopAndRemoveRequest) returns (Empty) {}
  rpc ContainerWaitStatusNotRunning (ContainerWaitStatusNotRunningRequest) returns (Empty) {}
  rpc NetworkCreate (NetworkCreateRequest) returns (NetworkCreateReply) {}
  rpc NetworkFindIdByName (NetworkFindIdByNameRequest) returns (NetworkFindIdByNameReply) {}
  rpc NetworkList (Empty) returns (NetworkListReply) {}
  rpc NetworkRemove (NetworkRemoveRequest) returns (Empty) {}
  rpc NetworkRemoveByName (NetworkRemoveByNameRequest) returns (Empty) {}
  rpc NetworkInspect (NetworkInspectRequest) returns (NetworkInspectReply) {}
  rpc ImageGarbageCollector (Empty) returns (Empty) {}
  rpc ImageBuildFromRemoteServer (ImageBuildFromRemoteServerRequest) returns (ImageBuildFromRemoteServerReply) {}
}
