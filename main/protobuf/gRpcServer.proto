//file:///C:/Program%20Files%20(x86)/Progress/Kendo%20UI%20for%20jQuery%20R2%202019/examples/index.html
//protoc --go_opt=paths=source_relative --go_out=plugins=grpc:. *.proto
syntax = "proto3";

option go_package = "github.com/helmutkemper/iotmaker_docker_communication_grpc";

package iotmakerDockerCommunicationGrpc;

message Port {
  string Port = 1;
  string Protocol = 2;
}

//port_number/protocol
message PortMap {
  map<string, PortBindingList> Port = 1;
}

message PortBinding {
  string HostIP = 1;
  string HostPort = 2;
}

message PortBindingList {
  repeated PortBinding PortBinding = 1;
}

message EndpointSettings {
  EndpointIPAMConfig IPAMConfig = 1;
  repeated string Links = 2;
  repeated string Aliases = 3;
  string NetworkID = 4;
  string EndpointID = 5;
  string Gateway = 6;
  string IPAddress = 7;
  int64 IPPrefixLen = 8;
  string IPv6Gateway = 9;
  string GlobalIPv6Address = 10;
  int64 GlobalIPv6PrefixLen = 11;
  string MacAddress = 12;
  map<string, string> DriverOpts = 13;
}

message Mount {
  string Type = 1;
  string Source = 2;
  string Target = 3;
  bool ReadOnly = 4;
  string Consistency = 5;
  BindOptions BindOptions = 6;
  VolumeOptions VolumeOptions = 7;
  TmpfsOptions TmpfsOptions = 8;
}

message EndpointIPAMConfig {
  string IPv4Address = 1;
  string IPv6Address = 2;
  repeated string LinkLocalIPs = 3;
}

message BindOptions {
  string Propagation = 1;
  bool NonRecursive = 2;
}

message Driver {
  string Name = 1;
  map<string, string> Options = 2;
}

message VolumeOptions {
  bool NoCopy = 1;
  map<string, string> Labels = 2;
  Driver DriverConfig = 3;
}

message TmpfsOptions {
  int64 SizeBytes = 1;
  uint32 Mode = 2;
}

message IPAMConfig {
  string Subnet = 1;
  string IPRange = 2;
  string Gateway = 3;
  map<string, string> AuxAddress = 4;
}

message ContainerInspectRequest {
  string ID = 1;
}

message ContainerInspectReply {
  bytes Data = 1;
}

message NetworkInspectRequest {
  string ID = 1;
}

message NetworkInspectReply {
  bytes Data = 1;
}

/*
{
  "ImageName": "",
  "ContainerName": "",
  "RestartPolicy": "",
  "PortExposedList": {
    "port_number/protocol": [
      {
        "PortBinding": {
          "HostIP": "",
          "HostPort": ""
        },
      },
    ]
  },
  "MountVolumes": {
    "Type": "",
    "Source": "",
    "Target": "",
    "ReadOnly": false,
    "Consistency": "",
    "BindOptions": {
      "Propagation": "",
      "NonRecursive": false
    },
    "VolumeOptions": {
      "NoCopy": false,
      "Labels": {
        "key": "value"
      },
      "DriverConfig": {
        "Name": "",
        "Options": {
          "key": "value"
        }
      }
    },
    "TmpfsOptions": {},
  },
  "NetworkName": "",
}
*/
message ContainerCreateRequest {
  bytes Data = 1;
}

message ContainerCreateReply {
  string ID = 1;
}

message ContainerCreateAndChangeExposedPortRequest {
/*
{
  "ImageName": "mongo:latest",
  "ContainerName": "new_mondo_delete_before_test",
  "Rest artPolicy": 3,
  "MountVolumes": [
    {
      "Type": "bind",
      "Source": "/data/db",
      "Target": "/data/db",
      "ReadOnly": true,
      "Consistency": "consistent"
    }
  ],
  "ContainerNetwork": "network",
  "CurrentPort": [
    "27017/tcp"
  ],
  "ChangeToPort": [
    "27017/tcp"
  ]
}
*/
  bytes Data = 1;
}

message ContainerCreateAndChangeExposedPortReply {
  string ID = 1;
}

message ContainerCreateAndExposePortsAutomaticallyRequest {
  bytes Data = 1;
}

message ContainerCreateAndExposePortsAutomaticallyReply {
  string ID = 1;
}

message ContainerCreateAndStartRequest {
  bytes Data = 1;
}

message ContainerCreateAndStartReply {
  string ID = 1;
}

message ContainerCreateChangeExposedPortAndStartRequest {
  bytes Data = 1;
}

message ContainerCreateChangeExposedPortAndStartReply {
  string ID = 1;
}

message ContainerCreateExposePortsAutomaticallyAndStartRequest {
  bytes Data = 1;
}

message ContainerCreateExposePortsAutomaticallyAndStartReply {
  string ID = 1;
}

message ContainerCreateWithoutExposePortsRequest {
  bytes Data = 1;
}

message ContainerCreateWithoutExposePortsReply {
  string ID = 1;
}

message ContainerCreateWithoutExposePortsAndStartRequest {
  bytes Data = 1;
}

message ContainerCreateWithoutExposePortsAndStartReply {
  string ID = 1;
}

message ContainerFindIdByNameRequest {
  string Name = 1;
}

message ContainerFindIdByNameReply {
  string ID = 1;
}

message ContainerFindIdByNameContainsRequest {
  string Name = 1;
}

message ContainerFindIdByNameContainsReply {
  bytes Data = 1;
}

message ContainerInspectByNameRequest {
  string Name = 1;
}

message ContainerInspectByNameReply {
  bytes Data = 1;
}

message ContainerInspectJSonRequest {
  string ID = 1;
}

message ContainerInspectJSonReply {
  string Inspect = 1;
}

message ContainerInspectJSonByNameRequest {
  string Name = 1;
}

message ContainerInspectJSonByNameReply {
  string Inspect = 1;
}

message Empty {

}

message ContainerListAllReply {
  bytes Data = 1;
}

message ContainerNetworkInspectRequest {
  string ID = 1;
}

message ContainerNetworkInspectReply {
  bytes Data = 1;
}

message ContainerRemoveRequest {
  bytes Data = 1;
}

message ContainerStartRequest {
  bytes Data = 1;
}

message ContainerStatisticsOneShotRequest {
  string ID = 1;
}

message ContainerStatisticsOneShotReply {
  bytes Data = 1;
}

message ContainerStatisticsOneShotByNameRequest {
  string Name = 1;
}

message ContainerStatisticsOneShotByNameReply {
  bytes Data = 1;
}

message ContainerStopRequest {
  bytes Data = 1;
}

message ContainerStopAndRemoveRequest {
  bytes Data = 1;
}

message ContainerWaitStatusNotRunningRequest {
  string ID = 1;
}

message NetworkConnectRequest {
  string NetworkID = 1;
  string ContainerID = 2;
  EndpointSettings Config = 3;
}

message NetworkCreateRequest {
  string Name = 1;
  string NetworkDrive = 2;
  string Scope = 3;
  string Subnet = 4;
  string Gateway  = 5;
}

message NetworkCreateReply {
  string ID = 1;
}

message NetworkFindIdByNameRequest {
  string Name = 1;
}

message NetworkFindIdByNameReply {
  string ID = 1;
}

message NetworkListReply {
  bytes Data = 1;
}

message NetworkRemoveRequest {
  string ID = 1;
}

message NetworkRemoveByNameRequest {
  string Name = 1;
}

message ImageBuildFromRemoteServerRequest {
  string ServerPath = 1;
  string ImageNewName = 2;
  repeated string ImageTags = 3;
}

message ImageBuildFromRemoteServerReply {
  string ID = 1;
}

message ImageOrContainerBuildPullSubStatus {
  int64 Count = 1;
  int64 Current = 2;
  int64 Total = 3;
  double Percent = 4;
}

message ImageOrContainerBuildPullStatusRequest {
  string ID = 1;
}

message ImageOrContainerBuildPullStatusReply {
  bytes Data = 1;
}

message ImageFindIdByNameRequest {
  string Name = 1;
}

message ImageFindIdByNameReply {
  string ID = 1;
}

message ImageListExposedPortsRequest {
  string ID = 1;
}

message ImageListExposedPortsReply {
  bytes Data = 1;
}

message ImageListExposedPortsByNameRequest {
  string Name = 1;
}

message ImageListExposedPortsByNameReply {
  bytes Data = 1;
}

message ImageListExposedVolumesRequest {
  string ID = 1;
}

message ImageListExposedVolumesReply {
  bytes Data = 1;
}

message ImageListExposedVolumesByNameRequest {
  string Name = 1;
}

message ImageListExposedVolumesByNameReply {
  repeated string List = 1;
}

message ImageMountNatPortListRequest {
  string ID = 1;
}

message ImageMountNatPortListReply {
  bytes Data = 1;
}

message ImageMountNatPortListChangeExposedRequest {
  string ID = 1;
  repeated Port CurrentPortList = 2;
  repeated Port ChangeToPortList = 3;
}

message ImageMountNatPortListChangeExposedReply {
  bytes Data = 1;
}

message ImageMountNatPortListChangeExposedWithIpAddressRequest {
  string ID = 1;
  string Ip = 2;
  repeated Port CurrentPortList = 3;
  repeated Port ChangeToPortList = 4;
}

message ImageMountNatPortListChangeExposedWithIpAddressReply {
  bytes Data = 1;
}

message ImagePullRequest {
  string Name = 1;
}

message ImagePullReply {
  string Name = 1;
  string ID = 2;
}

message ImageRemoveRequest {
  string ID = 1;
  bool Force = 2;
  bool PruneChildren = 3;
}

message ImageRemoveByNameRequest {
  string ID = 1;
  bool Force = 2;
  bool PruneChildren = 3;
}

message ImageListReply {
  bytes Data = 1;
}

message ContainerInspectByNameContainsRequest {
  string Name = 1;
}

message ContainerInspectByNameContainsReply {
  bytes Data = 1;
}

service DockerServer {
  rpc ContainerCreate (ContainerCreateRequest) returns (ContainerCreateReply) {}
  rpc ContainerCreateAndChangeExposedPort (ContainerCreateAndChangeExposedPortRequest) returns (ContainerCreateAndChangeExposedPortReply) {}
  rpc ContainerInspect (ContainerInspectRequest) returns (ContainerInspectReply) {}
  rpc ContainerCreateAndExposePortsAutomatically (ContainerCreateAndExposePortsAutomaticallyRequest) returns (ContainerCreateAndExposePortsAutomaticallyReply) {}
  rpc ContainerCreateAndStart (ContainerCreateAndStartRequest) returns (ContainerCreateAndStartReply) {}
  rpc ContainerCreateChangeExposedPortAndStart (ContainerCreateChangeExposedPortAndStartRequest) returns (ContainerCreateChangeExposedPortAndStartReply) {}
  rpc ContainerCreateExposePortsAutomaticallyAndStart (ContainerCreateExposePortsAutomaticallyAndStartRequest) returns (ContainerCreateExposePortsAutomaticallyAndStartReply) {}
  rpc ContainerCreateWithoutExposePorts (ContainerCreateWithoutExposePortsRequest) returns (ContainerCreateWithoutExposePortsReply) {}
  rpc ContainerCreateWithoutExposePortsAndStart (ContainerCreateWithoutExposePortsAndStartRequest) returns (ContainerCreateWithoutExposePortsAndStartReply) {}
  rpc ContainerFindIdByName (ContainerFindIdByNameRequest) returns (ContainerFindIdByNameReply) {}
  rpc ContainerFindIdByNameContains (ContainerFindIdByNameContainsRequest) returns (ContainerFindIdByNameContainsReply) {}
  rpc ContainerInspectByName (ContainerInspectByNameRequest) returns (ContainerInspectByNameReply) {}
  rpc ContainerInspectByNameContains (ContainerInspectByNameContainsRequest) returns (ContainerInspectByNameContainsReply) {}
  rpc ContainerInspectJSon (ContainerInspectJSonRequest) returns (ContainerInspectJSonReply) {}
  rpc ContainerInspectJSonByName (ContainerInspectJSonByNameRequest) returns (ContainerInspectJSonByNameReply) {}
  rpc ContainerListAll (Empty) returns (ContainerListAllReply) {}
  rpc ContainerListQuiet (Empty) returns (ContainerListAllReply) {}
  rpc ContainerRemove (ContainerRemoveRequest) returns (Empty) {}
  rpc ContainerStart (ContainerStartRequest) returns (Empty) {}
  rpc ContainerStatisticsOneShot (ContainerStatisticsOneShotRequest) returns (ContainerStatisticsOneShotReply) {}
  rpc ContainerStatisticsOneShotByName (ContainerStatisticsOneShotByNameRequest) returns (ContainerStatisticsOneShotByNameReply) {}
  rpc ContainerStop (ContainerStopRequest) returns (Empty) {}
  rpc ContainerStopAndRemove (ContainerStopAndRemoveRequest) returns (Empty) {}
  rpc ContainerWaitStatusNotRunning (ContainerWaitStatusNotRunningRequest) returns (Empty) {}
  rpc NetworkCreate (NetworkCreateRequest) returns (NetworkCreateReply) {}
  rpc NetworkFindIdByName (NetworkFindIdByNameRequest) returns (NetworkFindIdByNameReply) {}
  rpc NetworkList (Empty) returns (NetworkListReply) {}
  rpc NetworkRemove (NetworkRemoveRequest) returns (Empty) {}
  rpc NetworkRemoveByName (NetworkRemoveByNameRequest) returns (Empty) {}
  rpc NetworkInspect (NetworkInspectRequest) returns (NetworkInspectReply) {}
  rpc ImageGarbageCollector (Empty) returns (Empty) {}
  rpc ImageBuildFromRemoteServer (ImageBuildFromRemoteServerRequest) returns (ImageBuildFromRemoteServerReply) {}
  rpc ImageBuildFromRemoteServerStatus (ImageOrContainerBuildPullStatusRequest) returns (ImageOrContainerBuildPullStatusReply) {}
  rpc ImageFindIdByName (ImageFindIdByNameRequest) returns (ImageFindIdByNameReply) {}
  rpc ImageList (Empty) returns (ImageListReply) {}
  rpc ImageListExposedPorts (ImageListExposedPortsRequest) returns (ImageListExposedPortsReply) {}
  rpc ImageListExposedPortsByName (ImageListExposedPortsByNameRequest) returns (ImageListExposedPortsByNameReply) {}
  rpc ImageListExposedVolumes (ImageListExposedVolumesRequest) returns (ImageListExposedVolumesReply) {}
  rpc ImageListExposedVolumesByName (ImageListExposedVolumesByNameRequest) returns (ImageListExposedVolumesByNameReply) {}
  rpc ImageMountNatPortList (ImageMountNatPortListRequest) returns (ImageMountNatPortListReply) {}
  rpc ImageMountNatPortListChangeExposed (ImageMountNatPortListChangeExposedRequest) returns (ImageMountNatPortListChangeExposedReply) {}
  rpc ImageMountNatPortListChangeExposedWithIpAddress (ImageMountNatPortListChangeExposedWithIpAddressRequest) returns (ImageMountNatPortListChangeExposedWithIpAddressReply) {}
  rpc ImagePull (ImagePullRequest) returns (ImagePullReply) {}
  rpc ImageRemove (ImageRemoveRequest) returns (Empty) {}
  rpc ImageRemoveByName (ImageRemoveByNameRequest) returns (Empty) {}
  //todo: verificar escrita em map e colocar mutex
}
