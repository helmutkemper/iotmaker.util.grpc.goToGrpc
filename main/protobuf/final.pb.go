// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.12.3
// source: final.proto

package iotmaker_docker_communication_grpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ContainerJSON struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerJSONBase *ContainerJSONBase `protobuf:"bytes,1,opt,name=ContainerJSONBase,proto3" json:"ContainerJSONBase,omitempty"`
	Mounts            []*MountPoint      `protobuf:"bytes,2,rep,name=Mounts,proto3" json:"Mounts,omitempty"`
	Config            *Config            `protobuf:"bytes,3,opt,name=Config,proto3" json:"Config,omitempty"`
	NetworkSettings   *NetworkSettings   `protobuf:"bytes,4,opt,name=NetworkSettings,proto3" json:"NetworkSettings,omitempty"`
}

func (x *ContainerJSON) Reset() {
	*x = ContainerJSON{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerJSON) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerJSON) ProtoMessage() {}

func (x *ContainerJSON) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerJSON.ProtoReflect.Descriptor instead.
func (*ContainerJSON) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{0}
}

func (x *ContainerJSON) GetContainerJSONBase() *ContainerJSONBase {
	if x != nil {
		return x.ContainerJSONBase
	}
	return nil
}

func (x *ContainerJSON) GetMounts() []*MountPoint {
	if x != nil {
		return x.Mounts
	}
	return nil
}

func (x *ContainerJSON) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ContainerJSON) GetNetworkSettings() *NetworkSettings {
	if x != nil {
		return x.NetworkSettings
	}
	return nil
}

type ContainerJSONBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              string           `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Created         string           `protobuf:"bytes,2,opt,name=Created,proto3" json:"Created,omitempty"`
	Path            string           `protobuf:"bytes,3,opt,name=Path,proto3" json:"Path,omitempty"`
	Args            []string         `protobuf:"bytes,4,rep,name=Args,proto3" json:"Args,omitempty"`
	State           *ContainerState  `protobuf:"bytes,5,opt,name=State,proto3" json:"State,omitempty"`
	Image           string           `protobuf:"bytes,6,opt,name=Image,proto3" json:"Image,omitempty"`
	ResolvConfPath  string           `protobuf:"bytes,7,opt,name=ResolvConfPath,proto3" json:"ResolvConfPath,omitempty"`
	HostnamePath    string           `protobuf:"bytes,8,opt,name=HostnamePath,proto3" json:"HostnamePath,omitempty"`
	HostsPath       string           `protobuf:"bytes,9,opt,name=HostsPath,proto3" json:"HostsPath,omitempty"`
	LogPath         string           `protobuf:"bytes,10,opt,name=LogPath,proto3" json:"LogPath,omitempty"`
	Node            *ContainerNode   `protobuf:"bytes,11,opt,name=Node,proto3" json:"Node,omitempty"`
	Name            string           `protobuf:"bytes,12,opt,name=Name,proto3" json:"Name,omitempty"`
	RestartCount    int64            `protobuf:"varint,13,opt,name=RestartCount,proto3" json:"RestartCount,omitempty"`
	Driver          string           `protobuf:"bytes,14,opt,name=Driver,proto3" json:"Driver,omitempty"`
	Platform        string           `protobuf:"bytes,15,opt,name=Platform,proto3" json:"Platform,omitempty"`
	MountLabel      string           `protobuf:"bytes,16,opt,name=MountLabel,proto3" json:"MountLabel,omitempty"`
	ProcessLabel    string           `protobuf:"bytes,17,opt,name=ProcessLabel,proto3" json:"ProcessLabel,omitempty"`
	AppArmorProfile string           `protobuf:"bytes,18,opt,name=AppArmorProfile,proto3" json:"AppArmorProfile,omitempty"`
	ExecIDs         []string         `protobuf:"bytes,19,rep,name=ExecIDs,proto3" json:"ExecIDs,omitempty"`
	HostConfig      *HostConfig      `protobuf:"bytes,20,opt,name=HostConfig,proto3" json:"HostConfig,omitempty"`
	GraphDriver     *GraphDriverData `protobuf:"bytes,21,opt,name=GraphDriver,proto3" json:"GraphDriver,omitempty"`
	SizeRw          int64            `protobuf:"varint,22,opt,name=SizeRw,proto3" json:"SizeRw,omitempty"`
	SizeRootFs      int64            `protobuf:"varint,23,opt,name=SizeRootFs,proto3" json:"SizeRootFs,omitempty"`
}

func (x *ContainerJSONBase) Reset() {
	*x = ContainerJSONBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerJSONBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerJSONBase) ProtoMessage() {}

func (x *ContainerJSONBase) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerJSONBase.ProtoReflect.Descriptor instead.
func (*ContainerJSONBase) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{1}
}

func (x *ContainerJSONBase) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ContainerJSONBase) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *ContainerJSONBase) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ContainerJSONBase) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *ContainerJSONBase) GetState() *ContainerState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ContainerJSONBase) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *ContainerJSONBase) GetResolvConfPath() string {
	if x != nil {
		return x.ResolvConfPath
	}
	return ""
}

func (x *ContainerJSONBase) GetHostnamePath() string {
	if x != nil {
		return x.HostnamePath
	}
	return ""
}

func (x *ContainerJSONBase) GetHostsPath() string {
	if x != nil {
		return x.HostsPath
	}
	return ""
}

func (x *ContainerJSONBase) GetLogPath() string {
	if x != nil {
		return x.LogPath
	}
	return ""
}

func (x *ContainerJSONBase) GetNode() *ContainerNode {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ContainerJSONBase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContainerJSONBase) GetRestartCount() int64 {
	if x != nil {
		return x.RestartCount
	}
	return 0
}

func (x *ContainerJSONBase) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *ContainerJSONBase) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *ContainerJSONBase) GetMountLabel() string {
	if x != nil {
		return x.MountLabel
	}
	return ""
}

func (x *ContainerJSONBase) GetProcessLabel() string {
	if x != nil {
		return x.ProcessLabel
	}
	return ""
}

func (x *ContainerJSONBase) GetAppArmorProfile() string {
	if x != nil {
		return x.AppArmorProfile
	}
	return ""
}

func (x *ContainerJSONBase) GetExecIDs() []string {
	if x != nil {
		return x.ExecIDs
	}
	return nil
}

func (x *ContainerJSONBase) GetHostConfig() *HostConfig {
	if x != nil {
		return x.HostConfig
	}
	return nil
}

func (x *ContainerJSONBase) GetGraphDriver() *GraphDriverData {
	if x != nil {
		return x.GraphDriver
	}
	return nil
}

func (x *ContainerJSONBase) GetSizeRw() int64 {
	if x != nil {
		return x.SizeRw
	}
	return 0
}

func (x *ContainerJSONBase) GetSizeRootFs() int64 {
	if x != nil {
		return x.SizeRootFs
	}
	return 0
}

type MountPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Source      string `protobuf:"bytes,3,opt,name=Source,proto3" json:"Source,omitempty"`
	Destination string `protobuf:"bytes,4,opt,name=Destination,proto3" json:"Destination,omitempty"`
	Driver      string `protobuf:"bytes,5,opt,name=Driver,proto3" json:"Driver,omitempty"`
	Mode        string `protobuf:"bytes,6,opt,name=Mode,proto3" json:"Mode,omitempty"`
	RW          bool   `protobuf:"varint,7,opt,name=RW,proto3" json:"RW,omitempty"`
	Propagation string `protobuf:"bytes,8,opt,name=Propagation,proto3" json:"Propagation,omitempty"`
}

func (x *MountPoint) Reset() {
	*x = MountPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountPoint) ProtoMessage() {}

func (x *MountPoint) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountPoint.ProtoReflect.Descriptor instead.
func (*MountPoint) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{2}
}

func (x *MountPoint) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MountPoint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MountPoint) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *MountPoint) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *MountPoint) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *MountPoint) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *MountPoint) GetRW() bool {
	if x != nil {
		return x.RW
	}
	return false
}

func (x *MountPoint) GetPropagation() string {
	if x != nil {
		return x.Propagation
	}
	return ""
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname        string             `protobuf:"bytes,1,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	Domainname      string             `protobuf:"bytes,2,opt,name=Domainname,proto3" json:"Domainname,omitempty"`
	User            string             `protobuf:"bytes,3,opt,name=User,proto3" json:"User,omitempty"`
	AttachStdin     bool               `protobuf:"varint,4,opt,name=AttachStdin,proto3" json:"AttachStdin,omitempty"`
	AttachStdout    bool               `protobuf:"varint,5,opt,name=AttachStdout,proto3" json:"AttachStdout,omitempty"`
	AttachStderr    bool               `protobuf:"varint,6,opt,name=AttachStderr,proto3" json:"AttachStderr,omitempty"`
	ExposedPorts    map[string]*Struct `protobuf:"bytes,7,rep,name=ExposedPorts,proto3" json:"ExposedPorts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tty             bool               `protobuf:"varint,8,opt,name=Tty,proto3" json:"Tty,omitempty"`
	OpenStdin       bool               `protobuf:"varint,9,opt,name=OpenStdin,proto3" json:"OpenStdin,omitempty"`
	StdinOnce       bool               `protobuf:"varint,10,opt,name=StdinOnce,proto3" json:"StdinOnce,omitempty"`
	Env             []string           `protobuf:"bytes,11,rep,name=Env,proto3" json:"Env,omitempty"`
	Cmd             []string           `protobuf:"bytes,12,rep,name=Cmd,proto3" json:"Cmd,omitempty"`
	Healthcheck     *HealthConfig      `protobuf:"bytes,13,opt,name=Healthcheck,proto3" json:"Healthcheck,omitempty"`
	ArgsEscaped     bool               `protobuf:"varint,14,opt,name=ArgsEscaped,proto3" json:"ArgsEscaped,omitempty"`
	Image           string             `protobuf:"bytes,15,opt,name=Image,proto3" json:"Image,omitempty"`
	Volumes         map[string]*Struct `protobuf:"bytes,16,rep,name=Volumes,proto3" json:"Volumes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WorkingDir      string             `protobuf:"bytes,17,opt,name=WorkingDir,proto3" json:"WorkingDir,omitempty"`
	Entrypoint      []string           `protobuf:"bytes,18,rep,name=Entrypoint,proto3" json:"Entrypoint,omitempty"`
	NetworkDisabled bool               `protobuf:"varint,19,opt,name=NetworkDisabled,proto3" json:"NetworkDisabled,omitempty"`
	MacAddress      string             `protobuf:"bytes,20,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
	OnBuild         []string           `protobuf:"bytes,21,rep,name=OnBuild,proto3" json:"OnBuild,omitempty"`
	Labels          map[string]string  `protobuf:"bytes,22,rep,name=Labels,proto3" json:"Labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StopSignal      string             `protobuf:"bytes,23,opt,name=StopSignal,proto3" json:"StopSignal,omitempty"`
	StopTimeout     int64              `protobuf:"varint,24,opt,name=StopTimeout,proto3" json:"StopTimeout,omitempty"`
	Shell           []string           `protobuf:"bytes,25,rep,name=Shell,proto3" json:"Shell,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{3}
}

func (x *Config) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Config) GetDomainname() string {
	if x != nil {
		return x.Domainname
	}
	return ""
}

func (x *Config) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Config) GetAttachStdin() bool {
	if x != nil {
		return x.AttachStdin
	}
	return false
}

func (x *Config) GetAttachStdout() bool {
	if x != nil {
		return x.AttachStdout
	}
	return false
}

func (x *Config) GetAttachStderr() bool {
	if x != nil {
		return x.AttachStderr
	}
	return false
}

func (x *Config) GetExposedPorts() map[string]*Struct {
	if x != nil {
		return x.ExposedPorts
	}
	return nil
}

func (x *Config) GetTty() bool {
	if x != nil {
		return x.Tty
	}
	return false
}

func (x *Config) GetOpenStdin() bool {
	if x != nil {
		return x.OpenStdin
	}
	return false
}

func (x *Config) GetStdinOnce() bool {
	if x != nil {
		return x.StdinOnce
	}
	return false
}

func (x *Config) GetEnv() []string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *Config) GetCmd() []string {
	if x != nil {
		return x.Cmd
	}
	return nil
}

func (x *Config) GetHealthcheck() *HealthConfig {
	if x != nil {
		return x.Healthcheck
	}
	return nil
}

func (x *Config) GetArgsEscaped() bool {
	if x != nil {
		return x.ArgsEscaped
	}
	return false
}

func (x *Config) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Config) GetVolumes() map[string]*Struct {
	if x != nil {
		return x.Volumes
	}
	return nil
}

func (x *Config) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *Config) GetEntrypoint() []string {
	if x != nil {
		return x.Entrypoint
	}
	return nil
}

func (x *Config) GetNetworkDisabled() bool {
	if x != nil {
		return x.NetworkDisabled
	}
	return false
}

func (x *Config) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *Config) GetOnBuild() []string {
	if x != nil {
		return x.OnBuild
	}
	return nil
}

func (x *Config) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Config) GetStopSignal() string {
	if x != nil {
		return x.StopSignal
	}
	return ""
}

func (x *Config) GetStopTimeout() int64 {
	if x != nil {
		return x.StopTimeout
	}
	return 0
}

func (x *Config) GetShell() []string {
	if x != nil {
		return x.Shell
	}
	return nil
}

type Struct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Struct) Reset() {
	*x = Struct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Struct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Struct) ProtoMessage() {}

func (x *Struct) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Struct.ProtoReflect.Descriptor instead.
func (*Struct) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{4}
}

type NetworkSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkSettingsBase    *NetworkSettingsBase         `protobuf:"bytes,1,opt,name=NetworkSettingsBase,proto3" json:"NetworkSettingsBase,omitempty"`
	DefaultNetworkSettings *DefaultNetworkSettings      `protobuf:"bytes,2,opt,name=DefaultNetworkSettings,proto3" json:"DefaultNetworkSettings,omitempty"`
	Networks               map[string]*EndpointSettings `protobuf:"bytes,3,rep,name=Networks,proto3" json:"Networks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NetworkSettings) Reset() {
	*x = NetworkSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkSettings) ProtoMessage() {}

func (x *NetworkSettings) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkSettings.ProtoReflect.Descriptor instead.
func (*NetworkSettings) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{5}
}

func (x *NetworkSettings) GetNetworkSettingsBase() *NetworkSettingsBase {
	if x != nil {
		return x.NetworkSettingsBase
	}
	return nil
}

func (x *NetworkSettings) GetDefaultNetworkSettings() *DefaultNetworkSettings {
	if x != nil {
		return x.DefaultNetworkSettings
	}
	return nil
}

func (x *NetworkSettings) GetNetworks() map[string]*EndpointSettings {
	if x != nil {
		return x.Networks
	}
	return nil
}

type ContainerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     string  `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	Running    bool    `protobuf:"varint,2,opt,name=Running,proto3" json:"Running,omitempty"`
	Paused     bool    `protobuf:"varint,3,opt,name=Paused,proto3" json:"Paused,omitempty"`
	Restarting bool    `protobuf:"varint,4,opt,name=Restarting,proto3" json:"Restarting,omitempty"`
	OOMKilled  bool    `protobuf:"varint,5,opt,name=OOMKilled,proto3" json:"OOMKilled,omitempty"`
	Dead       bool    `protobuf:"varint,6,opt,name=Dead,proto3" json:"Dead,omitempty"`
	Pid        int64   `protobuf:"varint,7,opt,name=Pid,proto3" json:"Pid,omitempty"`
	ExitCode   int64   `protobuf:"varint,8,opt,name=ExitCode,proto3" json:"ExitCode,omitempty"`
	Error      string  `protobuf:"bytes,9,opt,name=Error,proto3" json:"Error,omitempty"`
	StartedAt  string  `protobuf:"bytes,10,opt,name=StartedAt,proto3" json:"StartedAt,omitempty"`
	FinishedAt string  `protobuf:"bytes,11,opt,name=FinishedAt,proto3" json:"FinishedAt,omitempty"`
	Health     *Health `protobuf:"bytes,12,opt,name=Health,proto3" json:"Health,omitempty"`
}

func (x *ContainerState) Reset() {
	*x = ContainerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerState) ProtoMessage() {}

func (x *ContainerState) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerState.ProtoReflect.Descriptor instead.
func (*ContainerState) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{6}
}

func (x *ContainerState) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ContainerState) GetRunning() bool {
	if x != nil {
		return x.Running
	}
	return false
}

func (x *ContainerState) GetPaused() bool {
	if x != nil {
		return x.Paused
	}
	return false
}

func (x *ContainerState) GetRestarting() bool {
	if x != nil {
		return x.Restarting
	}
	return false
}

func (x *ContainerState) GetOOMKilled() bool {
	if x != nil {
		return x.OOMKilled
	}
	return false
}

func (x *ContainerState) GetDead() bool {
	if x != nil {
		return x.Dead
	}
	return false
}

func (x *ContainerState) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ContainerState) GetExitCode() int64 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *ContainerState) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ContainerState) GetStartedAt() string {
	if x != nil {
		return x.StartedAt
	}
	return ""
}

func (x *ContainerState) GetFinishedAt() string {
	if x != nil {
		return x.FinishedAt
	}
	return ""
}

func (x *ContainerState) GetHealth() *Health {
	if x != nil {
		return x.Health
	}
	return nil
}

type ContainerNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string            `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	IPAddress string            `protobuf:"bytes,2,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	Addr      string            `protobuf:"bytes,3,opt,name=Addr,proto3" json:"Addr,omitempty"`
	Name      string            `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	Cpus      int64             `protobuf:"varint,5,opt,name=Cpus,proto3" json:"Cpus,omitempty"`
	Memory    int64             `protobuf:"varint,6,opt,name=Memory,proto3" json:"Memory,omitempty"`
	Labels    map[string]string `protobuf:"bytes,7,rep,name=Labels,proto3" json:"Labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ContainerNode) Reset() {
	*x = ContainerNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerNode) ProtoMessage() {}

func (x *ContainerNode) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerNode.ProtoReflect.Descriptor instead.
func (*ContainerNode) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{7}
}

func (x *ContainerNode) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ContainerNode) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *ContainerNode) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *ContainerNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContainerNode) GetCpus() int64 {
	if x != nil {
		return x.Cpus
	}
	return 0
}

func (x *ContainerNode) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *ContainerNode) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type PortMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port map[string]*PortBindingList `protobuf:"bytes,1,rep,name=Port,proto3" json:"Port,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PortMap) Reset() {
	*x = PortMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortMap) ProtoMessage() {}

func (x *PortMap) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortMap.ProtoReflect.Descriptor instead.
func (*PortMap) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{8}
}

func (x *PortMap) GetPort() map[string]*PortBindingList {
	if x != nil {
		return x.Port
	}
	return nil
}

type PortBindingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortBinding []*PortBinding `protobuf:"bytes,1,rep,name=PortBinding,proto3" json:"PortBinding,omitempty"`
}

func (x *PortBindingList) Reset() {
	*x = PortBindingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortBindingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortBindingList) ProtoMessage() {}

func (x *PortBindingList) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortBindingList.ProtoReflect.Descriptor instead.
func (*PortBindingList) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{9}
}

func (x *PortBindingList) GetPortBinding() []*PortBinding {
	if x != nil {
		return x.PortBinding
	}
	return nil
}

type HostConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Binds           []string          `protobuf:"bytes,1,rep,name=Binds,proto3" json:"Binds,omitempty"`
	ContainerIDFile string            `protobuf:"bytes,2,opt,name=ContainerIDFile,proto3" json:"ContainerIDFile,omitempty"`
	LogConfig       *LogConfig        `protobuf:"bytes,3,opt,name=LogConfig,proto3" json:"LogConfig,omitempty"`
	NetworkMode     string            `protobuf:"bytes,4,opt,name=NetworkMode,proto3" json:"NetworkMode,omitempty"`
	PortBindings    *PortMap          `protobuf:"bytes,5,opt,name=PortBindings,proto3" json:"PortBindings,omitempty"`
	RestartPolicy   *RestartPolicy    `protobuf:"bytes,6,opt,name=RestartPolicy,proto3" json:"RestartPolicy,omitempty"`
	AutoRemove      bool              `protobuf:"varint,7,opt,name=AutoRemove,proto3" json:"AutoRemove,omitempty"`
	VolumeDriver    string            `protobuf:"bytes,8,opt,name=VolumeDriver,proto3" json:"VolumeDriver,omitempty"`
	VolumesFrom     []string          `protobuf:"bytes,9,rep,name=VolumesFrom,proto3" json:"VolumesFrom,omitempty"`
	CapAdd          []string          `protobuf:"bytes,10,rep,name=CapAdd,proto3" json:"CapAdd,omitempty"`
	CapDrop         []string          `protobuf:"bytes,11,rep,name=CapDrop,proto3" json:"CapDrop,omitempty"`
	Capabilities    []string          `protobuf:"bytes,12,rep,name=Capabilities,proto3" json:"Capabilities,omitempty"`
	DNS             []string          `protobuf:"bytes,13,rep,name=DNS,proto3" json:"DNS,omitempty"`
	DNSOptions      []string          `protobuf:"bytes,14,rep,name=DNSOptions,proto3" json:"DNSOptions,omitempty"`
	DNSSearch       []string          `protobuf:"bytes,15,rep,name=DNSSearch,proto3" json:"DNSSearch,omitempty"`
	ExtraHosts      []string          `protobuf:"bytes,16,rep,name=ExtraHosts,proto3" json:"ExtraHosts,omitempty"`
	GroupAdd        []string          `protobuf:"bytes,17,rep,name=GroupAdd,proto3" json:"GroupAdd,omitempty"`
	IpcMode         string            `protobuf:"bytes,18,opt,name=IpcMode,proto3" json:"IpcMode,omitempty"`
	Cgroup          string            `protobuf:"bytes,19,opt,name=Cgroup,proto3" json:"Cgroup,omitempty"`
	Links           []string          `protobuf:"bytes,20,rep,name=Links,proto3" json:"Links,omitempty"`
	OomScoreAdj     int64             `protobuf:"varint,21,opt,name=OomScoreAdj,proto3" json:"OomScoreAdj,omitempty"`
	PidMode         string            `protobuf:"bytes,22,opt,name=PidMode,proto3" json:"PidMode,omitempty"`
	Privileged      bool              `protobuf:"varint,23,opt,name=Privileged,proto3" json:"Privileged,omitempty"`
	PublishAllPorts bool              `protobuf:"varint,24,opt,name=PublishAllPorts,proto3" json:"PublishAllPorts,omitempty"`
	ReadonlyRootfs  bool              `protobuf:"varint,25,opt,name=ReadonlyRootfs,proto3" json:"ReadonlyRootfs,omitempty"`
	SecurityOpt     []string          `protobuf:"bytes,26,rep,name=SecurityOpt,proto3" json:"SecurityOpt,omitempty"`
	StorageOpt      map[string]string `protobuf:"bytes,27,rep,name=StorageOpt,proto3" json:"StorageOpt,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tmpfs           map[string]string `protobuf:"bytes,28,rep,name=Tmpfs,proto3" json:"Tmpfs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UTSMode         string            `protobuf:"bytes,29,opt,name=UTSMode,proto3" json:"UTSMode,omitempty"`
	UsernsMode      string            `protobuf:"bytes,30,opt,name=UsernsMode,proto3" json:"UsernsMode,omitempty"`
	ShmSize         int64             `protobuf:"varint,31,opt,name=ShmSize,proto3" json:"ShmSize,omitempty"`
	Sysctls         map[string]string `protobuf:"bytes,32,rep,name=Sysctls,proto3" json:"Sysctls,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Runtime         string            `protobuf:"bytes,33,opt,name=Runtime,proto3" json:"Runtime,omitempty"`
	Isolation       string            `protobuf:"bytes,35,opt,name=Isolation,proto3" json:"Isolation,omitempty"`
	Resources       *Resources        `protobuf:"bytes,36,opt,name=Resources,proto3" json:"Resources,omitempty"`
	Mounts          []*MountPoint     `protobuf:"bytes,37,rep,name=Mounts,proto3" json:"Mounts,omitempty"`
}

func (x *HostConfig) Reset() {
	*x = HostConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostConfig) ProtoMessage() {}

func (x *HostConfig) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostConfig.ProtoReflect.Descriptor instead.
func (*HostConfig) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{10}
}

func (x *HostConfig) GetBinds() []string {
	if x != nil {
		return x.Binds
	}
	return nil
}

func (x *HostConfig) GetContainerIDFile() string {
	if x != nil {
		return x.ContainerIDFile
	}
	return ""
}

func (x *HostConfig) GetLogConfig() *LogConfig {
	if x != nil {
		return x.LogConfig
	}
	return nil
}

func (x *HostConfig) GetNetworkMode() string {
	if x != nil {
		return x.NetworkMode
	}
	return ""
}

func (x *HostConfig) GetPortBindings() *PortMap {
	if x != nil {
		return x.PortBindings
	}
	return nil
}

func (x *HostConfig) GetRestartPolicy() *RestartPolicy {
	if x != nil {
		return x.RestartPolicy
	}
	return nil
}

func (x *HostConfig) GetAutoRemove() bool {
	if x != nil {
		return x.AutoRemove
	}
	return false
}

func (x *HostConfig) GetVolumeDriver() string {
	if x != nil {
		return x.VolumeDriver
	}
	return ""
}

func (x *HostConfig) GetVolumesFrom() []string {
	if x != nil {
		return x.VolumesFrom
	}
	return nil
}

func (x *HostConfig) GetCapAdd() []string {
	if x != nil {
		return x.CapAdd
	}
	return nil
}

func (x *HostConfig) GetCapDrop() []string {
	if x != nil {
		return x.CapDrop
	}
	return nil
}

func (x *HostConfig) GetCapabilities() []string {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *HostConfig) GetDNS() []string {
	if x != nil {
		return x.DNS
	}
	return nil
}

func (x *HostConfig) GetDNSOptions() []string {
	if x != nil {
		return x.DNSOptions
	}
	return nil
}

func (x *HostConfig) GetDNSSearch() []string {
	if x != nil {
		return x.DNSSearch
	}
	return nil
}

func (x *HostConfig) GetExtraHosts() []string {
	if x != nil {
		return x.ExtraHosts
	}
	return nil
}

func (x *HostConfig) GetGroupAdd() []string {
	if x != nil {
		return x.GroupAdd
	}
	return nil
}

func (x *HostConfig) GetIpcMode() string {
	if x != nil {
		return x.IpcMode
	}
	return ""
}

func (x *HostConfig) GetCgroup() string {
	if x != nil {
		return x.Cgroup
	}
	return ""
}

func (x *HostConfig) GetLinks() []string {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *HostConfig) GetOomScoreAdj() int64 {
	if x != nil {
		return x.OomScoreAdj
	}
	return 0
}

func (x *HostConfig) GetPidMode() string {
	if x != nil {
		return x.PidMode
	}
	return ""
}

func (x *HostConfig) GetPrivileged() bool {
	if x != nil {
		return x.Privileged
	}
	return false
}

func (x *HostConfig) GetPublishAllPorts() bool {
	if x != nil {
		return x.PublishAllPorts
	}
	return false
}

func (x *HostConfig) GetReadonlyRootfs() bool {
	if x != nil {
		return x.ReadonlyRootfs
	}
	return false
}

func (x *HostConfig) GetSecurityOpt() []string {
	if x != nil {
		return x.SecurityOpt
	}
	return nil
}

func (x *HostConfig) GetStorageOpt() map[string]string {
	if x != nil {
		return x.StorageOpt
	}
	return nil
}

func (x *HostConfig) GetTmpfs() map[string]string {
	if x != nil {
		return x.Tmpfs
	}
	return nil
}

func (x *HostConfig) GetUTSMode() string {
	if x != nil {
		return x.UTSMode
	}
	return ""
}

func (x *HostConfig) GetUsernsMode() string {
	if x != nil {
		return x.UsernsMode
	}
	return ""
}

func (x *HostConfig) GetShmSize() int64 {
	if x != nil {
		return x.ShmSize
	}
	return 0
}

func (x *HostConfig) GetSysctls() map[string]string {
	if x != nil {
		return x.Sysctls
	}
	return nil
}

func (x *HostConfig) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *HostConfig) GetIsolation() string {
	if x != nil {
		return x.Isolation
	}
	return ""
}

func (x *HostConfig) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *HostConfig) GetMounts() []*MountPoint {
	if x != nil {
		return x.Mounts
	}
	return nil
}

type GraphDriverData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data map[string]string `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Name string            `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *GraphDriverData) Reset() {
	*x = GraphDriverData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphDriverData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphDriverData) ProtoMessage() {}

func (x *GraphDriverData) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphDriverData.ProtoReflect.Descriptor instead.
func (*GraphDriverData) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{11}
}

func (x *GraphDriverData) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GraphDriverData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type HealthConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Test        []string `protobuf:"bytes,1,rep,name=Test,proto3" json:"Test,omitempty"`
	Interval    int64    `protobuf:"varint,2,opt,name=Interval,proto3" json:"Interval,omitempty"`
	Timeout     int64    `protobuf:"varint,3,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	StartPeriod int64    `protobuf:"varint,4,opt,name=StartPeriod,proto3" json:"StartPeriod,omitempty"`
	Retries     int64    `protobuf:"varint,5,opt,name=Retries,proto3" json:"Retries,omitempty"`
}

func (x *HealthConfig) Reset() {
	*x = HealthConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthConfig) ProtoMessage() {}

func (x *HealthConfig) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthConfig.ProtoReflect.Descriptor instead.
func (*HealthConfig) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{12}
}

func (x *HealthConfig) GetTest() []string {
	if x != nil {
		return x.Test
	}
	return nil
}

func (x *HealthConfig) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *HealthConfig) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *HealthConfig) GetStartPeriod() int64 {
	if x != nil {
		return x.StartPeriod
	}
	return 0
}

func (x *HealthConfig) GetRetries() int64 {
	if x != nil {
		return x.Retries
	}
	return 0
}

type NetworkSettingsBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bridge                 string     `protobuf:"bytes,1,opt,name=Bridge,proto3" json:"Bridge,omitempty"`
	SandboxID              string     `protobuf:"bytes,2,opt,name=SandboxID,proto3" json:"SandboxID,omitempty"`
	HairpinMode            bool       `protobuf:"varint,3,opt,name=HairpinMode,proto3" json:"HairpinMode,omitempty"`
	LinkLocalIPv6Address   string     `protobuf:"bytes,4,opt,name=LinkLocalIPv6Address,proto3" json:"LinkLocalIPv6Address,omitempty"`
	LinkLocalIPv6PrefixLen int64      `protobuf:"varint,5,opt,name=LinkLocalIPv6PrefixLen,proto3" json:"LinkLocalIPv6PrefixLen,omitempty"`
	Ports                  *PortMap   `protobuf:"bytes,6,opt,name=Ports,proto3" json:"Ports,omitempty"`
	SandboxKey             string     `protobuf:"bytes,7,opt,name=SandboxKey,proto3" json:"SandboxKey,omitempty"`
	SecondaryIPAddresses   []*Address `protobuf:"bytes,8,rep,name=SecondaryIPAddresses,proto3" json:"SecondaryIPAddresses,omitempty"`
	SecondaryIPv6Addresses []*Address `protobuf:"bytes,9,rep,name=SecondaryIPv6Addresses,proto3" json:"SecondaryIPv6Addresses,omitempty"`
}

func (x *NetworkSettingsBase) Reset() {
	*x = NetworkSettingsBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkSettingsBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkSettingsBase) ProtoMessage() {}

func (x *NetworkSettingsBase) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkSettingsBase.ProtoReflect.Descriptor instead.
func (*NetworkSettingsBase) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{13}
}

func (x *NetworkSettingsBase) GetBridge() string {
	if x != nil {
		return x.Bridge
	}
	return ""
}

func (x *NetworkSettingsBase) GetSandboxID() string {
	if x != nil {
		return x.SandboxID
	}
	return ""
}

func (x *NetworkSettingsBase) GetHairpinMode() bool {
	if x != nil {
		return x.HairpinMode
	}
	return false
}

func (x *NetworkSettingsBase) GetLinkLocalIPv6Address() string {
	if x != nil {
		return x.LinkLocalIPv6Address
	}
	return ""
}

func (x *NetworkSettingsBase) GetLinkLocalIPv6PrefixLen() int64 {
	if x != nil {
		return x.LinkLocalIPv6PrefixLen
	}
	return 0
}

func (x *NetworkSettingsBase) GetPorts() *PortMap {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *NetworkSettingsBase) GetSandboxKey() string {
	if x != nil {
		return x.SandboxKey
	}
	return ""
}

func (x *NetworkSettingsBase) GetSecondaryIPAddresses() []*Address {
	if x != nil {
		return x.SecondaryIPAddresses
	}
	return nil
}

func (x *NetworkSettingsBase) GetSecondaryIPv6Addresses() []*Address {
	if x != nil {
		return x.SecondaryIPv6Addresses
	}
	return nil
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr      string `protobuf:"bytes,1,opt,name=Addr,proto3" json:"Addr,omitempty"`
	PrefixLen int64  `protobuf:"varint,2,opt,name=PrefixLen,proto3" json:"PrefixLen,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{14}
}

func (x *Address) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Address) GetPrefixLen() int64 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

type DefaultNetworkSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndpointID          string `protobuf:"bytes,1,opt,name=EndpointID,proto3" json:"EndpointID,omitempty"`
	Gateway             string `protobuf:"bytes,2,opt,name=Gateway,proto3" json:"Gateway,omitempty"`
	GlobalIPv6Address   string `protobuf:"bytes,3,opt,name=GlobalIPv6Address,proto3" json:"GlobalIPv6Address,omitempty"`
	GlobalIPv6PrefixLen int64  `protobuf:"varint,4,opt,name=GlobalIPv6PrefixLen,proto3" json:"GlobalIPv6PrefixLen,omitempty"`
	IPAddress           string `protobuf:"bytes,5,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	IPPrefixLen         int64  `protobuf:"varint,6,opt,name=IPPrefixLen,proto3" json:"IPPrefixLen,omitempty"`
	IPv6Gateway         string `protobuf:"bytes,7,opt,name=IPv6Gateway,proto3" json:"IPv6Gateway,omitempty"`
	MacAddress          string `protobuf:"bytes,8,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *DefaultNetworkSettings) Reset() {
	*x = DefaultNetworkSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultNetworkSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultNetworkSettings) ProtoMessage() {}

func (x *DefaultNetworkSettings) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultNetworkSettings.ProtoReflect.Descriptor instead.
func (*DefaultNetworkSettings) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{15}
}

func (x *DefaultNetworkSettings) GetEndpointID() string {
	if x != nil {
		return x.EndpointID
	}
	return ""
}

func (x *DefaultNetworkSettings) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *DefaultNetworkSettings) GetGlobalIPv6Address() string {
	if x != nil {
		return x.GlobalIPv6Address
	}
	return ""
}

func (x *DefaultNetworkSettings) GetGlobalIPv6PrefixLen() int64 {
	if x != nil {
		return x.GlobalIPv6PrefixLen
	}
	return 0
}

func (x *DefaultNetworkSettings) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *DefaultNetworkSettings) GetIPPrefixLen() int64 {
	if x != nil {
		return x.IPPrefixLen
	}
	return 0
}

func (x *DefaultNetworkSettings) GetIPv6Gateway() string {
	if x != nil {
		return x.IPv6Gateway
	}
	return ""
}

func (x *DefaultNetworkSettings) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type EndpointSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IPAMConfig          *EndpointIPAMConfig `protobuf:"bytes,1,opt,name=IPAMConfig,proto3" json:"IPAMConfig,omitempty"`
	Links               []string            `protobuf:"bytes,2,rep,name=Links,proto3" json:"Links,omitempty"`
	Aliases             []string            `protobuf:"bytes,3,rep,name=Aliases,proto3" json:"Aliases,omitempty"`
	NetworkID           string              `protobuf:"bytes,4,opt,name=NetworkID,proto3" json:"NetworkID,omitempty"`
	EndpointID          string              `protobuf:"bytes,5,opt,name=EndpointID,proto3" json:"EndpointID,omitempty"`
	Gateway             string              `protobuf:"bytes,6,opt,name=Gateway,proto3" json:"Gateway,omitempty"`
	IPAddress           string              `protobuf:"bytes,7,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	IPPrefixLen         int64               `protobuf:"varint,8,opt,name=IPPrefixLen,proto3" json:"IPPrefixLen,omitempty"`
	IPv6Gateway         string              `protobuf:"bytes,9,opt,name=IPv6Gateway,proto3" json:"IPv6Gateway,omitempty"`
	GlobalIPv6Address   string              `protobuf:"bytes,10,opt,name=GlobalIPv6Address,proto3" json:"GlobalIPv6Address,omitempty"`
	GlobalIPv6PrefixLen int64               `protobuf:"varint,11,opt,name=GlobalIPv6PrefixLen,proto3" json:"GlobalIPv6PrefixLen,omitempty"`
	MacAddress          string              `protobuf:"bytes,12,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
	DriverOpts          map[string]string   `protobuf:"bytes,13,rep,name=DriverOpts,proto3" json:"DriverOpts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EndpointSettings) Reset() {
	*x = EndpointSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointSettings) ProtoMessage() {}

func (x *EndpointSettings) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointSettings.ProtoReflect.Descriptor instead.
func (*EndpointSettings) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{16}
}

func (x *EndpointSettings) GetIPAMConfig() *EndpointIPAMConfig {
	if x != nil {
		return x.IPAMConfig
	}
	return nil
}

func (x *EndpointSettings) GetLinks() []string {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *EndpointSettings) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *EndpointSettings) GetNetworkID() string {
	if x != nil {
		return x.NetworkID
	}
	return ""
}

func (x *EndpointSettings) GetEndpointID() string {
	if x != nil {
		return x.EndpointID
	}
	return ""
}

func (x *EndpointSettings) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *EndpointSettings) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *EndpointSettings) GetIPPrefixLen() int64 {
	if x != nil {
		return x.IPPrefixLen
	}
	return 0
}

func (x *EndpointSettings) GetIPv6Gateway() string {
	if x != nil {
		return x.IPv6Gateway
	}
	return ""
}

func (x *EndpointSettings) GetGlobalIPv6Address() string {
	if x != nil {
		return x.GlobalIPv6Address
	}
	return ""
}

func (x *EndpointSettings) GetGlobalIPv6PrefixLen() int64 {
	if x != nil {
		return x.GlobalIPv6PrefixLen
	}
	return 0
}

func (x *EndpointSettings) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *EndpointSettings) GetDriverOpts() map[string]string {
	if x != nil {
		return x.DriverOpts
	}
	return nil
}

type Health struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        string               `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	FailingStreak int64                `protobuf:"varint,2,opt,name=FailingStreak,proto3" json:"FailingStreak,omitempty"`
	Log           []*HealthcheckResult `protobuf:"bytes,3,rep,name=Log,proto3" json:"Log,omitempty"`
}

func (x *Health) Reset() {
	*x = Health{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Health) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Health) ProtoMessage() {}

func (x *Health) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Health.ProtoReflect.Descriptor instead.
func (*Health) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{17}
}

func (x *Health) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Health) GetFailingStreak() int64 {
	if x != nil {
		return x.FailingStreak
	}
	return 0
}

func (x *Health) GetLog() []*HealthcheckResult {
	if x != nil {
		return x.Log
	}
	return nil
}

type LogConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string            `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Config map[string]string `protobuf:"bytes,2,rep,name=Config,proto3" json:"Config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LogConfig) Reset() {
	*x = LogConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogConfig) ProtoMessage() {}

func (x *LogConfig) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogConfig.ProtoReflect.Descriptor instead.
func (*LogConfig) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{18}
}

func (x *LogConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LogConfig) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

type PortBinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostIP   string `protobuf:"bytes,1,opt,name=HostIP,proto3" json:"HostIP,omitempty"`
	HostPort string `protobuf:"bytes,2,opt,name=HostPort,proto3" json:"HostPort,omitempty"`
}

func (x *PortBinding) Reset() {
	*x = PortBinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortBinding) ProtoMessage() {}

func (x *PortBinding) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortBinding.ProtoReflect.Descriptor instead.
func (*PortBinding) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{19}
}

func (x *PortBinding) GetHostIP() string {
	if x != nil {
		return x.HostIP
	}
	return ""
}

func (x *PortBinding) GetHostPort() string {
	if x != nil {
		return x.HostPort
	}
	return ""
}

type RestartPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	MaximumRetryCount int64  `protobuf:"varint,2,opt,name=MaximumRetryCount,proto3" json:"MaximumRetryCount,omitempty"`
}

func (x *RestartPolicy) Reset() {
	*x = RestartPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartPolicy) ProtoMessage() {}

func (x *RestartPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartPolicy.ProtoReflect.Descriptor instead.
func (*RestartPolicy) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{20}
}

func (x *RestartPolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RestartPolicy) GetMaximumRetryCount() int64 {
	if x != nil {
		return x.MaximumRetryCount
	}
	return 0
}

type Resources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CPUShares            int64             `protobuf:"varint,1,opt,name=CPUShares,proto3" json:"CPUShares,omitempty"`
	Memory               int64             `protobuf:"varint,2,opt,name=Memory,proto3" json:"Memory,omitempty"`
	NanoCPUs             int64             `protobuf:"varint,3,opt,name=NanoCPUs,proto3" json:"NanoCPUs,omitempty"`
	CgroupParent         string            `protobuf:"bytes,4,opt,name=CgroupParent,proto3" json:"CgroupParent,omitempty"`
	BlkioWeight          uint32            `protobuf:"varint,5,opt,name=BlkioWeight,proto3" json:"BlkioWeight,omitempty"`
	BlkioWeightDevice    []*WeightDevice   `protobuf:"bytes,6,rep,name=BlkioWeightDevice,proto3" json:"BlkioWeightDevice,omitempty"`
	BlkioDeviceReadBps   []*ThrottleDevice `protobuf:"bytes,7,rep,name=BlkioDeviceReadBps,proto3" json:"BlkioDeviceReadBps,omitempty"`
	BlkioDeviceWriteBps  []*ThrottleDevice `protobuf:"bytes,8,rep,name=BlkioDeviceWriteBps,proto3" json:"BlkioDeviceWriteBps,omitempty"`
	BlkioDeviceReadIOps  []*ThrottleDevice `protobuf:"bytes,9,rep,name=BlkioDeviceReadIOps,proto3" json:"BlkioDeviceReadIOps,omitempty"`
	BlkioDeviceWriteIOps []*ThrottleDevice `protobuf:"bytes,10,rep,name=BlkioDeviceWriteIOps,proto3" json:"BlkioDeviceWriteIOps,omitempty"`
	CPUPeriod            int64             `protobuf:"varint,11,opt,name=CPUPeriod,proto3" json:"CPUPeriod,omitempty"`
	CPUQuota             int64             `protobuf:"varint,12,opt,name=CPUQuota,proto3" json:"CPUQuota,omitempty"`
	CPURealtimePeriod    int64             `protobuf:"varint,13,opt,name=CPURealtimePeriod,proto3" json:"CPURealtimePeriod,omitempty"`
	CPURealtimeRuntime   int64             `protobuf:"varint,14,opt,name=CPURealtimeRuntime,proto3" json:"CPURealtimeRuntime,omitempty"`
	CpusetCpus           string            `protobuf:"bytes,15,opt,name=CpusetCpus,proto3" json:"CpusetCpus,omitempty"`
	CpusetMems           string            `protobuf:"bytes,16,opt,name=CpusetMems,proto3" json:"CpusetMems,omitempty"`
	Devices              []*DeviceMapping  `protobuf:"bytes,17,rep,name=Devices,proto3" json:"Devices,omitempty"`
	DeviceCgroupRules    []string          `protobuf:"bytes,18,rep,name=DeviceCgroupRules,proto3" json:"DeviceCgroupRules,omitempty"`
	DeviceRequests       []*DeviceRequest  `protobuf:"bytes,19,rep,name=DeviceRequests,proto3" json:"DeviceRequests,omitempty"`
	KernelMemory         int64             `protobuf:"varint,20,opt,name=KernelMemory,proto3" json:"KernelMemory,omitempty"`
	KernelMemoryTCP      int64             `protobuf:"varint,21,opt,name=KernelMemoryTCP,proto3" json:"KernelMemoryTCP,omitempty"`
	MemoryReservation    int64             `protobuf:"varint,22,opt,name=MemoryReservation,proto3" json:"MemoryReservation,omitempty"`
	MemorySwap           int64             `protobuf:"varint,23,opt,name=MemorySwap,proto3" json:"MemorySwap,omitempty"`
	MemorySwappiness     int64             `protobuf:"varint,24,opt,name=MemorySwappiness,proto3" json:"MemorySwappiness,omitempty"`
	OomKillDisable       bool              `protobuf:"varint,25,opt,name=OomKillDisable,proto3" json:"OomKillDisable,omitempty"`
	PidsLimit            int64             `protobuf:"varint,26,opt,name=PidsLimit,proto3" json:"PidsLimit,omitempty"`
	Ulimits              []*Ulimit         `protobuf:"bytes,27,rep,name=Ulimits,proto3" json:"Ulimits,omitempty"`
	CPUCount             int64             `protobuf:"varint,28,opt,name=CPUCount,proto3" json:"CPUCount,omitempty"`
	CPUPercent           int64             `protobuf:"varint,29,opt,name=CPUPercent,proto3" json:"CPUPercent,omitempty"`
	IOMaximumIOps        uint64            `protobuf:"varint,30,opt,name=IOMaximumIOps,proto3" json:"IOMaximumIOps,omitempty"`
	IOMaximumBandwidth   uint64            `protobuf:"varint,31,opt,name=IOMaximumBandwidth,proto3" json:"IOMaximumBandwidth,omitempty"`
}

func (x *Resources) Reset() {
	*x = Resources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resources) ProtoMessage() {}

func (x *Resources) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resources.ProtoReflect.Descriptor instead.
func (*Resources) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{21}
}

func (x *Resources) GetCPUShares() int64 {
	if x != nil {
		return x.CPUShares
	}
	return 0
}

func (x *Resources) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *Resources) GetNanoCPUs() int64 {
	if x != nil {
		return x.NanoCPUs
	}
	return 0
}

func (x *Resources) GetCgroupParent() string {
	if x != nil {
		return x.CgroupParent
	}
	return ""
}

func (x *Resources) GetBlkioWeight() uint32 {
	if x != nil {
		return x.BlkioWeight
	}
	return 0
}

func (x *Resources) GetBlkioWeightDevice() []*WeightDevice {
	if x != nil {
		return x.BlkioWeightDevice
	}
	return nil
}

func (x *Resources) GetBlkioDeviceReadBps() []*ThrottleDevice {
	if x != nil {
		return x.BlkioDeviceReadBps
	}
	return nil
}

func (x *Resources) GetBlkioDeviceWriteBps() []*ThrottleDevice {
	if x != nil {
		return x.BlkioDeviceWriteBps
	}
	return nil
}

func (x *Resources) GetBlkioDeviceReadIOps() []*ThrottleDevice {
	if x != nil {
		return x.BlkioDeviceReadIOps
	}
	return nil
}

func (x *Resources) GetBlkioDeviceWriteIOps() []*ThrottleDevice {
	if x != nil {
		return x.BlkioDeviceWriteIOps
	}
	return nil
}

func (x *Resources) GetCPUPeriod() int64 {
	if x != nil {
		return x.CPUPeriod
	}
	return 0
}

func (x *Resources) GetCPUQuota() int64 {
	if x != nil {
		return x.CPUQuota
	}
	return 0
}

func (x *Resources) GetCPURealtimePeriod() int64 {
	if x != nil {
		return x.CPURealtimePeriod
	}
	return 0
}

func (x *Resources) GetCPURealtimeRuntime() int64 {
	if x != nil {
		return x.CPURealtimeRuntime
	}
	return 0
}

func (x *Resources) GetCpusetCpus() string {
	if x != nil {
		return x.CpusetCpus
	}
	return ""
}

func (x *Resources) GetCpusetMems() string {
	if x != nil {
		return x.CpusetMems
	}
	return ""
}

func (x *Resources) GetDevices() []*DeviceMapping {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *Resources) GetDeviceCgroupRules() []string {
	if x != nil {
		return x.DeviceCgroupRules
	}
	return nil
}

func (x *Resources) GetDeviceRequests() []*DeviceRequest {
	if x != nil {
		return x.DeviceRequests
	}
	return nil
}

func (x *Resources) GetKernelMemory() int64 {
	if x != nil {
		return x.KernelMemory
	}
	return 0
}

func (x *Resources) GetKernelMemoryTCP() int64 {
	if x != nil {
		return x.KernelMemoryTCP
	}
	return 0
}

func (x *Resources) GetMemoryReservation() int64 {
	if x != nil {
		return x.MemoryReservation
	}
	return 0
}

func (x *Resources) GetMemorySwap() int64 {
	if x != nil {
		return x.MemorySwap
	}
	return 0
}

func (x *Resources) GetMemorySwappiness() int64 {
	if x != nil {
		return x.MemorySwappiness
	}
	return 0
}

func (x *Resources) GetOomKillDisable() bool {
	if x != nil {
		return x.OomKillDisable
	}
	return false
}

func (x *Resources) GetPidsLimit() int64 {
	if x != nil {
		return x.PidsLimit
	}
	return 0
}

func (x *Resources) GetUlimits() []*Ulimit {
	if x != nil {
		return x.Ulimits
	}
	return nil
}

func (x *Resources) GetCPUCount() int64 {
	if x != nil {
		return x.CPUCount
	}
	return 0
}

func (x *Resources) GetCPUPercent() int64 {
	if x != nil {
		return x.CPUPercent
	}
	return 0
}

func (x *Resources) GetIOMaximumIOps() uint64 {
	if x != nil {
		return x.IOMaximumIOps
	}
	return 0
}

func (x *Resources) GetIOMaximumBandwidth() uint64 {
	if x != nil {
		return x.IOMaximumBandwidth
	}
	return 0
}

type Mount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          string         `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Source        string         `protobuf:"bytes,2,opt,name=Source,proto3" json:"Source,omitempty"`
	Target        string         `protobuf:"bytes,3,opt,name=Target,proto3" json:"Target,omitempty"`
	ReadOnly      bool           `protobuf:"varint,4,opt,name=ReadOnly,proto3" json:"ReadOnly,omitempty"`
	Consistency   string         `protobuf:"bytes,5,opt,name=Consistency,proto3" json:"Consistency,omitempty"`
	BindOptions   *BindOptions   `protobuf:"bytes,6,opt,name=BindOptions,proto3" json:"BindOptions,omitempty"`
	VolumeOptions *VolumeOptions `protobuf:"bytes,7,opt,name=VolumeOptions,proto3" json:"VolumeOptions,omitempty"`
	TmpfsOptions  *TmpfsOptions  `protobuf:"bytes,8,opt,name=TmpfsOptions,proto3" json:"TmpfsOptions,omitempty"`
}

func (x *Mount) Reset() {
	*x = Mount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mount) ProtoMessage() {}

func (x *Mount) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mount.ProtoReflect.Descriptor instead.
func (*Mount) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{22}
}

func (x *Mount) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Mount) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Mount) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Mount) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *Mount) GetConsistency() string {
	if x != nil {
		return x.Consistency
	}
	return ""
}

func (x *Mount) GetBindOptions() *BindOptions {
	if x != nil {
		return x.BindOptions
	}
	return nil
}

func (x *Mount) GetVolumeOptions() *VolumeOptions {
	if x != nil {
		return x.VolumeOptions
	}
	return nil
}

func (x *Mount) GetTmpfsOptions() *TmpfsOptions {
	if x != nil {
		return x.TmpfsOptions
	}
	return nil
}

type EndpointIPAMConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IPv4Address  string   `protobuf:"bytes,1,opt,name=IPv4Address,proto3" json:"IPv4Address,omitempty"`
	IPv6Address  string   `protobuf:"bytes,2,opt,name=IPv6Address,proto3" json:"IPv6Address,omitempty"`
	LinkLocalIPs []string `protobuf:"bytes,3,rep,name=LinkLocalIPs,proto3" json:"LinkLocalIPs,omitempty"`
}

func (x *EndpointIPAMConfig) Reset() {
	*x = EndpointIPAMConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointIPAMConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointIPAMConfig) ProtoMessage() {}

func (x *EndpointIPAMConfig) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointIPAMConfig.ProtoReflect.Descriptor instead.
func (*EndpointIPAMConfig) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{23}
}

func (x *EndpointIPAMConfig) GetIPv4Address() string {
	if x != nil {
		return x.IPv4Address
	}
	return ""
}

func (x *EndpointIPAMConfig) GetIPv6Address() string {
	if x != nil {
		return x.IPv6Address
	}
	return ""
}

func (x *EndpointIPAMConfig) GetLinkLocalIPs() []string {
	if x != nil {
		return x.LinkLocalIPs
	}
	return nil
}

type HealthcheckResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start    int64  `protobuf:"varint,1,opt,name=Start,proto3" json:"Start,omitempty"`
	End      int64  `protobuf:"varint,2,opt,name=End,proto3" json:"End,omitempty"`
	ExitCode int64  `protobuf:"varint,3,opt,name=ExitCode,proto3" json:"ExitCode,omitempty"`
	Output   string `protobuf:"bytes,4,opt,name=Output,proto3" json:"Output,omitempty"`
}

func (x *HealthcheckResult) Reset() {
	*x = HealthcheckResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthcheckResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthcheckResult) ProtoMessage() {}

func (x *HealthcheckResult) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthcheckResult.ProtoReflect.Descriptor instead.
func (*HealthcheckResult) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{24}
}

func (x *HealthcheckResult) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *HealthcheckResult) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *HealthcheckResult) GetExitCode() int64 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *HealthcheckResult) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

type Time struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wall uint64    `protobuf:"varint,1,opt,name=Wall,proto3" json:"Wall,omitempty"`
	Ext  int64     `protobuf:"varint,2,opt,name=Ext,proto3" json:"Ext,omitempty"`
	Loc  *Location `protobuf:"bytes,3,opt,name=Loc,proto3" json:"Loc,omitempty"`
}

func (x *Time) Reset() {
	*x = Time{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Time) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Time) ProtoMessage() {}

func (x *Time) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Time.ProtoReflect.Descriptor instead.
func (*Time) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{25}
}

func (x *Time) GetWall() uint64 {
	if x != nil {
		return x.Wall
	}
	return 0
}

func (x *Time) GetExt() int64 {
	if x != nil {
		return x.Ext
	}
	return 0
}

func (x *Time) GetLoc() *Location {
	if x != nil {
		return x.Loc
	}
	return nil
}

type Zone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Offset int64  `protobuf:"varint,2,opt,name=Offset,proto3" json:"Offset,omitempty"`
	IsDST  bool   `protobuf:"varint,3,opt,name=IsDST,proto3" json:"IsDST,omitempty"`
}

func (x *Zone) Reset() {
	*x = Zone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Zone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Zone) ProtoMessage() {}

func (x *Zone) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Zone.ProtoReflect.Descriptor instead.
func (*Zone) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{26}
}

func (x *Zone) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Zone) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Zone) GetIsDST() bool {
	if x != nil {
		return x.IsDST
	}
	return false
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string       `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Zone       []*Zone      `protobuf:"bytes,2,rep,name=Zone,proto3" json:"Zone,omitempty"`
	Tx         []*ZoneTrans `protobuf:"bytes,3,rep,name=Tx,proto3" json:"Tx,omitempty"`
	CacheStart int64        `protobuf:"varint,4,opt,name=CacheStart,proto3" json:"CacheStart,omitempty"`
	CacheEnd   int64        `protobuf:"varint,5,opt,name=CacheEnd,proto3" json:"CacheEnd,omitempty"`
	CacheZone  *Zone        `protobuf:"bytes,6,opt,name=CacheZone,proto3" json:"CacheZone,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{27}
}

func (x *Location) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Location) GetZone() []*Zone {
	if x != nil {
		return x.Zone
	}
	return nil
}

func (x *Location) GetTx() []*ZoneTrans {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *Location) GetCacheStart() int64 {
	if x != nil {
		return x.CacheStart
	}
	return 0
}

func (x *Location) GetCacheEnd() int64 {
	if x != nil {
		return x.CacheEnd
	}
	return 0
}

func (x *Location) GetCacheZone() *Zone {
	if x != nil {
		return x.CacheZone
	}
	return nil
}

type WeightDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path   string `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	Weight uint32 `protobuf:"varint,2,opt,name=Weight,proto3" json:"Weight,omitempty"`
}

func (x *WeightDevice) Reset() {
	*x = WeightDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeightDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeightDevice) ProtoMessage() {}

func (x *WeightDevice) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeightDevice.ProtoReflect.Descriptor instead.
func (*WeightDevice) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{28}
}

func (x *WeightDevice) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *WeightDevice) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type ThrottleDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	Rate uint64 `protobuf:"varint,2,opt,name=Rate,proto3" json:"Rate,omitempty"`
}

func (x *ThrottleDevice) Reset() {
	*x = ThrottleDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThrottleDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThrottleDevice) ProtoMessage() {}

func (x *ThrottleDevice) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThrottleDevice.ProtoReflect.Descriptor instead.
func (*ThrottleDevice) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{29}
}

func (x *ThrottleDevice) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ThrottleDevice) GetRate() uint64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

type DeviceMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathOnHost        string `protobuf:"bytes,1,opt,name=PathOnHost,proto3" json:"PathOnHost,omitempty"`
	PathInContainer   string `protobuf:"bytes,2,opt,name=PathInContainer,proto3" json:"PathInContainer,omitempty"`
	CgroupPermissions string `protobuf:"bytes,3,opt,name=CgroupPermissions,proto3" json:"CgroupPermissions,omitempty"`
}

func (x *DeviceMapping) Reset() {
	*x = DeviceMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMapping) ProtoMessage() {}

func (x *DeviceMapping) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMapping.ProtoReflect.Descriptor instead.
func (*DeviceMapping) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{30}
}

func (x *DeviceMapping) GetPathOnHost() string {
	if x != nil {
		return x.PathOnHost
	}
	return ""
}

func (x *DeviceMapping) GetPathInContainer() string {
	if x != nil {
		return x.PathInContainer
	}
	return ""
}

func (x *DeviceMapping) GetCgroupPermissions() string {
	if x != nil {
		return x.CgroupPermissions
	}
	return ""
}

type DeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Driver       string              `protobuf:"bytes,1,opt,name=Driver,proto3" json:"Driver,omitempty"`
	Count        int64               `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
	DeviceIDs    []string            `protobuf:"bytes,3,rep,name=DeviceIDs,proto3" json:"DeviceIDs,omitempty"`
	Capabilities []*CapabilitiesList `protobuf:"bytes,4,rep,name=Capabilities,proto3" json:"Capabilities,omitempty"`
	Options      map[string]string   `protobuf:"bytes,5,rep,name=Options,proto3" json:"Options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DeviceRequest) Reset() {
	*x = DeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRequest) ProtoMessage() {}

func (x *DeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRequest.ProtoReflect.Descriptor instead.
func (*DeviceRequest) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{31}
}

func (x *DeviceRequest) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *DeviceRequest) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DeviceRequest) GetDeviceIDs() []string {
	if x != nil {
		return x.DeviceIDs
	}
	return nil
}

func (x *DeviceRequest) GetCapabilities() []*CapabilitiesList {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *DeviceRequest) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

type CapabilitiesList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Capabilities []string `protobuf:"bytes,1,rep,name=Capabilities,proto3" json:"Capabilities,omitempty"`
}

func (x *CapabilitiesList) Reset() {
	*x = CapabilitiesList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapabilitiesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilitiesList) ProtoMessage() {}

func (x *CapabilitiesList) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilitiesList.ProtoReflect.Descriptor instead.
func (*CapabilitiesList) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{32}
}

func (x *CapabilitiesList) GetCapabilities() []string {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

type Ulimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Hard int64  `protobuf:"varint,2,opt,name=Hard,proto3" json:"Hard,omitempty"`
	Soft int64  `protobuf:"varint,3,opt,name=Soft,proto3" json:"Soft,omitempty"`
}

func (x *Ulimit) Reset() {
	*x = Ulimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ulimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ulimit) ProtoMessage() {}

func (x *Ulimit) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ulimit.ProtoReflect.Descriptor instead.
func (*Ulimit) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{33}
}

func (x *Ulimit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Ulimit) GetHard() int64 {
	if x != nil {
		return x.Hard
	}
	return 0
}

func (x *Ulimit) GetSoft() int64 {
	if x != nil {
		return x.Soft
	}
	return 0
}

type BindOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Propagation  string `protobuf:"bytes,1,opt,name=Propagation,proto3" json:"Propagation,omitempty"`
	NonRecursive bool   `protobuf:"varint,2,opt,name=NonRecursive,proto3" json:"NonRecursive,omitempty"`
}

func (x *BindOptions) Reset() {
	*x = BindOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindOptions) ProtoMessage() {}

func (x *BindOptions) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindOptions.ProtoReflect.Descriptor instead.
func (*BindOptions) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{34}
}

func (x *BindOptions) GetPropagation() string {
	if x != nil {
		return x.Propagation
	}
	return ""
}

func (x *BindOptions) GetNonRecursive() bool {
	if x != nil {
		return x.NonRecursive
	}
	return false
}

type Driver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string            `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Options map[string]string `protobuf:"bytes,2,rep,name=Options,proto3" json:"Options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Driver) Reset() {
	*x = Driver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Driver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Driver) ProtoMessage() {}

func (x *Driver) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Driver.ProtoReflect.Descriptor instead.
func (*Driver) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{35}
}

func (x *Driver) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Driver) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

type VolumeOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoCopy       bool              `protobuf:"varint,1,opt,name=NoCopy,proto3" json:"NoCopy,omitempty"`
	Labels       map[string]string `protobuf:"bytes,2,rep,name=Labels,proto3" json:"Labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DriverConfig *Driver           `protobuf:"bytes,3,opt,name=DriverConfig,proto3" json:"DriverConfig,omitempty"`
}

func (x *VolumeOptions) Reset() {
	*x = VolumeOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeOptions) ProtoMessage() {}

func (x *VolumeOptions) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeOptions.ProtoReflect.Descriptor instead.
func (*VolumeOptions) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{36}
}

func (x *VolumeOptions) GetNoCopy() bool {
	if x != nil {
		return x.NoCopy
	}
	return false
}

func (x *VolumeOptions) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *VolumeOptions) GetDriverConfig() *Driver {
	if x != nil {
		return x.DriverConfig
	}
	return nil
}

type TmpfsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SizeBytes int64  `protobuf:"varint,1,opt,name=SizeBytes,proto3" json:"SizeBytes,omitempty"`
	Mode      uint32 `protobuf:"varint,2,opt,name=Mode,proto3" json:"Mode,omitempty"`
}

func (x *TmpfsOptions) Reset() {
	*x = TmpfsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TmpfsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TmpfsOptions) ProtoMessage() {}

func (x *TmpfsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TmpfsOptions.ProtoReflect.Descriptor instead.
func (*TmpfsOptions) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{37}
}

func (x *TmpfsOptions) GetSizeBytes() int64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *TmpfsOptions) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

type ZoneTrans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	When  int64  `protobuf:"varint,1,opt,name=When,proto3" json:"When,omitempty"`
	Index uint32 `protobuf:"varint,2,opt,name=Index,proto3" json:"Index,omitempty"`
	IsStd bool   `protobuf:"varint,3,opt,name=IsStd,proto3" json:"IsStd,omitempty"`
	IsUtc bool   `protobuf:"varint,4,opt,name=IsUtc,proto3" json:"IsUtc,omitempty"`
}

func (x *ZoneTrans) Reset() {
	*x = ZoneTrans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZoneTrans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZoneTrans) ProtoMessage() {}

func (x *ZoneTrans) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZoneTrans.ProtoReflect.Descriptor instead.
func (*ZoneTrans) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{38}
}

func (x *ZoneTrans) GetWhen() int64 {
	if x != nil {
		return x.When
	}
	return 0
}

func (x *ZoneTrans) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ZoneTrans) GetIsStd() bool {
	if x != nil {
		return x.IsStd
	}
	return false
}

func (x *ZoneTrans) GetIsUtc() bool {
	if x != nil {
		return x.IsUtc
	}
	return false
}

type NetworkResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                       `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	ID         string                       `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	Created    int64                        `protobuf:"varint,3,opt,name=Created,proto3" json:"Created,omitempty"`
	Scope      string                       `protobuf:"bytes,4,opt,name=Scope,proto3" json:"Scope,omitempty"`
	Driver     string                       `protobuf:"bytes,5,opt,name=Driver,proto3" json:"Driver,omitempty"`
	EnableIPv6 bool                         `protobuf:"varint,6,opt,name=EnableIPv6,proto3" json:"EnableIPv6,omitempty"`
	IPAM       *IPAM                        `protobuf:"bytes,7,opt,name=IPAM,proto3" json:"IPAM,omitempty"`
	Internal   bool                         `protobuf:"varint,8,opt,name=Internal,proto3" json:"Internal,omitempty"`
	Attachable bool                         `protobuf:"varint,9,opt,name=Attachable,proto3" json:"Attachable,omitempty"`
	Ingress    bool                         `protobuf:"varint,10,opt,name=Ingress,proto3" json:"Ingress,omitempty"`
	ConfigFrom *ConfigReference             `protobuf:"bytes,11,opt,name=ConfigFrom,proto3" json:"ConfigFrom,omitempty"`
	ConfigOnly bool                         `protobuf:"varint,12,opt,name=ConfigOnly,proto3" json:"ConfigOnly,omitempty"`
	Containers map[string]*EndpointResource `protobuf:"bytes,13,rep,name=Containers,proto3" json:"Containers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Options    map[string]string            `protobuf:"bytes,14,rep,name=Options,proto3" json:"Options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Labels     map[string]string            `protobuf:"bytes,15,rep,name=Labels,proto3" json:"Labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Peers      []*PeerInfo                  `protobuf:"bytes,16,rep,name=Peers,proto3" json:"Peers,omitempty"`
	Services   map[string]*ServiceInfo      `protobuf:"bytes,17,rep,name=Services,proto3" json:"Services,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NetworkResource) Reset() {
	*x = NetworkResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkResource) ProtoMessage() {}

func (x *NetworkResource) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkResource.ProtoReflect.Descriptor instead.
func (*NetworkResource) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{39}
}

func (x *NetworkResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkResource) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *NetworkResource) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *NetworkResource) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *NetworkResource) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *NetworkResource) GetEnableIPv6() bool {
	if x != nil {
		return x.EnableIPv6
	}
	return false
}

func (x *NetworkResource) GetIPAM() *IPAM {
	if x != nil {
		return x.IPAM
	}
	return nil
}

func (x *NetworkResource) GetInternal() bool {
	if x != nil {
		return x.Internal
	}
	return false
}

func (x *NetworkResource) GetAttachable() bool {
	if x != nil {
		return x.Attachable
	}
	return false
}

func (x *NetworkResource) GetIngress() bool {
	if x != nil {
		return x.Ingress
	}
	return false
}

func (x *NetworkResource) GetConfigFrom() *ConfigReference {
	if x != nil {
		return x.ConfigFrom
	}
	return nil
}

func (x *NetworkResource) GetConfigOnly() bool {
	if x != nil {
		return x.ConfigOnly
	}
	return false
}

func (x *NetworkResource) GetContainers() map[string]*EndpointResource {
	if x != nil {
		return x.Containers
	}
	return nil
}

func (x *NetworkResource) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *NetworkResource) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *NetworkResource) GetPeers() []*PeerInfo {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *NetworkResource) GetServices() map[string]*ServiceInfo {
	if x != nil {
		return x.Services
	}
	return nil
}

type IPAM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Driver  string            `protobuf:"bytes,1,opt,name=Driver,proto3" json:"Driver,omitempty"`
	Options map[string]string `protobuf:"bytes,2,rep,name=Options,proto3" json:"Options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Config  []*IPAMConfig     `protobuf:"bytes,3,rep,name=Config,proto3" json:"Config,omitempty"`
}

func (x *IPAM) Reset() {
	*x = IPAM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPAM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPAM) ProtoMessage() {}

func (x *IPAM) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPAM.ProtoReflect.Descriptor instead.
func (*IPAM) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{40}
}

func (x *IPAM) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *IPAM) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *IPAM) GetConfig() []*IPAMConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type ConfigReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network string `protobuf:"bytes,1,opt,name=Network,proto3" json:"Network,omitempty"`
}

func (x *ConfigReference) Reset() {
	*x = ConfigReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigReference) ProtoMessage() {}

func (x *ConfigReference) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigReference.ProtoReflect.Descriptor instead.
func (*ConfigReference) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{41}
}

func (x *ConfigReference) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

type PeerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	IP   string `protobuf:"bytes,2,opt,name=IP,proto3" json:"IP,omitempty"`
}

func (x *PeerInfo) Reset() {
	*x = PeerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerInfo) ProtoMessage() {}

func (x *PeerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerInfo.ProtoReflect.Descriptor instead.
func (*PeerInfo) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{42}
}

func (x *PeerInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PeerInfo) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

type IPAMConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet     string            `protobuf:"bytes,1,opt,name=Subnet,proto3" json:"Subnet,omitempty"`
	IPRange    string            `protobuf:"bytes,2,opt,name=IPRange,proto3" json:"IPRange,omitempty"`
	Gateway    string            `protobuf:"bytes,3,opt,name=Gateway,proto3" json:"Gateway,omitempty"`
	AuxAddress map[string]string `protobuf:"bytes,4,rep,name=AuxAddress,proto3" json:"AuxAddress,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IPAMConfig) Reset() {
	*x = IPAMConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPAMConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPAMConfig) ProtoMessage() {}

func (x *IPAMConfig) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPAMConfig.ProtoReflect.Descriptor instead.
func (*IPAMConfig) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{43}
}

func (x *IPAMConfig) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *IPAMConfig) GetIPRange() string {
	if x != nil {
		return x.IPRange
	}
	return ""
}

func (x *IPAMConfig) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *IPAMConfig) GetAuxAddress() map[string]string {
	if x != nil {
		return x.AuxAddress
	}
	return nil
}

type EndpointResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	EndpointID  string `protobuf:"bytes,2,opt,name=EndpointID,proto3" json:"EndpointID,omitempty"`
	MacAddress  string `protobuf:"bytes,3,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
	IPv4Address string `protobuf:"bytes,4,opt,name=IPv4Address,proto3" json:"IPv4Address,omitempty"`
	IPv6Address string `protobuf:"bytes,5,opt,name=IPv6Address,proto3" json:"IPv6Address,omitempty"`
}

func (x *EndpointResource) Reset() {
	*x = EndpointResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointResource) ProtoMessage() {}

func (x *EndpointResource) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointResource.ProtoReflect.Descriptor instead.
func (*EndpointResource) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{44}
}

func (x *EndpointResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EndpointResource) GetEndpointID() string {
	if x != nil {
		return x.EndpointID
	}
	return ""
}

func (x *EndpointResource) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *EndpointResource) GetIPv4Address() string {
	if x != nil {
		return x.IPv4Address
	}
	return ""
}

func (x *EndpointResource) GetIPv6Address() string {
	if x != nil {
		return x.IPv6Address
	}
	return ""
}

type ServiceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VIP          string   `protobuf:"bytes,1,opt,name=VIP,proto3" json:"VIP,omitempty"`
	Ports        []string `protobuf:"bytes,2,rep,name=Ports,proto3" json:"Ports,omitempty"`
	LocalLBIndex int64    `protobuf:"varint,3,opt,name=LocalLBIndex,proto3" json:"LocalLBIndex,omitempty"`
	Tasks        []*Task  `protobuf:"bytes,4,rep,name=Tasks,proto3" json:"Tasks,omitempty"`
}

func (x *ServiceInfo) Reset() {
	*x = ServiceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceInfo) ProtoMessage() {}

func (x *ServiceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceInfo.ProtoReflect.Descriptor instead.
func (*ServiceInfo) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{45}
}

func (x *ServiceInfo) GetVIP() string {
	if x != nil {
		return x.VIP
	}
	return ""
}

func (x *ServiceInfo) GetPorts() []string {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *ServiceInfo) GetLocalLBIndex() int64 {
	if x != nil {
		return x.LocalLBIndex
	}
	return 0
}

func (x *ServiceInfo) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string            `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	EndpointID string            `protobuf:"bytes,2,opt,name=EndpointID,proto3" json:"EndpointID,omitempty"`
	EndpointIP string            `protobuf:"bytes,3,opt,name=EndpointIP,proto3" json:"EndpointIP,omitempty"`
	Info       map[string]string `protobuf:"bytes,4,rep,name=Info,proto3" json:"Info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{46}
}

func (x *Task) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Task) GetEndpointID() string {
	if x != nil {
		return x.EndpointID
	}
	return ""
}

func (x *Task) GetEndpointIP() string {
	if x != nil {
		return x.EndpointIP
	}
	return ""
}

func (x *Task) GetInfo() map[string]string {
	if x != nil {
		return x.Info
	}
	return nil
}

type ContainerInspectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ContainerInspectRequest) Reset() {
	*x = ContainerInspectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerInspectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInspectRequest) ProtoMessage() {}

func (x *ContainerInspectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInspectRequest.ProtoReflect.Descriptor instead.
func (*ContainerInspectRequest) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{47}
}

func (x *ContainerInspectRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ContainerInspectReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            string         `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ContainerJSON *ContainerJSON `protobuf:"bytes,2,opt,name=ContainerJSON,proto3" json:"ContainerJSON,omitempty"`
}

func (x *ContainerInspectReply) Reset() {
	*x = ContainerInspectReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerInspectReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInspectReply) ProtoMessage() {}

func (x *ContainerInspectReply) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInspectReply.ProtoReflect.Descriptor instead.
func (*ContainerInspectReply) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{48}
}

func (x *ContainerInspectReply) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ContainerInspectReply) GetContainerJSON() *ContainerJSON {
	if x != nil {
		return x.ContainerJSON
	}
	return nil
}

type ContainerError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   string `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (x *ContainerError) Reset() {
	*x = ContainerError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerError) ProtoMessage() {}

func (x *ContainerError) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerError.ProtoReflect.Descriptor instead.
func (*ContainerError) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{49}
}

func (x *ContainerError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ContainerError) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type NetworkInspectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *NetworkInspectRequest) Reset() {
	*x = NetworkInspectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkInspectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInspectRequest) ProtoMessage() {}

func (x *NetworkInspectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInspectRequest.ProtoReflect.Descriptor instead.
func (*NetworkInspectRequest) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{50}
}

func (x *NetworkInspectRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type NetworkInspectReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              string           `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	NetworkResource *NetworkResource `protobuf:"bytes,2,opt,name=NetworkResource,proto3" json:"NetworkResource,omitempty"`
}

func (x *NetworkInspectReply) Reset() {
	*x = NetworkInspectReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_final_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkInspectReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInspectReply) ProtoMessage() {}

func (x *NetworkInspectReply) ProtoReflect() protoreflect.Message {
	mi := &file_final_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInspectReply.ProtoReflect.Descriptor instead.
func (*NetworkInspectReply) Descriptor() ([]byte, []int) {
	return file_final_proto_rawDescGZIP(), []int{51}
}

func (x *NetworkInspectReply) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *NetworkInspectReply) GetNetworkResource() *NetworkResource {
	if x != nil {
		return x.NetworkResource
	}
	return nil
}

var File_final_proto protoreflect.FileDescriptor

var file_final_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x69,
	0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x22, 0xd3,
	0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4a, 0x53, 0x4f, 0x4e,
	0x12, 0x60, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4a, 0x53, 0x4f,
	0x4e, 0x42, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6f,
	0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4a, 0x53, 0x4f, 0x4e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4a, 0x53, 0x4f, 0x4e, 0x42, 0x61,
	0x73, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x06, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5a, 0x0a, 0x0f, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x22, 0xd7, 0x06, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x4a, 0x53, 0x4f, 0x4e, 0x42, 0x61, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x72, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x41, 0x72, 0x67, 0x73, 0x12, 0x45, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6f,
	0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x50, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4c, 0x6f, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x42, 0x0a,
	0x04, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6f,
	0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1e, 0x0a,
	0x0a, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x22, 0x0a,
	0x0c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x41, 0x70, 0x70, 0x41,
	0x72, 0x6d, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45,
	0x78, 0x65, 0x63, 0x49, 0x44, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x45, 0x78,
	0x65, 0x63, 0x49, 0x44, 0x73, 0x12, 0x4b, 0x0a, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x74, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x6f, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x52, 0x0a, 0x0b, 0x47, 0x72, 0x61, 0x70, 0x68, 0x44, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x77,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x77, 0x12, 0x1e,
	0x0a, 0x0a, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x46, 0x73, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x46, 0x73, 0x22, 0xcc,
	0x01, 0x0a, 0x0a, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x52,
	0x57, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x52, 0x57, 0x12, 0x20, 0x0a, 0x0b, 0x50,
	0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbf, 0x09,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x53, 0x74, 0x64, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x53, 0x74, 0x64, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x53, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x53, 0x74, 0x64, 0x65,
	0x72, 0x72, 0x12, 0x5d, 0x0a, 0x0c, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0c, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x54, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x64, 0x69, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x64, 0x69,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x64, 0x69, 0x6e, 0x4f, 0x6e, 0x63, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x53, 0x74, 0x64, 0x69, 0x6e, 0x4f, 0x6e, 0x63, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x45, 0x6e, 0x76, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x45, 0x6e,
	0x76, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x6d, 0x64, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03,
	0x43, 0x6d, 0x64, 0x12, 0x4f, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x72, 0x67, 0x73, 0x45, 0x73, 0x63, 0x61,
	0x70, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x41, 0x72, 0x67, 0x73, 0x45,
	0x73, 0x63, 0x61, 0x70, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x07,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x6e, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x12, 0x4b, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x20, 0x0a,
	0x0b, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x53, 0x68, 0x65, 0x6c, 0x6c, 0x1a, 0x68, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f,
	0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x63, 0x0a, 0x0c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x08, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0xb6, 0x03, 0x0a, 0x0f, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x66, 0x0a,
	0x13, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x42, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6f, 0x74,
	0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x13, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x42, 0x61, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x16, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x16,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x5a, 0x0a, 0x08, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x1a, 0x6e, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xef, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x1c, 0x0a, 0x09, 0x4f, 0x4f, 0x4d, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x4f, 0x4f, 0x4d, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x44, 0x65, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x44, 0x65, 0x61,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x50, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x45, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x06, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x22, 0xa0, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x41, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x43, 0x70, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x70, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x52, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbc, 0x01, 0x0a, 0x07, 0x50, 0x6f, 0x72, 0x74,
	0x4d, 0x61, 0x70, 0x12, 0x46, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x1a, 0x69, 0x0a, 0x09, 0x50,
	0x6f, 0x72, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6f, 0x74, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x61, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0b, 0x50, 0x6f, 0x72,
	0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x50, 0x6f,
	0x72, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x8b, 0x0d, 0x0a, 0x0a, 0x48, 0x6f,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x69, 0x6e, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x42, 0x69, 0x6e, 0x64, 0x73, 0x12, 0x28,
	0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x46, 0x69, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x44, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f,
	0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x74,
	0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x4d, 0x61, 0x70, 0x52, 0x0c, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x54, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6f, 0x74, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x6f,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x41, 0x75,
	0x74, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x43, 0x61, 0x70, 0x41, 0x64, 0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x43, 0x61, 0x70, 0x41, 0x64, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x61, 0x70, 0x44, 0x72, 0x6f,
	0x70, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x43, 0x61, 0x70, 0x44, 0x72, 0x6f, 0x70,
	0x12, 0x22, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x4e, 0x53, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x03, 0x44, 0x4e, 0x53, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x4e, 0x53, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x4e, 0x53, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x4e, 0x53, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x44, 0x4e, 0x53, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x48, 0x6f, 0x73,
	0x74, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x48,
	0x6f, 0x73, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x49, 0x70, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x49, 0x70, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x6f, 0x6d, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x6a, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4f,
	0x6f, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x6a, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x69,
	0x64, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x69, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x41,
	0x6c, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x41, 0x6c, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x52, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x66, 0x73,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x52, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79,
	0x52, 0x6f, 0x6f, 0x74, 0x66, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x4f, 0x70, 0x74, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x12, 0x5b, 0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x69,
	0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x48,
	0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x4f, 0x70, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x4f, 0x70, 0x74, 0x12, 0x4c, 0x0a, 0x05, 0x54, 0x6d, 0x70, 0x66, 0x73, 0x18, 0x1c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x54, 0x6d, 0x70, 0x66, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x54, 0x6d,
	0x70, 0x66, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x54, 0x53, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x55, 0x54, 0x53, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x53, 0x68, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x53, 0x68, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x52, 0x0a, 0x07, 0x53, 0x79, 0x73, 0x63, 0x74,
	0x6c, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x63, 0x74, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x53, 0x79, 0x73, 0x63, 0x74, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65,
	0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x09, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x43, 0x0a,
	0x06, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x54, 0x6d, 0x70, 0x66, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x53,
	0x79, 0x73, 0x63, 0x74, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xae, 0x01, 0x0a, 0x0f, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x69, 0x6f, 0x74, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x1a,
	0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x94, 0x01, 0x0a, 0x0c, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22,
	0xf9, 0x03, 0x0a, 0x13, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x42, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x0b, 0x48, 0x61, 0x69, 0x72, 0x70, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x48, 0x61, 0x69, 0x72, 0x70, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x32, 0x0a, 0x14, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x50, 0x76, 0x36,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x4c,
	0x69, 0x6e, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x50, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x49, 0x50, 0x76, 0x36, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x16, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x50,
	0x76, 0x36, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x3e, 0x0a, 0x05, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x74,
	0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x4d, 0x61, 0x70, 0x52, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x4b, 0x65, 0x79, 0x12, 0x5c, 0x0a, 0x14, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x74, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x14, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x50,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x16, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x50, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x74, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x16, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x50,
	0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x3b, 0x0a, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x22, 0xb4, 0x02, 0x0a, 0x16, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x2c, 0x0a,
	0x11, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x50, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x49, 0x50, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x50, 0x76, 0x36, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x49, 0x50, 0x76, 0x36, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x49,
	0x50, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x49, 0x50, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x49, 0x50, 0x76, 0x36, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x49, 0x50, 0x76, 0x36, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0xf3, 0x04, 0x0a, 0x10, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x53, 0x0a, 0x0a, 0x49, 0x50, 0x41, 0x4d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x49, 0x50, 0x41, 0x4d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x49,
	0x50, 0x41, 0x4d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x49, 0x50, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x49, 0x50, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x50, 0x76, 0x36, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x50, 0x76, 0x36, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x50, 0x76,
	0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x50, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x30, 0x0a, 0x13, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x50, 0x76, 0x36, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x50, 0x76, 0x36, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x4c, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x61, 0x0a, 0x0a, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x74,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x4f, 0x70, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x4f, 0x70, 0x74, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x4f, 0x70, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8c, 0x01, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x61, 0x69, 0x6c,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x46, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x44,
	0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6f,
	0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x03, 0x4c, 0x6f, 0x67, 0x22, 0xaa, 0x01, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65,
	0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x41, 0x0a, 0x0b, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x50, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x22, 0x51, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x97, 0x0c, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x50, 0x55, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x50, 0x55, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x4e,
	0x61, 0x6e, 0x6f, 0x43, 0x50, 0x55, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4e,
	0x61, 0x6e, 0x6f, 0x43, 0x50, 0x55, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x42,
	0x6c, 0x6b, 0x69, 0x6f, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x42, 0x6c, 0x6b, 0x69, 0x6f, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x5b, 0x0a,
	0x11, 0x42, 0x6c, 0x6b, 0x69, 0x6f, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x11, 0x42, 0x6c, 0x6b, 0x69, 0x6f, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x12, 0x42, 0x6c,
	0x6b, 0x69, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x42, 0x70, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65,
	0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x12, 0x42, 0x6c, 0x6b, 0x69, 0x6f, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x42, 0x70, 0x73, 0x12, 0x61, 0x0a, 0x13, 0x42,
	0x6c, 0x6b, 0x69, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42,
	0x70, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x68, 0x72, 0x6f, 0x74,
	0x74, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x13, 0x42, 0x6c, 0x6b, 0x69, 0x6f,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x70, 0x73, 0x12, 0x61,
	0x0a, 0x13, 0x42, 0x6c, 0x6b, 0x69, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x49, 0x4f, 0x70, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6f,
	0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x68,
	0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x13, 0x42, 0x6c,
	0x6b, 0x69, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x49, 0x4f, 0x70,
	0x73, 0x12, 0x63, 0x0a, 0x14, 0x42, 0x6c, 0x6b, 0x69, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x4f, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70,
	0x63, 0x2e, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x14, 0x42, 0x6c, 0x6b, 0x69, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x49, 0x4f, 0x70, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x50, 0x55, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x50, 0x55, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x50, 0x55, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x43, 0x50, 0x55, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x12, 0x2c, 0x0a, 0x11, 0x43, 0x50, 0x55, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x43, 0x50, 0x55,
	0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2e,
	0x0a, 0x12, 0x43, 0x50, 0x55, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x43, 0x50, 0x55, 0x52,
	0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x43, 0x70, 0x75, 0x73, 0x65, 0x74, 0x43, 0x70, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x43, 0x70, 0x75, 0x73, 0x65, 0x74, 0x43, 0x70, 0x75, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x43, 0x70, 0x75, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x43, 0x70, 0x75, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x73, 0x12, 0x48,
	0x0a, 0x07, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70,
	0x63, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52,
	0x07, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x54, 0x43, 0x50, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x4b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x43, 0x50, 0x12, 0x2c, 0x0a, 0x11,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x53, 0x77, 0x61, 0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x77, 0x61, 0x70, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x53, 0x77, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x77, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x6f, 0x6d, 0x4b, 0x69, 0x6c,
	0x6c, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x4f, 0x6f, 0x6d, 0x4b, 0x69, 0x6c, 0x6c, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x50, 0x69, 0x64, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x50, 0x69, 0x64, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x41, 0x0a, 0x07,
	0x55, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e,
	0x55, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x07, 0x55, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x43, 0x50, 0x55, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x43, 0x50, 0x55, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x50, 0x55, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x43, 0x50, 0x55, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x49,
	0x4f, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x49, 0x4f, 0x70, 0x73, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x49, 0x4f, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x49, 0x4f, 0x70,
	0x73, 0x12, 0x2e, 0x0a, 0x12, 0x49, 0x4f, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x49,
	0x4f, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x22, 0x82, 0x03, 0x0a, 0x05, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x43,
	0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x4e, 0x0a,
	0x0b, 0x42, 0x69, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0b, 0x42, 0x69, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54, 0x0a,
	0x0d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x51, 0x0a, 0x0c, 0x54, 0x6d, 0x70, 0x66, 0x73, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x74, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x6d, 0x70, 0x66,
	0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x54, 0x6d, 0x70, 0x66, 0x73, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x7c, 0x0a, 0x12, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x49, 0x50, 0x41, 0x4d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x0a, 0x0b,
	0x49, 0x50, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x49, 0x50, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x49, 0x50, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x50, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x50, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x49, 0x50, 0x73, 0x22, 0x6f, 0x0a, 0x11, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x45, 0x6e,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x45, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x69, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x57, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x57, 0x61, 0x6c,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x45, 0x78, 0x74, 0x12, 0x3b, 0x0a, 0x03, 0x4c, 0x6f, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x4c, 0x6f, 0x63,
	0x22, 0x48, 0x0a, 0x04, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x44, 0x53, 0x54, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x44, 0x53, 0x54, 0x22, 0x96, 0x02, 0x0a, 0x08, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x5a,
	0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x74, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x5a, 0x6f, 0x6e, 0x65,
	0x52, 0x04, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x3a, 0x0a, 0x02, 0x54, 0x78, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x70, 0x63, 0x2e, 0x5a, 0x6f, 0x6e, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x52, 0x02,
	0x54, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x43,
	0x0a, 0x09, 0x43, 0x61, 0x63, 0x68, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x70, 0x63, 0x2e, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x09, 0x43, 0x61, 0x63, 0x68, 0x65, 0x5a,
	0x6f, 0x6e, 0x65, 0x22, 0x3a, 0x0a, 0x0c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x38, 0x0a, 0x0e, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x52, 0x61, 0x74, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x0d, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x50,
	0x61, 0x74, 0x68, 0x4f, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x50, 0x61, 0x74, 0x68, 0x4f, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x50,
	0x61, 0x74, 0x68, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x61, 0x74, 0x68, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xc5, 0x02, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44,
	0x73, 0x12, 0x55, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x69, 0x6f, 0x74, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x3a, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x36, 0x0a, 0x10, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x22, 0x44, 0x0a, 0x06, 0x55, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x48, 0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6f, 0x66, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x53, 0x6f, 0x66, 0x74, 0x22, 0x53, 0x0a, 0x0b, 0x42, 0x69, 0x6e,
	0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x70,
	0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50,
	0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x22, 0xa8,
	0x01, 0x0a, 0x06, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a,
	0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3a, 0x0a,
	0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x83, 0x02, 0x0a, 0x0d, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4e,
	0x6f, 0x43, 0x6f, 0x70, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x4e, 0x6f, 0x43,
	0x6f, 0x70, 0x79, 0x12, 0x52, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x44, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x0c, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x40, 0x0a, 0x0c, 0x54, 0x6d, 0x70, 0x66, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x4d, 0x6f, 0x64,
	0x65, 0x22, 0x61, 0x0a, 0x09, 0x5a, 0x6f, 0x6e, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x57, 0x68, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x57, 0x68,
	0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x53, 0x74,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x53, 0x74, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x49, 0x73, 0x55, 0x74, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49,
	0x73, 0x55, 0x74, 0x63, 0x22, 0xa2, 0x09, 0x0a, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x50,
	0x76, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x50, 0x76, 0x36, 0x12, 0x39, 0x0a, 0x04, 0x49, 0x50, 0x41, 0x4d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x50, 0x41, 0x4d, 0x52, 0x04, 0x49, 0x50, 0x41, 0x4d, 0x12,
	0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x50, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46,
	0x72, 0x6f, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6f, 0x74, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x60, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x69, 0x6f,
	0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x57, 0x0a, 0x07, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x69, 0x6f, 0x74,
	0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x54, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3f, 0x0a, 0x05, 0x50, 0x65, 0x65, 0x72,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x5a, 0x0a, 0x08, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x69, 0x6f,
	0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x70, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6f, 0x74, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x69,
	0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xed, 0x01, 0x0a, 0x04, 0x49, 0x50,
	0x41, 0x4d, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x07, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6f,
	0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x50,
	0x41, 0x4d, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x50, 0x41, 0x4d, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x3a, 0x0a,
	0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2b, 0x0a, 0x0f, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x2e, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x22, 0xf4, 0x01, 0x0a, 0x0a, 0x49, 0x50, 0x41, 0x4d, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x49, 0x50, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x49, 0x50, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x12, 0x5b, 0x0a, 0x0a, 0x41, 0x75, 0x78, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x50, 0x41, 0x4d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x75, 0x78, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x41, 0x75, 0x78, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x3d,
	0x0a, 0x0f, 0x41, 0x75, 0x78, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xaa, 0x01,
	0x0a, 0x10, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x50, 0x76, 0x34, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x50, 0x76,
	0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x50, 0x76, 0x36,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x49,
	0x50, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x0b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x49,
	0x50, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x49, 0x50, 0x12, 0x14, 0x0a, 0x05,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4c, 0x42, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4c,
	0x42, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3b, 0x0a, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x50, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x50,
	0x12, 0x43, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x37, 0x0a, 0x09, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x29,
	0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x7d, 0x0a, 0x15, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x54, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4a,
	0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6f, 0x74, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x4a, 0x53, 0x4f, 0x4e, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x40, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x27, 0x0a, 0x15, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x22, 0x81, 0x01, 0x0a, 0x13, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x5a, 0x0a, 0x0f, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x32, 0x9a, 0x02, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x86, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x12, 0x38, 0x2e,
	0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x80, 0x01, 0x0a, 0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x12, 0x36, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x69,
	0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x68, 0x65, 0x6c, 0x6d, 0x75, 0x74, 0x6b, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x2f,
	0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_final_proto_rawDescOnce sync.Once
	file_final_proto_rawDescData = file_final_proto_rawDesc
)

func file_final_proto_rawDescGZIP() []byte {
	file_final_proto_rawDescOnce.Do(func() {
		file_final_proto_rawDescData = protoimpl.X.CompressGZIP(file_final_proto_rawDescData)
	})
	return file_final_proto_rawDescData
}

var file_final_proto_msgTypes = make([]protoimpl.MessageInfo, 74)
var file_final_proto_goTypes = []interface{}{
	(*ContainerJSON)(nil),           // 0: iotmakerDockerCommunicationGrpc.ContainerJSON
	(*ContainerJSONBase)(nil),       // 1: iotmakerDockerCommunicationGrpc.ContainerJSONBase
	(*MountPoint)(nil),              // 2: iotmakerDockerCommunicationGrpc.MountPoint
	(*Config)(nil),                  // 3: iotmakerDockerCommunicationGrpc.Config
	(*Struct)(nil),                  // 4: iotmakerDockerCommunicationGrpc.Struct
	(*NetworkSettings)(nil),         // 5: iotmakerDockerCommunicationGrpc.NetworkSettings
	(*ContainerState)(nil),          // 6: iotmakerDockerCommunicationGrpc.ContainerState
	(*ContainerNode)(nil),           // 7: iotmakerDockerCommunicationGrpc.ContainerNode
	(*PortMap)(nil),                 // 8: iotmakerDockerCommunicationGrpc.PortMap
	(*PortBindingList)(nil),         // 9: iotmakerDockerCommunicationGrpc.PortBindingList
	(*HostConfig)(nil),              // 10: iotmakerDockerCommunicationGrpc.HostConfig
	(*GraphDriverData)(nil),         // 11: iotmakerDockerCommunicationGrpc.GraphDriverData
	(*HealthConfig)(nil),            // 12: iotmakerDockerCommunicationGrpc.HealthConfig
	(*NetworkSettingsBase)(nil),     // 13: iotmakerDockerCommunicationGrpc.NetworkSettingsBase
	(*Address)(nil),                 // 14: iotmakerDockerCommunicationGrpc.Address
	(*DefaultNetworkSettings)(nil),  // 15: iotmakerDockerCommunicationGrpc.DefaultNetworkSettings
	(*EndpointSettings)(nil),        // 16: iotmakerDockerCommunicationGrpc.EndpointSettings
	(*Health)(nil),                  // 17: iotmakerDockerCommunicationGrpc.Health
	(*LogConfig)(nil),               // 18: iotmakerDockerCommunicationGrpc.LogConfig
	(*PortBinding)(nil),             // 19: iotmakerDockerCommunicationGrpc.PortBinding
	(*RestartPolicy)(nil),           // 20: iotmakerDockerCommunicationGrpc.RestartPolicy
	(*Resources)(nil),               // 21: iotmakerDockerCommunicationGrpc.Resources
	(*Mount)(nil),                   // 22: iotmakerDockerCommunicationGrpc.Mount
	(*EndpointIPAMConfig)(nil),      // 23: iotmakerDockerCommunicationGrpc.EndpointIPAMConfig
	(*HealthcheckResult)(nil),       // 24: iotmakerDockerCommunicationGrpc.HealthcheckResult
	(*Time)(nil),                    // 25: iotmakerDockerCommunicationGrpc.Time
	(*Zone)(nil),                    // 26: iotmakerDockerCommunicationGrpc.Zone
	(*Location)(nil),                // 27: iotmakerDockerCommunicationGrpc.Location
	(*WeightDevice)(nil),            // 28: iotmakerDockerCommunicationGrpc.WeightDevice
	(*ThrottleDevice)(nil),          // 29: iotmakerDockerCommunicationGrpc.ThrottleDevice
	(*DeviceMapping)(nil),           // 30: iotmakerDockerCommunicationGrpc.DeviceMapping
	(*DeviceRequest)(nil),           // 31: iotmakerDockerCommunicationGrpc.DeviceRequest
	(*CapabilitiesList)(nil),        // 32: iotmakerDockerCommunicationGrpc.CapabilitiesList
	(*Ulimit)(nil),                  // 33: iotmakerDockerCommunicationGrpc.Ulimit
	(*BindOptions)(nil),             // 34: iotmakerDockerCommunicationGrpc.BindOptions
	(*Driver)(nil),                  // 35: iotmakerDockerCommunicationGrpc.Driver
	(*VolumeOptions)(nil),           // 36: iotmakerDockerCommunicationGrpc.VolumeOptions
	(*TmpfsOptions)(nil),            // 37: iotmakerDockerCommunicationGrpc.TmpfsOptions
	(*ZoneTrans)(nil),               // 38: iotmakerDockerCommunicationGrpc.ZoneTrans
	(*NetworkResource)(nil),         // 39: iotmakerDockerCommunicationGrpc.NetworkResource
	(*IPAM)(nil),                    // 40: iotmakerDockerCommunicationGrpc.IPAM
	(*ConfigReference)(nil),         // 41: iotmakerDockerCommunicationGrpc.ConfigReference
	(*PeerInfo)(nil),                // 42: iotmakerDockerCommunicationGrpc.PeerInfo
	(*IPAMConfig)(nil),              // 43: iotmakerDockerCommunicationGrpc.IPAMConfig
	(*EndpointResource)(nil),        // 44: iotmakerDockerCommunicationGrpc.EndpointResource
	(*ServiceInfo)(nil),             // 45: iotmakerDockerCommunicationGrpc.ServiceInfo
	(*Task)(nil),                    // 46: iotmakerDockerCommunicationGrpc.Task
	(*ContainerInspectRequest)(nil), // 47: iotmakerDockerCommunicationGrpc.ContainerInspectRequest
	(*ContainerInspectReply)(nil),   // 48: iotmakerDockerCommunicationGrpc.ContainerInspectReply
	(*ContainerError)(nil),          // 49: iotmakerDockerCommunicationGrpc.ContainerError
	(*NetworkInspectRequest)(nil),   // 50: iotmakerDockerCommunicationGrpc.NetworkInspectRequest
	(*NetworkInspectReply)(nil),     // 51: iotmakerDockerCommunicationGrpc.NetworkInspectReply
	nil,                             // 52: iotmakerDockerCommunicationGrpc.Config.ExposedPortsEntry
	nil,                             // 53: iotmakerDockerCommunicationGrpc.Config.VolumesEntry
	nil,                             // 54: iotmakerDockerCommunicationGrpc.Config.LabelsEntry
	nil,                             // 55: iotmakerDockerCommunicationGrpc.NetworkSettings.NetworksEntry
	nil,                             // 56: iotmakerDockerCommunicationGrpc.ContainerNode.LabelsEntry
	nil,                             // 57: iotmakerDockerCommunicationGrpc.PortMap.PortEntry
	nil,                             // 58: iotmakerDockerCommunicationGrpc.HostConfig.StorageOptEntry
	nil,                             // 59: iotmakerDockerCommunicationGrpc.HostConfig.TmpfsEntry
	nil,                             // 60: iotmakerDockerCommunicationGrpc.HostConfig.SysctlsEntry
	nil,                             // 61: iotmakerDockerCommunicationGrpc.GraphDriverData.DataEntry
	nil,                             // 62: iotmakerDockerCommunicationGrpc.EndpointSettings.DriverOptsEntry
	nil,                             // 63: iotmakerDockerCommunicationGrpc.LogConfig.ConfigEntry
	nil,                             // 64: iotmakerDockerCommunicationGrpc.DeviceRequest.OptionsEntry
	nil,                             // 65: iotmakerDockerCommunicationGrpc.Driver.OptionsEntry
	nil,                             // 66: iotmakerDockerCommunicationGrpc.VolumeOptions.LabelsEntry
	nil,                             // 67: iotmakerDockerCommunicationGrpc.NetworkResource.ContainersEntry
	nil,                             // 68: iotmakerDockerCommunicationGrpc.NetworkResource.OptionsEntry
	nil,                             // 69: iotmakerDockerCommunicationGrpc.NetworkResource.LabelsEntry
	nil,                             // 70: iotmakerDockerCommunicationGrpc.NetworkResource.ServicesEntry
	nil,                             // 71: iotmakerDockerCommunicationGrpc.IPAM.OptionsEntry
	nil,                             // 72: iotmakerDockerCommunicationGrpc.IPAMConfig.AuxAddressEntry
	nil,                             // 73: iotmakerDockerCommunicationGrpc.Task.InfoEntry
}
var file_final_proto_depIdxs = []int32{
	1,  // 0: iotmakerDockerCommunicationGrpc.ContainerJSON.ContainerJSONBase:type_name -> iotmakerDockerCommunicationGrpc.ContainerJSONBase
	2,  // 1: iotmakerDockerCommunicationGrpc.ContainerJSON.Mounts:type_name -> iotmakerDockerCommunicationGrpc.MountPoint
	3,  // 2: iotmakerDockerCommunicationGrpc.ContainerJSON.Config:type_name -> iotmakerDockerCommunicationGrpc.Config
	5,  // 3: iotmakerDockerCommunicationGrpc.ContainerJSON.NetworkSettings:type_name -> iotmakerDockerCommunicationGrpc.NetworkSettings
	6,  // 4: iotmakerDockerCommunicationGrpc.ContainerJSONBase.State:type_name -> iotmakerDockerCommunicationGrpc.ContainerState
	7,  // 5: iotmakerDockerCommunicationGrpc.ContainerJSONBase.Node:type_name -> iotmakerDockerCommunicationGrpc.ContainerNode
	10, // 6: iotmakerDockerCommunicationGrpc.ContainerJSONBase.HostConfig:type_name -> iotmakerDockerCommunicationGrpc.HostConfig
	11, // 7: iotmakerDockerCommunicationGrpc.ContainerJSONBase.GraphDriver:type_name -> iotmakerDockerCommunicationGrpc.GraphDriverData
	52, // 8: iotmakerDockerCommunicationGrpc.Config.ExposedPorts:type_name -> iotmakerDockerCommunicationGrpc.Config.ExposedPortsEntry
	12, // 9: iotmakerDockerCommunicationGrpc.Config.Healthcheck:type_name -> iotmakerDockerCommunicationGrpc.HealthConfig
	53, // 10: iotmakerDockerCommunicationGrpc.Config.Volumes:type_name -> iotmakerDockerCommunicationGrpc.Config.VolumesEntry
	54, // 11: iotmakerDockerCommunicationGrpc.Config.Labels:type_name -> iotmakerDockerCommunicationGrpc.Config.LabelsEntry
	13, // 12: iotmakerDockerCommunicationGrpc.NetworkSettings.NetworkSettingsBase:type_name -> iotmakerDockerCommunicationGrpc.NetworkSettingsBase
	15, // 13: iotmakerDockerCommunicationGrpc.NetworkSettings.DefaultNetworkSettings:type_name -> iotmakerDockerCommunicationGrpc.DefaultNetworkSettings
	55, // 14: iotmakerDockerCommunicationGrpc.NetworkSettings.Networks:type_name -> iotmakerDockerCommunicationGrpc.NetworkSettings.NetworksEntry
	17, // 15: iotmakerDockerCommunicationGrpc.ContainerState.Health:type_name -> iotmakerDockerCommunicationGrpc.Health
	56, // 16: iotmakerDockerCommunicationGrpc.ContainerNode.Labels:type_name -> iotmakerDockerCommunicationGrpc.ContainerNode.LabelsEntry
	57, // 17: iotmakerDockerCommunicationGrpc.PortMap.Port:type_name -> iotmakerDockerCommunicationGrpc.PortMap.PortEntry
	19, // 18: iotmakerDockerCommunicationGrpc.PortBindingList.PortBinding:type_name -> iotmakerDockerCommunicationGrpc.PortBinding
	18, // 19: iotmakerDockerCommunicationGrpc.HostConfig.LogConfig:type_name -> iotmakerDockerCommunicationGrpc.LogConfig
	8,  // 20: iotmakerDockerCommunicationGrpc.HostConfig.PortBindings:type_name -> iotmakerDockerCommunicationGrpc.PortMap
	20, // 21: iotmakerDockerCommunicationGrpc.HostConfig.RestartPolicy:type_name -> iotmakerDockerCommunicationGrpc.RestartPolicy
	58, // 22: iotmakerDockerCommunicationGrpc.HostConfig.StorageOpt:type_name -> iotmakerDockerCommunicationGrpc.HostConfig.StorageOptEntry
	59, // 23: iotmakerDockerCommunicationGrpc.HostConfig.Tmpfs:type_name -> iotmakerDockerCommunicationGrpc.HostConfig.TmpfsEntry
	60, // 24: iotmakerDockerCommunicationGrpc.HostConfig.Sysctls:type_name -> iotmakerDockerCommunicationGrpc.HostConfig.SysctlsEntry
	21, // 25: iotmakerDockerCommunicationGrpc.HostConfig.Resources:type_name -> iotmakerDockerCommunicationGrpc.Resources
	2,  // 26: iotmakerDockerCommunicationGrpc.HostConfig.Mounts:type_name -> iotmakerDockerCommunicationGrpc.MountPoint
	61, // 27: iotmakerDockerCommunicationGrpc.GraphDriverData.Data:type_name -> iotmakerDockerCommunicationGrpc.GraphDriverData.DataEntry
	8,  // 28: iotmakerDockerCommunicationGrpc.NetworkSettingsBase.Ports:type_name -> iotmakerDockerCommunicationGrpc.PortMap
	14, // 29: iotmakerDockerCommunicationGrpc.NetworkSettingsBase.SecondaryIPAddresses:type_name -> iotmakerDockerCommunicationGrpc.Address
	14, // 30: iotmakerDockerCommunicationGrpc.NetworkSettingsBase.SecondaryIPv6Addresses:type_name -> iotmakerDockerCommunicationGrpc.Address
	23, // 31: iotmakerDockerCommunicationGrpc.EndpointSettings.IPAMConfig:type_name -> iotmakerDockerCommunicationGrpc.EndpointIPAMConfig
	62, // 32: iotmakerDockerCommunicationGrpc.EndpointSettings.DriverOpts:type_name -> iotmakerDockerCommunicationGrpc.EndpointSettings.DriverOptsEntry
	24, // 33: iotmakerDockerCommunicationGrpc.Health.Log:type_name -> iotmakerDockerCommunicationGrpc.HealthcheckResult
	63, // 34: iotmakerDockerCommunicationGrpc.LogConfig.Config:type_name -> iotmakerDockerCommunicationGrpc.LogConfig.ConfigEntry
	28, // 35: iotmakerDockerCommunicationGrpc.Resources.BlkioWeightDevice:type_name -> iotmakerDockerCommunicationGrpc.WeightDevice
	29, // 36: iotmakerDockerCommunicationGrpc.Resources.BlkioDeviceReadBps:type_name -> iotmakerDockerCommunicationGrpc.ThrottleDevice
	29, // 37: iotmakerDockerCommunicationGrpc.Resources.BlkioDeviceWriteBps:type_name -> iotmakerDockerCommunicationGrpc.ThrottleDevice
	29, // 38: iotmakerDockerCommunicationGrpc.Resources.BlkioDeviceReadIOps:type_name -> iotmakerDockerCommunicationGrpc.ThrottleDevice
	29, // 39: iotmakerDockerCommunicationGrpc.Resources.BlkioDeviceWriteIOps:type_name -> iotmakerDockerCommunicationGrpc.ThrottleDevice
	30, // 40: iotmakerDockerCommunicationGrpc.Resources.Devices:type_name -> iotmakerDockerCommunicationGrpc.DeviceMapping
	31, // 41: iotmakerDockerCommunicationGrpc.Resources.DeviceRequests:type_name -> iotmakerDockerCommunicationGrpc.DeviceRequest
	33, // 42: iotmakerDockerCommunicationGrpc.Resources.Ulimits:type_name -> iotmakerDockerCommunicationGrpc.Ulimit
	34, // 43: iotmakerDockerCommunicationGrpc.Mount.BindOptions:type_name -> iotmakerDockerCommunicationGrpc.BindOptions
	36, // 44: iotmakerDockerCommunicationGrpc.Mount.VolumeOptions:type_name -> iotmakerDockerCommunicationGrpc.VolumeOptions
	37, // 45: iotmakerDockerCommunicationGrpc.Mount.TmpfsOptions:type_name -> iotmakerDockerCommunicationGrpc.TmpfsOptions
	27, // 46: iotmakerDockerCommunicationGrpc.Time.Loc:type_name -> iotmakerDockerCommunicationGrpc.Location
	26, // 47: iotmakerDockerCommunicationGrpc.Location.Zone:type_name -> iotmakerDockerCommunicationGrpc.Zone
	38, // 48: iotmakerDockerCommunicationGrpc.Location.Tx:type_name -> iotmakerDockerCommunicationGrpc.ZoneTrans
	26, // 49: iotmakerDockerCommunicationGrpc.Location.CacheZone:type_name -> iotmakerDockerCommunicationGrpc.Zone
	32, // 50: iotmakerDockerCommunicationGrpc.DeviceRequest.Capabilities:type_name -> iotmakerDockerCommunicationGrpc.CapabilitiesList
	64, // 51: iotmakerDockerCommunicationGrpc.DeviceRequest.Options:type_name -> iotmakerDockerCommunicationGrpc.DeviceRequest.OptionsEntry
	65, // 52: iotmakerDockerCommunicationGrpc.Driver.Options:type_name -> iotmakerDockerCommunicationGrpc.Driver.OptionsEntry
	66, // 53: iotmakerDockerCommunicationGrpc.VolumeOptions.Labels:type_name -> iotmakerDockerCommunicationGrpc.VolumeOptions.LabelsEntry
	35, // 54: iotmakerDockerCommunicationGrpc.VolumeOptions.DriverConfig:type_name -> iotmakerDockerCommunicationGrpc.Driver
	40, // 55: iotmakerDockerCommunicationGrpc.NetworkResource.IPAM:type_name -> iotmakerDockerCommunicationGrpc.IPAM
	41, // 56: iotmakerDockerCommunicationGrpc.NetworkResource.ConfigFrom:type_name -> iotmakerDockerCommunicationGrpc.ConfigReference
	67, // 57: iotmakerDockerCommunicationGrpc.NetworkResource.Containers:type_name -> iotmakerDockerCommunicationGrpc.NetworkResource.ContainersEntry
	68, // 58: iotmakerDockerCommunicationGrpc.NetworkResource.Options:type_name -> iotmakerDockerCommunicationGrpc.NetworkResource.OptionsEntry
	69, // 59: iotmakerDockerCommunicationGrpc.NetworkResource.Labels:type_name -> iotmakerDockerCommunicationGrpc.NetworkResource.LabelsEntry
	42, // 60: iotmakerDockerCommunicationGrpc.NetworkResource.Peers:type_name -> iotmakerDockerCommunicationGrpc.PeerInfo
	70, // 61: iotmakerDockerCommunicationGrpc.NetworkResource.Services:type_name -> iotmakerDockerCommunicationGrpc.NetworkResource.ServicesEntry
	71, // 62: iotmakerDockerCommunicationGrpc.IPAM.Options:type_name -> iotmakerDockerCommunicationGrpc.IPAM.OptionsEntry
	43, // 63: iotmakerDockerCommunicationGrpc.IPAM.Config:type_name -> iotmakerDockerCommunicationGrpc.IPAMConfig
	72, // 64: iotmakerDockerCommunicationGrpc.IPAMConfig.AuxAddress:type_name -> iotmakerDockerCommunicationGrpc.IPAMConfig.AuxAddressEntry
	46, // 65: iotmakerDockerCommunicationGrpc.ServiceInfo.Tasks:type_name -> iotmakerDockerCommunicationGrpc.Task
	73, // 66: iotmakerDockerCommunicationGrpc.Task.Info:type_name -> iotmakerDockerCommunicationGrpc.Task.InfoEntry
	0,  // 67: iotmakerDockerCommunicationGrpc.ContainerInspectReply.ContainerJSON:type_name -> iotmakerDockerCommunicationGrpc.ContainerJSON
	39, // 68: iotmakerDockerCommunicationGrpc.NetworkInspectReply.NetworkResource:type_name -> iotmakerDockerCommunicationGrpc.NetworkResource
	4,  // 69: iotmakerDockerCommunicationGrpc.Config.ExposedPortsEntry.value:type_name -> iotmakerDockerCommunicationGrpc.Struct
	4,  // 70: iotmakerDockerCommunicationGrpc.Config.VolumesEntry.value:type_name -> iotmakerDockerCommunicationGrpc.Struct
	16, // 71: iotmakerDockerCommunicationGrpc.NetworkSettings.NetworksEntry.value:type_name -> iotmakerDockerCommunicationGrpc.EndpointSettings
	9,  // 72: iotmakerDockerCommunicationGrpc.PortMap.PortEntry.value:type_name -> iotmakerDockerCommunicationGrpc.PortBindingList
	44, // 73: iotmakerDockerCommunicationGrpc.NetworkResource.ContainersEntry.value:type_name -> iotmakerDockerCommunicationGrpc.EndpointResource
	45, // 74: iotmakerDockerCommunicationGrpc.NetworkResource.ServicesEntry.value:type_name -> iotmakerDockerCommunicationGrpc.ServiceInfo
	47, // 75: iotmakerDockerCommunicationGrpc.DockerServer.ContainerInspect:input_type -> iotmakerDockerCommunicationGrpc.ContainerInspectRequest
	50, // 76: iotmakerDockerCommunicationGrpc.DockerServer.NetworkInspect:input_type -> iotmakerDockerCommunicationGrpc.NetworkInspectRequest
	48, // 77: iotmakerDockerCommunicationGrpc.DockerServer.ContainerInspect:output_type -> iotmakerDockerCommunicationGrpc.ContainerInspectReply
	51, // 78: iotmakerDockerCommunicationGrpc.DockerServer.NetworkInspect:output_type -> iotmakerDockerCommunicationGrpc.NetworkInspectReply
	77, // [77:79] is the sub-list for method output_type
	75, // [75:77] is the sub-list for method input_type
	75, // [75:75] is the sub-list for extension type_name
	75, // [75:75] is the sub-list for extension extendee
	0,  // [0:75] is the sub-list for field type_name
}

func init() { file_final_proto_init() }
func file_final_proto_init() {
	if File_final_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_final_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerJSON); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerJSONBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MountPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Struct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortBindingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphDriverData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkSettingsBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultNetworkSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Health); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortBinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointIPAMConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthcheckResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Time); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Zone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeightDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThrottleDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapabilitiesList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ulimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Driver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TmpfsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZoneTrans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPAM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPAMConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerInspectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerInspectReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkInspectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_final_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkInspectReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_final_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   74,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_final_proto_goTypes,
		DependencyIndexes: file_final_proto_depIdxs,
		MessageInfos:      file_final_proto_msgTypes,
	}.Build()
	File_final_proto = out.File
	file_final_proto_rawDesc = nil
	file_final_proto_goTypes = nil
	file_final_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DockerServerClient is the client API for DockerServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DockerServerClient interface {
	ContainerInspect(ctx context.Context, in *ContainerInspectRequest, opts ...grpc.CallOption) (*ContainerInspectReply, error)
	NetworkInspect(ctx context.Context, in *NetworkInspectRequest, opts ...grpc.CallOption) (*NetworkInspectReply, error)
}

type dockerServerClient struct {
	cc grpc.ClientConnInterface
}

func NewDockerServerClient(cc grpc.ClientConnInterface) DockerServerClient {
	return &dockerServerClient{cc}
}

func (c *dockerServerClient) ContainerInspect(ctx context.Context, in *ContainerInspectRequest, opts ...grpc.CallOption) (*ContainerInspectReply, error) {
	out := new(ContainerInspectReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerInspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServerClient) NetworkInspect(ctx context.Context, in *NetworkInspectRequest, opts ...grpc.CallOption) (*NetworkInspectReply, error) {
	out := new(NetworkInspectReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.DockerServer/NetworkInspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DockerServerServer is the server API for DockerServer service.
type DockerServerServer interface {
	ContainerInspect(context.Context, *ContainerInspectRequest) (*ContainerInspectReply, error)
	NetworkInspect(context.Context, *NetworkInspectRequest) (*NetworkInspectReply, error)
}

// UnimplementedDockerServerServer can be embedded to have forward compatible implementations.
type UnimplementedDockerServerServer struct {
}

func (*UnimplementedDockerServerServer) ContainerInspect(context.Context, *ContainerInspectRequest) (*ContainerInspectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerInspect not implemented")
}
func (*UnimplementedDockerServerServer) NetworkInspect(context.Context, *NetworkInspectRequest) (*NetworkInspectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkInspect not implemented")
}

func RegisterDockerServerServer(s *grpc.Server, srv DockerServerServer) {
	s.RegisterService(&_DockerServer_serviceDesc, srv)
}

func _DockerServer_ContainerInspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerInspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).ContainerInspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/ContainerInspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).ContainerInspect(ctx, req.(*ContainerInspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerServer_NetworkInspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkInspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServerServer).NetworkInspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.DockerServer/NetworkInspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServerServer).NetworkInspect(ctx, req.(*NetworkInspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DockerServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iotmakerDockerCommunicationGrpc.DockerServer",
	HandlerType: (*DockerServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ContainerInspect",
			Handler:    _DockerServer_ContainerInspect_Handler,
		},
		{
			MethodName: "NetworkInspect",
			Handler:    _DockerServer_NetworkInspect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "final.proto",
}
